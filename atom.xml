<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Athenahe的小天地</title>
  
  <subtitle>记录自己的点点滴滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-05-30T14:23:16.296Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Athenahe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TF-IDF算法及分析</title>
    <link href="http://yoursite.com/2020/05/30/TF-IDF%E5%8E%9F%E7%90%86%E5%8F%8A%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2020/05/30/TF-IDF%E5%8E%9F%E7%90%86%E5%8F%8A%E5%88%86%E6%9E%90/</id>
    <published>2020-05-30T02:45:04.000Z</published>
    <updated>2020-05-30T14:23:16.296Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TF-IDF算法介绍"><a href="#TF-IDF算法介绍" class="headerlink" title="TF-IDF算法介绍"></a>TF-IDF算法介绍</h1><p>TF-IDF(term frequency–inverse document frequency，词频-逆向文件频率)是一种用于信息检索（information retrieval）与文本挖掘（text mining）的常用加权技术.</p><p>TF-IDF是一种统计方法，用以评估字词对于一个文件集或一个语料库中的其中一份文件的重要程度。<strong>字词的重要性随着它在文件中出现的次数成正比增加，但同时会随着它在语料库中出现的频率成反比下降</strong>。</p><p><strong>TF-IDF主要思想</strong>：如果一个单词在该文章中出现的频率(TF)高，并且在其它文章中出现频率很低，则认为该单词具有很好的区分能力，适合用来进行分类。</p><p>1）其中词频(Term Frequency)表示单词在该文章中出现的频率。通常归一化处理，以防止它偏向长的文件。</p><p>词频(TF) = 单词在该文章出现次数/当前文章总单词数<br><img src="http://note.youdao.com/yws/res/1021/96DA267174A94A3CABF29294F56E3A4C" alt="image"></p><p>2）其中反问档频率(Inverse Document Frequency)表示某一个特定单词IDF可以由总文章数除以包含该单词的文章数，再将得到的商取对数得到。如果包含该单词的文章越少，则IDF越大，则表明该单词具有很好的文章区分能力。</p><p>反问档频率(IDF) = log(语料库中文章总数/(包含该单词的文章数+1))<br><img src="http://note.youdao.com/yws/res/1023/E159DD9687154D9CBE2675AF12688346" alt="image"></p><p>question：为什么分母+1？<br>answer：分母之所以+1是为了避免分母为0.<br>其实最简单的IDF公式应该是log(语料库中文章总数/(包含该单词的文章数))，但是在一些特殊的时候会出现问题，比如一些生僻词在语料库中没有，这样分母会为0，IDF就没有意义了，为了避免这种情况发生，我们需要对IDF进行一些平滑操作，使得语料库中没有出现的生僻词也可以得到一个合适的IDF值。平滑的方式有很多种，上面的将分母+1是最简单的一种方式，还有一种比较常见的IDF平滑公式是IDF=log(语料库中文章总数+1/(包含该单词的文章数+1)+1)</p><p>==TF-IDF与一个词在文档中的出现次数成正比， 与包含该词的文档数成反比。==</p><p>有了IDF的定义，我们就可以计算某一个词语的TF-IDF值:TF-IDF(x)=TF(x)*IDF(x),其中TF(x)指单词x在当前文章中的词频。<br><img src="http://note.youdao.com/yws/res/1025/1D256242BB504A36BD961FCE6CFE5FB3" alt="image"></p><p>TF-IDF算法的优点：简单快速，结果比较符合实际情况。</p><p>TF-IDF算法的缺点：单纯以”词频”衡量一个词的重要性，不够全面，有时重要的词可能出现次数并不多。而且，这种算法无法体现词的位置信息，出现位置靠前的词与出现位置靠后的词，都被视为重要性相同，这是不正确的。（一种解决方法是，对全文的第一段和每一段的第一句话，给予较大的权重。）</p><p>应用场景：TF-IDF算法可用来提取文档的关键词，关键词在文本聚类、文本分类、文献检索、自动文摘等方面有着重要应用。</p><h1 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h1><p>以《中国的蜜蜂养殖》为例，假定该文长度为1000个词，”中国”、”蜜蜂”、”养殖”各出现20次，则这三个词的”词频”（TF）都为0.02。然后，搜索Google发现，包含”的”字的网页共有250亿张，假定这就是中文网页总数。包含”中国”的网页共有62.3亿张，包含”蜜蜂”的网页为0.484亿张，包含”养殖”的网页为0.973亿张。则它们的逆文档频率（IDF）和TF-IDF如下：<br><img src="http://note.youdao.com/yws/res/1029/AEBBDEDAA9224CCD9124457687F9954A" alt="image"></p><p>从上表可见，”蜜蜂”的TF-IDF值最高，”养殖”其次，”中国”最低。（如果还计算”的”字的TF-IDF，那将是一个极其接近0的值。）所以，如果只选择一个词，”蜜蜂”就是这篇文章的关键词。</p><h1 id="案例实战：基于TF-IDF的关键词提取"><a href="#案例实战：基于TF-IDF的关键词提取" class="headerlink" title="案例实战：基于TF-IDF的关键词提取"></a>案例实战：基于TF-IDF的关键词提取</h1><h2 id="基于python-mapreduce的TF-IDF计算"><a href="#基于python-mapreduce的TF-IDF计算" class="headerlink" title="基于python mapreduce的TF-IDF计算"></a>基于python mapreduce的TF-IDF计算</h2><p>开发步骤如下：</p><ul><li>Step 1：原始数据预处理</li><li>Step 2：产生IDF词表</li><li>Step 3：进行TF-IDF计算，计算单词在文章中的权重</li></ul><p>1) 将所有数据文件内容汇总到一个数据文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line"># Step1 原始数据预处理</span><br><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line">import math</span><br><span class="line"></span><br><span class="line">file_path_dir &#x3D; &#39;..&#x2F;DataSet&#x2F;it.seg.cln&#39;</span><br><span class="line">raw_path &#x3D; &#39;.&#x2F;raw.data&#39;</span><br><span class="line">idf_path &#x3D; &#39;.&#x2F;idf.data&#39;</span><br><span class="line"></span><br><span class="line">##读文件操作</span><br><span class="line">def read_file(f):</span><br><span class="line">    fd &#x3D; open(f, &#39;r&#39;, encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line">    return fd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file_raw_out &#x3D; open(raw_path, &#39;w&#39;, encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line"></span><br><span class="line"># 遍历整个原始数据目录，将零散的文章整合到一个文件中，便于后续数据处理</span><br><span class="line">file_name &#x3D; 0</span><br><span class="line">for fd in os.listdir(file_path_dir):</span><br><span class="line">    file_path &#x3D; file_path_dir + &#39;&#x2F;&#39; + fd #文件路径</span><br><span class="line">    content_list &#x3D; []</span><br><span class="line"></span><br><span class="line">    file_fd &#x3D; read_file(file_path)</span><br><span class="line">    for line in file_fd:</span><br><span class="line">        content_list.append(line.strip())</span><br><span class="line">#&#39; &#39;.join(content_list)</span><br><span class="line">    content &#x3D; &#39;\t&#39;.join([str(file_name),&#39;&#39;.join (content_list)]) + &#39;\n&#39;</span><br><span class="line">    #print (content)</span><br><span class="line">    #print(type(&#39;\t&#39;.join(content_list)))</span><br><span class="line">    file_raw_out.writelines(content)</span><br><span class="line"></span><br><span class="line">    file_name +&#x3D; 1</span><br><span class="line">print(&quot;文件个数：&quot;,file_name)</span><br></pre></td></tr></table></figure><p>raw.data(汇总数据文件，键值对格式)的内容为:<br><img src="http://note.youdao.com/yws/res/1051/F3C7705D227F45128D88988114CE896B" alt="image"></p><p>2) 对所有文章按照一定规律进行切分(map过程)<br>对文章进行统计，求出IDF(reduce过程)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">#step2 产生产生IDF词表</span><br><span class="line">docs_count &#x3D; file_name</span><br><span class="line">wc_tulist &#x3D; []</span><br><span class="line">with open(raw_path, &#39;r&#39;, encoding&#x3D;&#39;utf-8&#39;) as fd:</span><br><span class="line">    for line in fd:</span><br><span class="line">        #遍历每一篇文章，文章&#x3D;line</span><br><span class="line">        ss &#x3D; line.strip().split(&#39;\t&#39;)</span><br><span class="line">        #如果分割每篇文章后的长度不是2，则表示这篇文章格式不是我们需要的，我们要的是 【序号\t内容】格式</span><br><span class="line">        if len(ss)!&#x3D;2:</span><br><span class="line">            continue</span><br><span class="line">            </span><br><span class="line">        #对文章解析，区分文章序号和文章内容 </span><br><span class="line">        file_number,file_content &#x3D; ss</span><br><span class="line">        #对文章的内容进行切词，内容已经按照空格切好词了，所以按空格做split切割</span><br><span class="line">        word_list &#x3D; file_content.strip().split(&#39; &#39;)</span><br><span class="line">        #print(&quot;word_list:&quot;,word_list)</span><br><span class="line">        </span><br><span class="line">        #去重操作，对于IDF，只需要关注词在文章中是否出现，不关心出现次数</span><br><span class="line">        word_set &#x3D; set(word_list)</span><br><span class="line">        #print(&quot;word_set:&quot;,word_set)</span><br><span class="line">        </span><br><span class="line">        # 对于每个关键词，打一个标记“1”，来标识该次出现过</span><br><span class="line">        for word in word_set:</span><br><span class="line">            wc_tulist.append((word,&#39;1&#39;))</span><br><span class="line">            #print(&quot;wc_tulist:&quot;,wc_tulist)</span><br><span class="line">            </span><br><span class="line"> #将内容输出到指定文件中.&#x2F;idf.data</span><br><span class="line">file_idf_out &#x3D; open(idf_path,&#39;w&#39;,encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line"></span><br><span class="line">#按照词的字典序进行排序</span><br><span class="line">wc_sort_tulist &#x3D; sorted(wc_tulist,key&#x3D;lambda x: x[0])</span><br><span class="line">#print(wc_sort_tulist)</span><br><span class="line">current_word &#x3D; None</span><br><span class="line">sum &#x3D; 0</span><br><span class="line">for tu in wc_sort_tulist:  </span><br><span class="line">    word, val &#x3D; tu</span><br><span class="line"></span><br><span class="line">    if current_word &#x3D;&#x3D; None:</span><br><span class="line">        current_word &#x3D; word</span><br><span class="line"></span><br><span class="line">    if current_word !&#x3D; word:</span><br><span class="line">        # 通过idf计算公式，得到每个关键词的idf score</span><br><span class="line">        idf &#x3D; math.log(float(docs_count) &#x2F; (float(sum) + 1.0))</span><br><span class="line">        content &#x3D; &#39;\t&#39;.join([current_word, str(idf)]) + &#39;\n&#39;</span><br><span class="line">        file_idf_out.write(content)</span><br><span class="line">        current_word &#x3D; word</span><br><span class="line">        sum &#x3D; 0</span><br><span class="line"></span><br><span class="line">    sum +&#x3D; int(val)</span><br><span class="line"></span><br><span class="line">#反问档频率(IDF) &#x3D; log(语料库中文章总数&#x2F;(包含该单词的文章数+1))</span><br><span class="line">idf &#x3D; math.log(float(docs_count) &#x2F; (float(sum) + 1.0))</span><br><span class="line"></span><br><span class="line"># content格式是【words\t0.1212\n】</span><br><span class="line">content &#x3D; &#39;\t&#39;.join([current_word, str(idf)]) + &#39;\n&#39;</span><br><span class="line">file_idf_out.write(content)</span><br><span class="line">#print(content)</span><br><span class="line">file_idf_out.close()</span><br></pre></td></tr></table></figure><p>idf.data内容：<br><img src="http://note.youdao.com/yws/res/1054/2F1BBDA172034AAF9033567F6063147E" alt="image"></p><p>3) 求出最终的TF-IDF</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># Step3 计算TF-IDF来提取文章中的关键词(文章单词的权重)</span><br><span class="line">input_str &#x3D; &#39;我们 科技 带来 的 科技 希望 我们 差&#39;</span><br><span class="line"></span><br><span class="line">token_idf_dict &#x3D; &#123;&#125;</span><br><span class="line"># 将idf字典加载到内存</span><br><span class="line">with open(idf_path, &#39;r&#39;, encoding&#x3D;&#39;utf-8&#39;) as fd:</span><br><span class="line">    for line in fd:</span><br><span class="line">        ss &#x3D; line.strip().split(&#39;\t&#39;)</span><br><span class="line">        if len(ss) !&#x3D; 2:</span><br><span class="line">            continue</span><br><span class="line">        token, idf_score &#x3D; ss</span><br><span class="line">        token_idf_dict[token] &#x3D; idf_score</span><br><span class="line"></span><br><span class="line">def get_tfidf(input_str):</span><br><span class="line">    token_dict &#x3D; &#123;&#125;</span><br><span class="line">    # 对输入字符串的每一个词，计算tf</span><br><span class="line">    ##计算单词在该文章出现次数</span><br><span class="line">    for t in input_str.strip().split(&#39; &#39;):</span><br><span class="line">        if t not in token_dict:</span><br><span class="line">            token_dict[t] &#x3D; 1</span><br><span class="line">        else:</span><br><span class="line">            token_dict[t] +&#x3D; 1</span><br><span class="line">    print(token_dict)</span><br><span class="line">    # res_tu_list &#x3D; [] TF-IDF&#x3D;TF*IDF</span><br><span class="line">    for k, v in token_dict.items():</span><br><span class="line">        tf_score &#x3D; token_dict[k]</span><br><span class="line">        if k not in token_idf_dict:</span><br><span class="line">            continue</span><br><span class="line">        idf_score &#x3D; token_idf_dict[k]</span><br><span class="line">        tf_idf &#x3D; tf_score * float(idf_score)</span><br><span class="line">        yield (k, tf_idf)</span><br><span class="line"></span><br><span class="line">for k, v in get_tfidf(input_str):</span><br><span class="line">    print(k, v)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#39;我们&#39;: 2, &#39;科技&#39;: 2, &#39;带来&#39;: 1, &#39;的&#39;: 1, &#39;希望&#39;: 1, &#39;差&#39;: 1&#125;</span><br><span class="line">我们 2.240920456387959</span><br><span class="line">科技 4.378793497431945</span><br><span class="line">带来 1.4617633920848578</span><br><span class="line">的 0.0059113472630571645</span><br><span class="line">希望 1.9419885754021315</span><br><span class="line">差 3.013572191682322</span><br></pre></td></tr></table></figure><p>分析：“科技”的TF-IDF值最高，代表该文章的关键词；“的”的TF-IDF值最低，表示该词是最常用的词，也叫”停用词”（stop words）。</p><p>有关文章分词代码参考：<br><img src="http://note.youdao.com/yws/res/1155/B3F9A56BEDE445F4BF26132F1FC7801A" alt="image"></p><h2 id="基于Hadoop的TF-IDF实例开发"><a href="#基于Hadoop的TF-IDF实例开发" class="headerlink" title="基于Hadoop的TF-IDF实例开发"></a>基于Hadoop的TF-IDF实例开发</h2><p><a href="https://blog.csdn.net/ym01213/article/details/80212018" target="_blank" rel="noopener">https://blog.csdn.net/ym01213/article/details/80212018</a></p><p>参考文档：<a href="https://blog.csdn.net/u013982921/article/details/80964335" target="_blank" rel="noopener">TF-IDF原理及使用</a></p><p>参考文档：<a href="http://www.ruanyifeng.com/blog/2013/03/tf-idf.html" target="_blank" rel="noopener">TF-IDF与余弦相似性的应用（一）：自动提取关键词</a></p><p>参考文档：<a href="http://www.ruanyifeng.com/blog/2013/03/cosine_similarity.html" target="_blank" rel="noopener">TF-IDF与余弦相似性的应用（二）：找出相似文章</a></p><p>参考文档：<a href="https://blog.csdn.net/ym01213/article/details/80212018" target="_blank" rel="noopener">hadoop开发实现TF-IDF算法实例</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;TF-IDF算法介绍&quot;&gt;&lt;a href=&quot;#TF-IDF算法介绍&quot; class=&quot;headerlink&quot; title=&quot;TF-IDF算法介绍&quot;&gt;&lt;/a&gt;TF-IDF算法介绍&lt;/h1&gt;&lt;p&gt;TF-IDF(term frequency–inverse document
      
    
    </summary>
    
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/05/30/hello-world/"/>
    <id>http://yoursite.com/2020/05/30/hello-world/</id>
    <published>2020-05-30T02:18:43.274Z</published>
    <updated>2020-05-30T02:18:43.274Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>

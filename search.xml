<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>深入理解虚拟机---虚拟机性能监控与故障处理工具</title>
      <link href="/2020/06/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%99%9A%E6%8B%9F%E6%9C%BA-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7/"/>
      <url>/2020/06/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%99%9A%E6%8B%9F%E6%9C%BA-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>JDK的bin目录下存放很多种命令行工具，他们主要是在tools类库(jdk/lib/tools.jar)中实现的,我们可以借助这些工具直接在应用程序中实现功能强大的监控分析功能。</p></blockquote><h1 id="JDK监控和故障处理工具"><a href="#JDK监控和故障处理工具" class="headerlink" title="JDK监控和故障处理工具"></a>JDK监控和故障处理工具</h1><p>JDK监控和故障处理工具如下表所示：</p><table><thead><tr><th>名称</th><th>主要作用</th></tr></thead><tbody><tr><td>jps</td><td>JVM Process Status Tool，显示指定系统内所有HotSpot虚拟机进程</td></tr><tr><td>jstat</td><td>JVM Statistics Monitoring Tool，用于收集HotSpot虚拟机各方面的运行数据</td></tr><tr><td>jinfo</td><td>Configuration Info for Java，显示虚拟机配置信息</td></tr><tr><td>jmap</td><td>Memory Map for Java，生成虚拟机的内存转储快照(HeapDump文件)</td></tr><tr><td>jhat</td><td>JVM Heap Dump Browser，用于分析HeapDump文件，它会建立一个HTTP/HTML服务器，让用户可以在浏览器上查看分析结果</td></tr><tr><td>jstack</td><td>Stack Trace for Java,显示虚拟机的线程快照</td></tr></tbody></table><h2 id="jps：虚拟机进程状况工具"><a href="#jps：虚拟机进程状况工具" class="headerlink" title="jps：虚拟机进程状况工具"></a>jps：虚拟机进程状况工具</h2><p>jps与linux下的ps命令类似，可列出正在运行的虚拟机进程，并显示虚拟机执行主类名称以及这些进程的本地虚拟机唯一ID(Local Virtual Machine Identifier，LVMID)，还能通过RMI协议查询开启了RMI服务的远程虚拟机进程状态。</p><p>jps命令格式：jps [options] [hostid]</p><p>其中jps主要工具选项options的具体命令解释如下：</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-l</td><td>输出主类的全名，如果进程执行的是Jar包，输出Jar路径</td></tr><tr><td>-q</td><td>只输出LVMID，省略主类名称(是-l的简化版)</td></tr><tr><td>-v</td><td>输出虚拟机进程启动时JVM参数</td></tr><tr><td>-m</td><td>输出虚拟机进程启动时传递给主类main()函数的参数(是-v的简化版)</td></tr><tr><td><img src="https://img-blog.csdnimg.cn/20200603161134235.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_12,color_FFFFFF,t_70" alt="在这里插入图片描述"></td><td></td></tr><tr><td>具体参数信息解释可参考：<a href="https://blog.csdn.net/wisgood/article/details/38942449" target="_blank" rel="noopener">Jps命令—使用详解</a></td><td></td></tr><tr><td>##  jstat：虚拟机统计信息监视工具</td><td></td></tr><tr><td>jstat是用于监视虚拟机各种运行状态信息的命令行工具，它可以显示本地或者远程虚拟机进程中的类装载、内存、垃圾收集、JIT编译等运行数据。</td><td></td></tr></tbody></table><p>jstat命令格式为：jstat [option vmid [interval[s|ms]] [count]]</p><p>interval代表查询间隔，count代表次数，省略这两个参数，说明只查询一次。option代表用户希望查询的虚拟机信息</p><p>每200ms查询一次进程60847垃圾收集情况，查询10次的命令就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstat -gc 60847 200 10</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200603161237839.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">jstat的option代表用户希望查询的虚拟机信息，主要分为3类：类装载、垃圾收集、运行期编译状况。主要选项如下表所示：</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-class</td><td>监视类装载、卸载数量、总空间以及类装载所耗费的时间</td></tr><tr><td>-gc</td><td>监视java堆状况，包括Eden区、两个Survivor区、老年代等的容量、已用空间、GC时间合计等信息</td></tr><tr><td>-gccapacity</td><td>与-gc基本相同，主要关注java堆各个区域使用到的最大最小空间</td></tr><tr><td>-gcutil</td><td>与-gc基本相同，主要关注已使用空间占总空间的百分比</td></tr><tr><td>-gccause</td><td>与-gcutil功能一样，另外输出导致上一次GC产生的原因</td></tr><tr><td>-gcnew</td><td>监视新生代gc状况</td></tr><tr><td>-gcnewcapacity</td><td>与-gcnew基本相同，主要关注使用到的最大、最小空间</td></tr><tr><td>-gcold</td><td>监视老年代gc状况</td></tr><tr><td>-gcoldcapacity</td><td>与-gcold基本相同，主要关注使用到的最大、最小空间</td></tr><tr><td>-compailer</td><td>输出JIT编译器编译过的方法、耗时等信息</td></tr><tr><td>-printcompilation</td><td>输出已经被JIT编译的方法</td></tr><tr><td>比如：</td><td></td></tr><tr><td><img src="https://img-blog.csdnimg.cn/20200603161332370.png" alt="在这里插入图片描述"></td><td></td></tr><tr><td>具体参数信息解释可参考：<a href="https://blog.csdn.net/zhaozheng7758/article/details/8623549" target="_blank" rel="noopener">jstat命令详解</a></td><td></td></tr><tr><td>## jinfo：Java配置信息工具</td><td></td></tr><tr><td>jinfo的作用是实时的查看和调整虚拟机各项参数，-flag命令未被显示指定的参数的系统默认值，-sysprops把虚拟机进程的System.getProperties()的内容打印出来。</td><td></td></tr></tbody></table><h2 id="jmap：Java内存映象工具"><a href="#jmap：Java内存映象工具" class="headerlink" title="jmap：Java内存映象工具"></a>jmap：Java内存映象工具</h2><p>jmap命令用于生成堆转储快照，也可以设置虚拟机参数生成dump文件。jmap还可以查询finalize执行队列、Java堆的详细信息，如空间使用率、当前用的是哪种收集器等。Windows只能使用-dump选项和-histo选项。<br>下面是主要选项：<br>|选项|作用|<br>|–|–|<br>|<strong>-dump</strong>|    生成Java堆转储快照，格式为-dump:[live，]format=b，file=&lt;==filename==&gt;，其中live子参数说明说明是否只dump出存活的对象|<br>|-finalizerinfo|    显示在F-Queue中等待Finalizer线程中执行finalize方法的对象（仅linux/solaris平台有效）|<br>|-heap|    显示Java堆详细信息，如使用哪种回收器、参数配置、分代状况等（仅linux/solaris平台有效）|<br>|<strong>-histo</strong>|    显示堆中对象统计信息，包括类、实例数量、合计容量|<br>|-F|    强制生成dump快照（仅linux/solaris平台有效）|</p><h2 id="jhat：虚拟机堆转储快照分析工具"><a href="#jhat：虚拟机堆转储快照分析工具" class="headerlink" title="jhat：虚拟机堆转储快照分析工具"></a>jhat：虚拟机堆转储快照分析工具</h2><p>jhat一般与jmap搭配使用，jmap生成转储快照，jhat分析生成的转储快照。jhat内置了一个微型HTTP/HTML服务器，生产Dump文件的分析结果后可在浏览器中查看。(一般来说不直接使用jhat分析dump文件，一般使用内存分析工具JProfiler、VisualVM等代替jhat)<br>值得一看：<a href="https://www.cnblogs.com/baihuitestsoftware/articles/6406271.html" target="_blank" rel="noopener">java命令–jhat命令使用</a></p><h2 id="jstack：Java堆栈跟踪工具"><a href="#jstack：Java堆栈跟踪工具" class="headerlink" title="jstack：Java堆栈跟踪工具"></a>jstack：Java堆栈跟踪工具</h2><p>jstack用于生成虚拟机当前时刻的线程快照，线程快照是当前虚拟机内每一条线程正在执行的方法堆栈的集合，生成线程快照的主要目的是==定位线程出现长时间停顿的原因==，如线程间死锁、死循环、请求外部资源导致的长时间等待。线程出现停顿的时候通过jstack来查看各个线程的调用堆栈，可以知道没有响应的线程到底在后台做什么事情，或等待什么资源。<br>jstack命令格式：jstack [option] vmid<br>主要选项如下：<br>|选项|    作用|<br>|–|–|<br>|-F| 当正常输出的请求不被响应时，强制输出线程堆栈|<br>|-l    | 除堆栈外，显示关于锁的附加信息|<br>|-m| 如果调用到本地方法的话，可以显示C/C++的堆栈|</p><blockquote><p>jdk1.5之后，java.lang.Thread类新增了一个getAllStackTraces()方法用于获取虚拟机中所有线程的StackTraceElement对象。使用该方法可实现jstack的大部分功能</p></blockquote><h1 id="JDK可视化工具"><a href="#JDK可视化工具" class="headerlink" title="JDK可视化工具"></a>JDK可视化工具</h1><h2 id="JConsole"><a href="#JConsole" class="headerlink" title="JConsole"></a>JConsole</h2><p>在Java_HOME/bin目录下，有一个jconsole.exe，双击运行。（推荐使用升级版 JConsole 即 jvisualvm 。）<br>JConsole 基本包括以下基本功能：<code>概述、内存、线程、类、VM概要、MBean</code><br><a href="https://docs.oracle.com/javase/6/docs/technotes/guides/management/jconsole.html" target="_blank" rel="noopener">Jconsole官方文档</a><br><a href="https://www.cnblogs.com/zhuochong/p/10186155.html" target="_blank" rel="noopener">jconsole工具监控数据分析</a></p><h2 id="VisualVM"><a href="#VisualVM" class="headerlink" title="VisualVM"></a>VisualVM</h2><p>这个是到目前为止随JDK发布的功能最为强大的运行监视和故障处理工具，除了最基本的运行监视、 故障处理外，还有性能分析的功能，且十分强大。Visual VM还有一个很大的优点，它对应用程序的实际性能影响很小，使得它可以直接应用在生产环境中。</p><p>功能</p><ul><li>显示虚拟机进程以及进程的配置、环境信息（jps、jinfo）。</li><li>监视应用程序的CPU、GC、堆、方法区(1.7及以前)，元空间（JDK1.8及以后）以及线程的信息（jstat、jstack）。</li><li>dump以及分析堆转储快照（jmap、jhat）。</li><li>方法级的程序运行性能分析，找出被调用最多、运行时间最长的方法。</li><li>离线程序快照：收集程序的运行时配置、线程dump、内存dump等信息建立一个快照</li></ul><p><a href="https://www.cnblogs.com/happy-rabbit/p/6232581.html" target="_blank" rel="noopener">Java自带的监控工具VisualVM</a><br><a href="https://www.cnblogs.com/xifengxiaoma/p/9402497.html" target="_blank" rel="noopener">Java性能调优：利用VisualVM进行性能分析</a></p><p><a href="https://blog.csdn.net/qq_31156277/article/details/80035430" target="_blank" rel="noopener">JConsole和VisualVm可视化工具介绍</a></p><p>值得一看：<br><a href="https://blog.csdn.net/fenglibing/article/details/6411999" target="_blank" rel="noopener">JDK内置工具使用</a><br><a href="https://blog.csdn.net/biangu1486/article/details/81785013" target="_blank" rel="noopener">虚拟机性能监控与故障处理工具</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础算法50题</title>
      <link href="/2020/06/01/Java%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%9550%E9%A2%98/"/>
      <url>/2020/06/01/Java%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%9550%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p> <a href="https://github.com/AthenaHe/LeetCode/tree/master/com/test/basis" target="_blank" rel="noopener">代码所在的github地址</a></p><h1 id="【程序1】兔子繁殖问题"><a href="#【程序1】兔子繁殖问题" class="headerlink" title="【程序1】兔子繁殖问题"></a>【程序1】兔子繁殖问题</h1><p>有一对兔子，从出生后的第3个月开始每个月都生一对小兔子，小兔子长到第三个月之后每个月又生一对兔子， 假如兔子不死，问每个月的兔子数为多少？ ==斐波那契数列求值问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.basis;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRabbit</span> </span>&#123;</span><br><span class="line"><span class="comment">//方法1.迭代实现</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fib1</span><span class="params">(<span class="keyword">int</span> month)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> f1=<span class="number">0</span>,f2=<span class="number">1</span>,f;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=month; i++) &#123;</span><br><span class="line">f=f1+f2;</span><br><span class="line">f1=f2;</span><br><span class="line">f2=f;</span><br><span class="line">System.out.println(<span class="string">"第"</span>+i+<span class="string">"个月的兔子对数为："</span>+f2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法2.递归实现</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib2</span><span class="params">(<span class="keyword">int</span> month)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (month==<span class="number">1</span>||month==<span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fib2(month-<span class="number">1</span>)+fib2(month-<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> month=scanner.nextInt();</span><br><span class="line">TestRabbit main = <span class="keyword">new</span> TestRabbit();</span><br><span class="line">main.fib1(month);</span><br><span class="line"><span class="comment">//for (int i = 1; i &lt;=month; i++) &#123;</span></span><br><span class="line"><span class="comment">//System.out.println("第"+i+"个月的兔子对数为："+main.fib2(month));</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line">第<span class="number">1</span>个月的兔子对数为：<span class="number">1</span></span><br><span class="line">第<span class="number">2</span>个月的兔子对数为：<span class="number">2</span></span><br><span class="line">第<span class="number">3</span>个月的兔子对数为：<span class="number">3</span></span><br><span class="line">第<span class="number">4</span>个月的兔子对数为：<span class="number">5</span></span><br><span class="line">第<span class="number">5</span>个月的兔子对数为：<span class="number">8</span></span><br></pre></td></tr></table></figure><blockquote><p>题目强化版：有一对兔子，从出生第5个月起，开始每个月生一对小兔子，请问第n个月有多少对兔子？</p></blockquote><h1 id="【程序2】水仙花数"><a href="#【程序2】水仙花数" class="headerlink" title="【程序2】水仙花数"></a>【程序2】水仙花数</h1><p>   题目：打印出所有的”水仙花数”，所谓”水仙花数”是指一个三位数，其各位数字立方和等于该数本身。例如： 153是一个”水仙花数”，因为153=1的三次方＋5的三次方＋3的三次方。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分析：利用for循环控制100-999个数，每个数分解出个位，十位，百位。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindDaffodilNumber</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">100</span>;i&lt;=<span class="number">999</span>;i++) &#123;</span><br><span class="line">a=i/<span class="number">100</span>;</span><br><span class="line">b=(i-<span class="number">100</span>*a)/<span class="number">10</span>;</span><br><span class="line">c=i-<span class="number">100</span>*a-<span class="number">10</span>*b;</span><br><span class="line">num=a*a*a+b*b*b+c*c*c;</span><br><span class="line"><span class="keyword">if</span> (num==i) &#123;</span><br><span class="line">System.out.println(i+<span class="string">"是水仙花数"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">153</span>是水仙花数</span><br><span class="line"><span class="number">370</span>是水仙花数</span><br><span class="line"><span class="number">371</span>是水仙花数</span><br><span class="line"><span class="number">407</span>是水仙花数</span><br></pre></td></tr></table></figure><h1 id="【程序3】分解质因数"><a href="#【程序3】分解质因数" class="headerlink" title="【程序3】分解质因数"></a>【程序3】分解质因数</h1><p>题目：将一个正整数分解质因数。例如：输入90,打印出90=2<em>3</em>3*5。<br>程序分析：对n进行分解质因数，应先找到一个最小的质数k，然后按下述步骤完成：<br>(1)如果这个质数恰等于n，则说明分解质因数的过程已经结束，打印出即可。<br>(2)如果n!=k，但n能被k整除，则应打印出k的值，并用n除以k的商,作为新的正整数你n,重复执行第一步。<br>(3)如果n不能被k整除，则用k+1作为k的值,重复执行第一步。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FenJieZhiyinshu</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in); </span><br><span class="line"><span class="keyword">int</span> num = scanner.nextInt();<span class="comment">//输入这个整数</span></span><br><span class="line"><span class="keyword">int</span> k=<span class="number">2</span>;</span><br><span class="line">System.out.print(num+<span class="string">"="</span>);</span><br><span class="line"><span class="keyword">while</span>(num&gt;k) &#123;</span><br><span class="line"><span class="keyword">if</span> (num%k==<span class="number">0</span>) &#123;</span><br><span class="line">System.out.print(k+<span class="string">"*"</span>);</span><br><span class="line">num/=k;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">90</span></span><br><span class="line"><span class="number">90</span>=<span class="number">2</span>*<span class="number">3</span>*<span class="number">3</span>*<span class="number">5</span></span><br></pre></td></tr></table></figure><h1 id="【程序4】数字相加"><a href="#【程序4】数字相加" class="headerlink" title="【程序4】数字相加"></a>【程序4】数字相加</h1><p>题目：求s=a+aa+aaa+aaaa+aa…a的值，其中a是一个数字。例如2+22+222+2222+22222(此时共有5个数相加)，几个数相加有键盘控制。<br>程序分析：关键是计算出每一项的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNumAdd</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"请输入数字0-9:"</span>);</span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> a = scanner.nextInt();</span><br><span class="line">System.out.println(<span class="string">"请输入数字重复次数"</span>);</span><br><span class="line"><span class="keyword">int</span> n = scanner.nextInt();</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i&gt;<span class="number">0</span>; i--) &#123;</span><br><span class="line">sum+=a*i*Math.pow(<span class="number">10</span>, (n-i));</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"sum="</span>+sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">请输入数字<span class="number">0</span>-<span class="number">9</span>:</span><br><span class="line"><span class="number">1</span></span><br><span class="line">请输入数字重复次数</span><br><span class="line"><span class="number">3</span></span><br><span class="line">sum=<span class="number">123</span></span><br></pre></td></tr></table></figure><h1 id="【程序5】完数"><a href="#【程序5】完数" class="headerlink" title="【程序5】完数"></a>【程序5】完数</h1><p>题目：一个数如果恰好等于它的因子之和，这个数就称为”完数”。例如6=1＋2＋3.编程 找出1000以内的所有完数。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WanShu</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i%j==<span class="number">0</span>) &#123;</span><br><span class="line">sum+=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (sum==i) &#123;</span><br><span class="line">System.out.println(i+<span class="string">"是完数"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="【程序6】球落地反弹求距离"><a href="#【程序6】球落地反弹求距离" class="headerlink" title="【程序6】球落地反弹求距离"></a>【程序6】球落地反弹求距离</h1><p>题目：一球从100米高度自由落下，每次落地后反跳回原高度的一半；再落下，求它在第10次落地时，共经过多少米？第10次反弹多高？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBall</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> a=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">double</span> sum=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;=<span class="number">10</span>; i++) &#123;</span><br><span class="line">a=a*<span class="number">0.5</span>;</span><br><span class="line">sum+=a*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"第10次反弹a="</span>+a+<span class="string">"米"</span>);</span><br><span class="line">System.out.println(<span class="string">"第10次落地经过sum="</span>+sum+<span class="string">"米"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="【程序7】组成数字个数"><a href="#【程序7】组成数字个数" class="headerlink" title="【程序7】组成数字个数"></a>【程序7】组成数字个数</h1><p>有1、2、3、4个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTN</span> </span>&#123;</span><br><span class="line"><span class="comment">//数字1，2，3，4组成三位数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;<span class="comment">//保存百位上的数字</span></span><br><span class="line"><span class="keyword">int</span> j=<span class="number">0</span>;<span class="comment">//保存十位上的数字</span></span><br><span class="line"><span class="keyword">int</span> k=<span class="number">0</span>;<span class="comment">//保存个位上的数字</span></span><br><span class="line"><span class="keyword">int</span> n=<span class="number">0</span>;<span class="comment">//保存数字的个数</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i&lt;=<span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j&lt;=<span class="number">4</span>; j++) &#123;</span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">1</span>; k&lt;=<span class="number">4</span>; k++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i!=j&amp;&amp;j!=k&amp;&amp;i!=k) &#123;</span><br><span class="line">n+=<span class="number">1</span>;</span><br><span class="line">System.out.print(i*<span class="number">100</span>+j*<span class="number">10</span>+k+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"\n总共能够组成"</span>+n+<span class="string">"个数字"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span> <span class="number">124</span> <span class="number">132</span> <span class="number">134</span> <span class="number">142</span> <span class="number">143</span> <span class="number">213</span> <span class="number">214</span> <span class="number">231</span> <span class="number">234</span> <span class="number">241</span> <span class="number">243</span> <span class="number">312</span> <span class="number">314</span> <span class="number">321</span> <span class="number">324</span> <span class="number">341</span> <span class="number">342</span> <span class="number">412</span> <span class="number">413</span> <span class="number">421</span> <span class="number">423</span> <span class="number">431</span> <span class="number">432</span> </span><br><span class="line">总共能够组成<span class="number">24</span>个数字</span><br></pre></td></tr></table></figure><p><strong>题目强化版</strong>：有1、2、3、0个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？【注意⚠️：百位数不能为0】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTN</span> </span>&#123;</span><br><span class="line"><span class="comment">//数字1，2，3，0组成三位数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;<span class="comment">//保存百位上的数字</span></span><br><span class="line"><span class="keyword">int</span> j=<span class="number">0</span>;<span class="comment">//保存十位上的数字</span></span><br><span class="line"><span class="keyword">int</span> k=<span class="number">0</span>;<span class="comment">//保存个位上的数字</span></span><br><span class="line"><span class="keyword">int</span> n=<span class="number">0</span>;<span class="comment">//保存数字的个数</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i&lt;=<span class="number">3</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j&lt;=<span class="number">3</span>; j++) &#123;</span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">0</span>; k&lt;=<span class="number">3</span>; k++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i!=j&amp;&amp;j!=k&amp;&amp;i!=k) &#123;</span><br><span class="line">n+=<span class="number">1</span>;</span><br><span class="line">System.out.print(i*<span class="number">100</span>+j*<span class="number">10</span>+k+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"\n总共能够组成"</span>+n+<span class="string">"个数字"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">102</span> <span class="number">103</span> <span class="number">120</span> <span class="number">123</span> <span class="number">130</span> <span class="number">132</span> <span class="number">201</span> <span class="number">203</span> <span class="number">210</span> <span class="number">213</span> <span class="number">230</span> <span class="number">231</span> <span class="number">301</span> <span class="number">302</span> <span class="number">310</span> <span class="number">312</span> <span class="number">320</span> <span class="number">321</span> </span><br><span class="line">总共能够组成<span class="number">18</span>个数字</span><br></pre></td></tr></table></figure><p> 参考：<a href="https://www.cnblogs.com/tonylp/archive/2013/03/20/2971272.html" target="_blank" rel="noopener">Java基础算法集50题</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux批量添加和删除新用户和密码</title>
      <link href="/2020/06/01/linux%E6%89%B9%E9%87%8F%E6%B7%BB%E5%8A%A0%E5%92%8C%E5%88%A0%E9%99%A4%E6%96%B0%E7%94%A8%E6%88%B7%E5%92%8C%E5%AF%86%E7%A0%81/"/>
      <url>/2020/06/01/linux%E6%89%B9%E9%87%8F%E6%B7%BB%E5%8A%A0%E5%92%8C%E5%88%A0%E9%99%A4%E6%96%B0%E7%94%A8%E6%88%B7%E5%92%8C%E5%AF%86%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>今天老师给了我一个学生信息的文件，让我在服务器上批量创建用户名和密码都是学生学号的账号。一百多个账号，肯定不能手动建，所以写个脚本进行批量创建是最好不过的办法了。</p><ol><li>首先，创建user.txt。里面全是用户账号以换行分割<br>比如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user01</span><br><span class="line">user02</span><br><span class="line">user03</span><br></pre></td></tr></table></figure>其中批量添加用户和密码的脚本如下：（系统是ubuntu）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> user <span class="keyword">in</span> `cat user.txt`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        mkdir /home/<span class="variable">$user</span></span><br><span class="line">        useradd -d /home/<span class="variable">$user</span> -g users -s /bin/bash <span class="variable">$user</span></span><br><span class="line">        chown <span class="variable">$user</span> /home/<span class="variable">$user</span></span><br><span class="line">        chgrp users /home/<span class="variable">$user</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$user</span>:<span class="variable">$user</span> | chpasswd</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>关于<br><a href="https://www.cnblogs.com/irisrain/p/4324593.html" target="_blank" rel="noopener">linux命令useradd添加用户详解</a></p><p>执行脚本即可创建批量账号<br>可用<code>cat /etc/passwd</code>查看用户账号情况</p><p>==可能遇到的问题：==<br>我一开始在创建用户的时候没有指定shell，在ubuntu下默认是/bin/sh。所以在登录新用户的时候会出现按退格键出现^H ，按上下左右键可能会出现<br>^ [ [A^[ [B的问题，这是由于没有指定shell的类型导致的<br>解决：在adduser的时候指定shell的类型，<code>-s /bin/bash</code>就不会出现上述问题了。</p><p>上述是ubuntu系统批量创建用户的方式，下面是centoOS批量创建新用户的方式<br>同样要准备好user.txt（同上）<br>编写脚本adduser.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> user <span class="keyword">in</span> `cat userr.txt`</span><br><span class="line">         <span class="keyword">do</span>       </span><br><span class="line">                 useradd <span class="variable">$user</span></span><br><span class="line">                 <span class="built_in">echo</span> <span class="variable">$user</span> | passwd --stdin <span class="variable">$user</span>;</span><br><span class="line">                 <span class="built_in">echo</span> <span class="string">"<span class="variable">$user</span> add successfuly"</span></span><br><span class="line">         <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>是不是看起来要简单很多，CentOS下创建新用户时adduser操作中默认指定shell类型是/bin/bash，所以不会出现上述导致的问题。</p><p>批量删除用户<br>deluser.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> user <span class="keyword">in</span> `cat user.txt`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        userdel -r <span class="variable">$user</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$user</span> delete successfully"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>然后再查看passwd文件 <code>cat /etc/passwd</code>是否删除user文件中的所有用户。<br>如果出现有个别用户没有删除，可能是你登录了该用户账号但是没有退出，导致系统进程在运行无法删除，这时可手动kill 掉该账号所在的进程 比如：<code>kill -9 37621</code>。再次重新登录root账号userdel操作即可删除。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手进行CentoOS 6.5安装</title>
      <link href="/2020/06/01/%E6%89%8B%E6%8A%8A%E6%89%8B%E8%BF%9B%E8%A1%8CCentoOS-6-5%E5%AE%89%E8%A3%85/"/>
      <url>/2020/06/01/%E6%89%8B%E6%8A%8A%E6%89%8B%E8%BF%9B%E8%A1%8CCentoOS-6-5%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="一、安装Linux系统-CentoOS-6"><a href="#一、安装Linux系统-CentoOS-6" class="headerlink" title="一、安装Linux系统-CentoOS 6"></a>一、安装Linux系统-CentoOS 6</h1><p> 安装过很多次系统了，每次都没有记下来，想想还是记下来比较好，下次再装的话直接翻看一下就可以了，节省很多思考的时间。<br> 1.出现安装界面，点击下一步。<img src="https://img-blog.csdnimg.cn/20200516130345904.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_20,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br> 2.选择中文简体，点击下一步<br> <img src="https://img-blog.csdnimg.cn/20200516130604666.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_4,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br> 3.点击下一步<br> <img src="https://img-blog.csdnimg.cn/20200516130634144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_4,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br> 4.选择：基本存储设备<br> <img src="https://img-blog.csdnimg.cn/2020051613070593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_4,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br> 5.是，忽略所有数据<br><img src="https://img-blog.csdnimg.cn/20200516135734692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_4,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br> 6.设置主机名<br><img src="https://img-blog.csdnimg.cn/20200516135806446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_4,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>7.亚洲/上海<br><img src="https://img-blog.csdnimg.cn/20200516135837739.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_4,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>8.设置root密码，如果想设置简单点，就点击无论如何都使用，不管它的提示。<br><img src="https://img-blog.csdnimg.cn/20200516135935630.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_4,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>9.创建自定义布局<br><img src="https://img-blog.csdnimg.cn/20200516140006979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_4,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>10.点击创建<br><img src="https://img-blog.csdnimg.cn/20200516140030850.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_4,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>11.点击标准分区，创建<br><img src="https://img-blog.csdnimg.cn/20200516140058469.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_4,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>12.添加挂载点：/boot，大小200MB（磁盘总共20GB=20480MB）<br><img src="https://img-blog.csdnimg.cn/20200516140127119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_4,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>13.文件系统类型：swap，大小2048MB<br><img src="https://img-blog.csdnimg.cn/20200516140158627.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_4,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>14.添加挂载点：/ ，使用全部可用空间<br><img src="https://img-blog.csdnimg.cn/20200516140228988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_4,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>15.下一步，格式化，将修改写入磁盘<br><img src="https://img-blog.csdnimg.cn/20200516140257695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_4,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20200516140314217.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_4,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20200516140326281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_4,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>16.默认，下一步<br><img src="https://img-blog.csdnimg.cn/20200516140350395.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_4,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>17.Desktop，现在自定义<br><img src="https://img-blog.csdnimg.cn/20200516140414878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_4,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>18.不装web服务、可扩展文件系统支持所有插件<br><img src="https://img-blog.csdnimg.cn/20200516140442103.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_4,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>基本系统只装==基本、兼容程序库==</p><p><img src="https://img-blog.csdnimg.cn/20200516140516396.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_4,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>应用程序只装==互联网浏览器==<br><img src="https://img-blog.csdnimg.cn/20200516140544988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_4,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">不装开发、弹性存储、数据库、服务器的所有插件<br> <img src="https://img-blog.csdnimg.cn/20200516140617617.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_4,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br> 装桌面里系统默认选中的插件就行，没打勾的不管它<br>不装系统管理、虚拟化、负载均衡器、高可用性的所有插件<br> <img src="https://img-blog.csdnimg.cn/20200516140643154.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_4,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br> 装语言支持里的中文支持<br><img src="https://img-blog.csdnimg.cn/20200516140707979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_4,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>19.等待安装即可<br><img src="https://img-blog.csdnimg.cn/20200516140738382.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_4,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>点击重新引导<br><img src="https://img-blog.csdnimg.cn/20200516140802902.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_4,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>20.kdump如果可以选就选 ，不能选就算了。<br><img src="https://img-blog.csdnimg.cn/20200516140827780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_4,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>到此，安装完成</p><h1 id="二、CentOS安装VMware-Tools"><a href="#二、CentOS安装VMware-Tools" class="headerlink" title="二、CentOS安装VMware Tools"></a>二、CentOS安装VMware Tools</h1><ol><li><p>点击 虚拟机-安装VMware Tools<br>出现：请确保您已登录客户机操作系统。在客户机中装载虚拟CD驱动器，启动终端，使用tar解压缩安装程序，然后执行vmware-install.pl安装vmware Tools；<br><img src="https://img-blog.csdnimg.cn/20200516155901764.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>安装完后应该会出现如下所示：<br><img src="https://img-blog.csdnimg.cn/20200516160015222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p></li><li><p>装载CD</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/cdrom /media</span><br></pre></td></tr></table></figure><p>出现：mount: block device /dev/sr0 is write-protected, mounting read-only<br><img src="https://img-blog.csdnimg.cn/2020051616011981.png" alt="在这里插入图片描述" loading="lazy"></p></li><li><p>拷贝、解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp /media/VMwareTools-10.3.10-12406962.tar.gz /tmp/</span><br><span class="line"><span class="built_in">cd</span> /tmp/</span><br><span class="line">tar -zxf VMwareTools-10.3.10-12406962.tar.gz</span><br></pre></td></tr></table></figure><ol start="4"><li>安装</li></ol></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> vmware-tools-distrib/</span><br><span class="line">./vmware-install.pl</span><br></pre></td></tr></table></figure><p>开始安装，接着一路回车。<br><img src="https://img-blog.csdnimg.cn/2020051616094218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>5. 安装完成，重启<br>可实现主机与虚拟机之间互相拷贝，粘贴操作</p><blockquote><p>如果安装VNware Tools后找不到压缩程序。这个时候可以采用以下方式解决： 1、关闭虚拟机<br>2、点击菜单中的虚拟机-&gt;设置，将CD/DVD选项改成自动检测（而不是之前指向的ubuntuxxx.iso） <img src="https://img-blog.csdnimg.cn/20200516155724793.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">3、重启虚拟机<br>4、点击菜单中的虚拟机，点击安装vmware tool 5、之后按网上教程安装即可<br> <a href="https://blog.csdn.net/wangyan_hbu/article/details/77833516" target="_blank" rel="noopener">VMware安装VMwareTools遇到的问题</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot+JPA+mysql实现简单的增删改查(二)---实战开发</title>
      <link href="/2020/06/01/SpringBoot-JPA-mysql%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5-%E4%BA%8C-%E5%AE%9E%E6%88%98%E5%BC%80%E5%8F%91/"/>
      <url>/2020/06/01/SpringBoot-JPA-mysql%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5-%E4%BA%8C-%E5%AE%9E%E6%88%98%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="手把手教你实战开发"><a href="#手把手教你实战开发" class="headerlink" title="手把手教你实战开发"></a>手把手教你实战开发</h1><p>在正式开发之前需要先搭建环境：请参考我的上一篇文章<a href="https://blog.csdn.net/weixin_34566605/article/details/105928048" target="_blank" rel="noopener">SpringBoot+JPA+mysql实现简单的增删改查(一)—Spring Boot入门</a></p><h2 id="一、建立目录结构"><a href="#一、建立目录结构" class="headerlink" title="一、建立目录结构"></a>一、建立目录结构</h2><p>首先创建以下目录结构，其中分别是：entity层，dao层、service层、serviceImpl实现层、Controller层。<br><img src="https://img-blog.csdnimg.cn/20200505124513541.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h2 id="二、文件配置及环境"><a href="#二、文件配置及环境" class="headerlink" title="二、文件配置及环境"></a>二、文件配置及环境</h2><p>application.properties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#设置访问页面的前缀</span><br><span class="line">spring.mvc.view.prefix=/WEB-INF/</span><br><span class="line">#设置访问页面的后缀</span><br><span class="line">spring.mvc.view.suffix=.jsp</span><br><span class="line">##Mysql数据源各种配置</span><br><span class="line">spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//localhost:3306/db_test?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=<span class="number">12345678</span></span><br><span class="line">spring.datasource.initialSize=<span class="number">20</span></span><br><span class="line">spring.datasource.minIdle=<span class="number">50</span></span><br><span class="line">spring.datasource.maxActive=<span class="number">500</span></span><br><span class="line"> </span><br><span class="line">##项目端口配置</span><br><span class="line">#配置服务器访问端口</span><br><span class="line">server.port=<span class="number">8888</span></span><br><span class="line">#配置url的访问路径</span><br><span class="line">server.servlet.context-path=/schoolSystem</span><br><span class="line"> </span><br><span class="line">#jpa</span><br><span class="line">#如果spring.jpa.properties.hibernate.hbm2ddl.auto设置为update,会自动更新数据表结构比如Entity中增加成员变量，数据表中也会增加相应的字段，但是需要注意的是，如果删除一个成员变量，这时数据表中不会自动删除对应的字段,如果删除的那个成员变量在数据表中被设置为not null，当再次运行时就会报错</span><br><span class="line">spring.jpa.properties.hibernate.hbm2ddl.auto=update</span><br><span class="line">#熟悉mysql的都知道，myisam引擎并不支持事务，只有innodb引擎才支持事务的处理。由于jpa默认是myisam引擎，配置jpa自动建表为innodb</span><br><span class="line">spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect</span><br><span class="line">#设置为true可以运行时输出SQL语句</span><br><span class="line">spring.jpa.show-sql= <span class="keyword">true</span></span><br><span class="line">#设置为true可以解决jpa或hibernate的延迟加载问题</span><br><span class="line">spring.jpa.properties.hibernate.enable_lazy_load_no_trans=<span class="keyword">true</span></span><br></pre></td></tr></table></figure><p>pom.xml文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.2.6.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line">&lt;groupId&gt;com.hh&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;School&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;name&gt;School&lt;/name&gt;</span><br><span class="line">&lt;description&gt;Demo project for School Management System&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;java.version&gt;11&lt;/java.version&gt;</span><br><span class="line">&lt;!--  &lt;java-jar-plugin.version&gt;3.1.1&lt;/java-jar-plugin.version&gt;--&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;!-- pom.xml 文件中默认有两个模块：</span><br><span class="line">spring-boot-starter ：核心模块，包括自动配置支持、日志和 YAML，如果引入了 spring-boot-starter-web web 模块可以去掉此配置，因为 spring-boot-starter-web 自动依赖了 spring-boot-starter。</span><br><span class="line">spring-boot-starter-test ：测试模块，包括 JUnit、Hamcrest、Mockito。 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;exclusions&gt;</span><br><span class="line">&lt;exclusion&gt;</span><br><span class="line">&lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;</span><br><span class="line">&lt;/exclusion&gt;</span><br><span class="line">&lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- pom.xml中添加支持web的模块 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- servlet依赖. --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- tomcat的支持.--&gt;</span><br><span class="line">        &lt;!-- 添加如下包对JSP进行编译 包tomcat-embed-jasper被标记为已提供（provided），</span><br><span class="line">        因此表明我们希望JDK或容器在运行时提供依赖项，该作用域仅在编译和测试类路径上可用，并且不可传递--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;provide&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- mysql--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;8.0.19&lt;/version&gt;&lt;!--$NO-MVN-MAN-VER$--&gt;&lt;!-- 我装的是8.0.19版本--&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- jpa--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;   </span><br><span class="line"></span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;build&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>补充：我们在进行开发过程中可能会出现反复修改代码的情况，那么如何在修改代码后不重启就能够生效呢，这时候需要进行我们的热部署。spring-boot-devtools 模块也支持应用快速重启(restart)。所以在pom.xml文件中可加入以下依赖</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--快速应用重启（修改代码后不重启就能生效)热部署--&gt;  </span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>三、依次写entity实体层-&gt;Dao层-&gt;Service层-&gt;ServiceImpl层-&gt;controller层。<br>比如：建立班级</p><ol><li><p>建立实体层类TheClass.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hh.School.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Column;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GenerationType;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Table;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> hehuan</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2020年5月1日下午12:09:04</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"class"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TheClass</span> </span>&#123;</span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@Column</span>(name = <span class="string">"classid"</span>)</span><br><span class="line"><span class="comment">//表示mysql主键自增策略：@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line"><span class="comment">//表示oracle主键自增策略：@GeneratedValue(strategy = GenerationType.AUTO)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> classid;</span><br><span class="line"><span class="meta">@Column</span>(name = <span class="string">"classname"</span>,length = <span class="number">20</span>)</span><br><span class="line"><span class="keyword">private</span> String classname;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getClassid</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> classid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClassid</span><span class="params">(<span class="keyword">int</span> classid)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.classid = classid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getClassname</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> classname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClassname</span><span class="params">(String classname)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.classname = classname;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ps：由于使用JPA进行数据库驱动，配置文件中设置了可以自动建表，所以数据库可以不用建表，运行程序的时候会自动在对应数据库中创建。</p></li><li><p>建立Dao层接口TheClass.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hh.School.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hh.School.entity.TheClass;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> hehuan</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2020年5月1日下午3:57:29</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TheClassDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">TheClass</span>, <span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>建立Service层接口TheService.java</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hh.School.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> com.hh.School.entity.TheClass;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> hehuan</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2020年5月1日下午4:00:19</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TheClassService</span> </span>&#123;</span><br><span class="line"><span class="comment">//保存</span></span><br><span class="line"><span class="function">TheClass <span class="title">saveTheClass</span><span class="params">(TheClass theClass)</span></span>;</span><br><span class="line"><span class="comment">//更新</span></span><br><span class="line"><span class="function">TheClass <span class="title">updateTheClass</span><span class="params">(TheClass theClass)</span></span>;</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteTheClass</span><span class="params">(TheClass theClass)</span></span>;</span><br><span class="line"><span class="comment">//查询所有</span></span><br><span class="line"><span class="function">List&lt;TheClass&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//根据主键查询</span></span><br><span class="line"><span class="function">TheClass <span class="title">findByIDbyJPA</span><span class="params">(<span class="keyword">int</span> classid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>建立ServiceImpl层类TheClassServiceImpl.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hh.School.serviceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hh.School.dao.TheClassDao;</span><br><span class="line"><span class="keyword">import</span> com.hh.School.entity.TheClass;</span><br><span class="line"><span class="keyword">import</span> com.hh.School.service.TheClassService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> hehuan</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2020年5月1日下午4:02:48</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TheClassServiceImpl</span> <span class="keyword">implements</span> <span class="title">TheClassService</span></span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> TheClassDao theClassDao;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TheClass <span class="title">saveTheClass</span><span class="params">(TheClass theClass)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> theClassDao.save(theClass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TheClass <span class="title">updateTheClass</span><span class="params">(TheClass theClass)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> theClassDao.save(theClass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteTheClass</span><span class="params">(TheClass theClass)</span> </span>&#123;</span><br><span class="line">theClassDao.delete(theClass);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;TheClass&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> theClassDao.findAll();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TheClass <span class="title">findByIDbyJPA</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> theClassDao.getOne(id);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>建立Controller层TheClasscontroller.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hh.School.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> com.hh.School.entity.TheClass;</span><br><span class="line"><span class="keyword">import</span> com.hh.School.service.TheClassService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> hehuan</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2020年5月1日下午4:10:42</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TheClassController</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> TheClassService theClassService;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询所有</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/listClass"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">listClass</span><span class="params">(Model model)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"> List&lt;TheClass&gt; list=theClassService.findAll();</span><br><span class="line">        model.addAttribute(<span class="string">"lists"</span>, list);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"listClass"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加班级</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/addClass"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addClass</span><span class="params">(TheClass theClass)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">theClassService.saveTheClass(theClass);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:listClass"</span>;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">//删除班级</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/deleteClass"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteClass</span><span class="params">(TheClass theClass)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    theClassService.deleteTheClass(theClass);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:listClass"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//修改班级</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/updateClass"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateClass</span><span class="params">(TheClass theClass)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    theClassService.saveTheClass(theClass);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:listClass"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//编辑班级</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/editClass"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">editClass</span><span class="params">(<span class="keyword">int</span> classid,Model model)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        TheClass s=theClassService.findByIDbyJPA(classid);</span><br><span class="line">        model.addAttribute(<span class="string">"c"</span>, s);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"editClass"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>好了，后端部分就写好了。接下来写前端页面，用的jsp<br>我的jsp页面主要放在src/main/webapp/WEB-INF下面。没有这个目录的话，可以手动建一个。<br><img src="https://img-blog.csdnimg.cn/2020050514200878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>其中listClass.jsp和editClass.jsp主要是对班级的增加、修改、删除操作展示。<br>listClass.jsp内容如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">         pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;table align=<span class="string">'center'</span> border=<span class="string">'1'</span> cellspacing=<span class="string">'0'</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;班级号&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">        &lt;td&gt;班级名称&lt;/</span>td&gt;</span><br><span class="line">        &lt;td&gt;编辑&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">        &lt;td&gt;删除&lt;/</span>td&gt;</span><br><span class="line">    &lt;<span class="regexp">/tr&gt;</span></span><br><span class="line"><span class="regexp">&lt;c:forEach items="$&#123;lists&#125;" var="c" varStatus="st"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;tr&gt;</span></span><br><span class="line"><span class="regexp">            &lt;td&gt;$&#123;c.classid&#125;&lt;/</span>td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;c.classname&#125;&lt;<span class="regexp">/td&gt;        </span></span><br><span class="line"><span class="regexp">            &lt;td&gt;&lt;a href="editClass?classid=$&#123;c.classid&#125;"&gt;编辑&lt;/</span>a&gt;&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">            &lt;td&gt;&lt;a href="deleteClass?classid=$&#123;c.classid&#125;"&gt;删除&lt;/</span>a&gt;&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">            </span></span><br><span class="line"><span class="regexp">    </span></span><br><span class="line"><span class="regexp">        &lt;/</span>tr&gt;</span><br><span class="line">    &lt;<span class="regexp">/c:forEach&gt;</span></span><br><span class="line"><span class="regexp">    新增:</span></span><br><span class="line"><span class="regexp">    &lt;form action="addClass" method="post"&gt;</span></span><br><span class="line"><span class="regexp">        班级号：&lt;input name="classid" &gt; &lt;br&gt;</span></span><br><span class="line"><span class="regexp">        班级名称： &lt;input name="classname"&gt; &lt;br&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button type="submit"&gt;提交&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>table&gt;</span><br></pre></td></tr></table></figure>editClass.jsp内容如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">         pageEncoding=<span class="string">"UTF-8"</span> isELIgnored=<span class="string">"false"</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">"margin:0px auto; width:500px"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;form action=<span class="string">"updateClass"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">     班级号：&lt;input name=<span class="string">"classid"</span> value=<span class="string">"$&#123;c.classid&#125;"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">     班级名称：&lt;input name="classname" value="$&#123;c.classname&#125;"&gt; &lt;br&gt;</span><br><span class="line">        &lt;button type="submit"&gt;提交&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>运行项目（直接执行Application.java这个入口文件就可以了哦）<br><img src="https://img-blog.csdnimg.cn/20200505142429369.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>一般出现如下显示而且没有报错的话则表示启动成功：<br><img src="https://img-blog.csdnimg.cn/20200505142754904.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>前端没有用框架，所以不是很好看，后面会继续完善前端的部分，毕竟界面美观还是很重要的，输入url地址：<a href="http://localhost:8888/schoolSystem/listClass" target="_blank" rel="noopener">http://localhost:8888/schoolSystem/listClass</a><br><img src="https://img-blog.csdnimg.cn/20200505143130102.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1></li></ol><ul><li>新增功能：输入班级号：106，班级名称：二年六班，点击提交<br><img src="https://img-blog.csdnimg.cn/20200505143423410.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>添加成功ok<br><img src="https://img-blog.csdnimg.cn/20200505143613187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li><li>修改功能：点击编辑，修改班级名称，点击提交保存。<br><img src="https://img-blog.csdnimg.cn/20200505143703463.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>修改成功ok<br><img src="https://img-blog.csdnimg.cn/20200505144040966.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li><li>删除功能：点击删除链接。<br><img src="https://img-blog.csdnimg.cn/20200505144006279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>删除成功ok<br><img src="https://img-blog.csdnimg.cn/20200505144205331.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>以上这个demo还有很多不足之处，基本功能可以运行，新手可以利用这个来掌握SpringBoot+JPA技术栈和开发技巧。或许你会想问：为什么没有查询功能？哈哈哈，，，这个我后面有时间再更新。</li></ul><p>ps：源码我上传到了github上，有兴趣的可以下载看看：<a href="https://github.com/AthenaHe/MyProject.git，觉得对你有帮助的话，请给我一个start呀，嘿嘿嘿" target="_blank" rel="noopener">https://github.com/AthenaHe/MyProject.git，觉得对你有帮助的话，请给我一个start呀，嘿嘿嘿</a><br><img src="https://img-blog.csdnimg.cn/20200505153348394.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot+JPA+mysql实现简单的增删改查(一)---Spring Boot入门</title>
      <link href="/2020/06/01/SpringBoot-JPA-mysql%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5-%E4%B8%80-Spring-Boot%E5%85%A5%E9%97%A8/"/>
      <url>/2020/06/01/SpringBoot-JPA-mysql%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5-%E4%B8%80-Spring-Boot%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h1><p>SpringBoot项目搭建</p><ul><li>访问 <a href="http://start.spring.io/" target="_blank" rel="noopener">http://start.spring.io/</a></li><li>选择构建工具 Maven Project、Java、Spring Boot版本以及其它的信息。设置好之后，点击GENERATE下载项目压缩包。<br><img src="https://img-blog.csdnimg.cn/20200505094031293.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li><li>我使用的是Eclipse，可以File-&gt;Import-&gt;Existing Maven Project-&gt;next-&gt;选择解压后的文件夹-&gt;Finsh，成功导入到自己的工程中。</li><li>导入之后可能会有红叉叉，pom.xml文件第一行出现Unknown错误，这个可能是maven插件和eclispe不兼容的原因（ps：也可以忽略，不影响整体运行）<img src="https://img-blog.csdnimg.cn/20200505100624425.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>这样Spring Boot的环境就搭建好啦，是不是很简单。<h1 id="二、配置及分析"><a href="#二、配置及分析" class="headerlink" title="二、配置及分析"></a>二、配置及分析</h1>如上图所示：Spring boot的基础结构有三个文件目录：</li><li>src/main/java：程序开发以及主程序入口 </li><li>src/main/resources：配置文件 </li><li>src/test/java：测试程序<br>1）我们可以看到在src/main/java下有一个SchoolApplication.java文件，这是程序入口类SchoolApplication。在Springboot项目中我们可以通过main方法启动项目，在需要启动的主类中我们需要加入@SpringBootApplication这个注解，告诉spring boot，这个是程序的入口。<img src="https://img-blog.csdnimg.cn/20200505104735569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>其中<br>  <code>@SpringBootApplication</code>是一个复合注解，包括<code>@ComponentScan</code>，<code>@SpringBootConfiguration</code>，<code>@EnableAutoConfiguration</code>。</li></ul><p><img src="https://img-blog.csdnimg.cn/20200505105303605.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><blockquote><ul><li><strong>@SpringBootConfiguration</strong>继承自@Configuration，二者功能也一致，标注当前类是配置类，并会将当前类内声明的一个或多个以@Bean注解标记的方法的实例纳入到srping容器中，并且实例名就是方法名。</li><li><strong>@EnableAutoConfiguration</strong>的作用启动自动的配置，@EnableAutoConfiguration注解的意思就是Springboot根据你添加的jar包来配置你项目的默认配置，比如根据spring-boot-starter-web，来判断你的项目是否需要添加了webmvc和tomcat，就会自动的帮你配置web项目中所需要的默认配置。</li><li><strong>@ComponentScan</strong>扫描当前包及其子包下被@Component，@Controller，@Service，@Repository注解标记的类并纳入到spring容器中进行管理。是以前的<a href="context:component-scan">context:component-scan</a>（以前使用在xml中使用的标签，用来扫描包配置的平行支持）。<br>这篇相关分析写的不错，可以看看：<a href="https://blog.csdn.net/Ccww_/article/details/103195526" target="_blank" rel="noopener">简明易理解的@SpringBootApplication注解源码解析（包含面试提问）</a></li></ul></blockquote><p>2）src/main/resources下有个application.properties文件。<br>默认创建spring-boot项目后，会在resources目录下生成一个空的application.properties配置文件，springboot启动时加载该配置文件。<br>application.properties(或者application.yml)中包含系统属性、环境变量、命令参数这类信息。<br>我的文件配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">spring.mvc.view.prefix&#x3D;&#x2F;WEB-INF&#x2F;</span><br><span class="line">spring.mvc.view.suffix&#x3D;.jsp</span><br><span class="line">#项目端口配置</span><br><span class="line">#spring.datasource.type&#x3D;com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">spring.datasource.driverClassName&#x3D;com.mysql.cj.jdbc.Driver</span><br><span class="line">spring.datasource.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;db_test?useSSL&#x3D;false&amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8&amp;autoReconnect&#x3D;true&amp;serverTimezone&#x3D;Asia&#x2F;Shanghai</span><br><span class="line">spring.datasource.username&#x3D;root</span><br><span class="line">spring.datasource.password&#x3D;12345678</span><br><span class="line">spring.datasource.initialSize&#x3D;20</span><br><span class="line">spring.datasource.minIdle&#x3D;50</span><br><span class="line">spring.datasource.maxActive&#x3D;500</span><br><span class="line"> </span><br><span class="line">#Mysql数据源配置</span><br><span class="line">server.port&#x3D;8888</span><br><span class="line">server.servlet.context-path&#x3D;&#x2F;schoolSystem</span><br><span class="line"> </span><br><span class="line">#jpa</span><br><span class="line">spring.jpa.properties.hibernate.hbm2ddl.auto&#x3D;update</span><br><span class="line">spring.jpa.properties.hibernate.dialect&#x3D;org.hibernate.dialect.MySQL5InnoDBDialect</span><br><span class="line">spring.jpa.show-sql&#x3D; true</span><br><span class="line">spring.jpa.properties.hibernate.enable_lazy_load_no_trans&#x3D;true</span><br></pre></td></tr></table></figure><blockquote><p>这里有一篇文章是关于<a href="https://cloud.tencent.com/developer/article/1081732" target="_blank" rel="noopener">Spring Boot<br>之Application.properties配置大全</a>。不需要记忆，要用什么配置，直接查一下就好了，嘿嘿，很适合我这种记性不好的人。<br>或者能力强的人直接看官方文档：<a href="https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#using-boot-using-springbootapplication-annotation" target="_blank" rel="noopener">Spring Boot Reference Documentation</a></p></blockquote><p>3）src/test/java下可以进行一些测试。当运行 Spring Boot 应用程序测试时，它会自动的从当前测试类所在的包起一层一层向上搜索，直到找到一个@SpringBootApplication或@SpringBootConfiguration注释类为止。以此来确定如何装载 Spring 应用程序的上下文资源。只要你以合理的方式组织你的代码，你项目的主配置通常是可以被发现的。<br>4）有关pom.xml文件。</p><blockquote><p>POM是项目对象模型(Project Object Model)的简称,它是Maven项目中的文件，使用XML表示，名称叫做pom.xml。<br>该文件用于管理：源代码、配置文件、开发者的信息和角色、问题追踪系统、组织信息、项目授权、项目的url、项目的依赖关系等等。事实上，在Maven世界中，project可以什么都没有，甚至没有代码，但是必须包含pom.xml文件。</p></blockquote><p>我的pom.xml文件如下，这些都是为后面做的项目做基础哦。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 https:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;2.2.6.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;&#x2F;parent&gt;</span><br><span class="line">&lt;groupId&gt;com.hh&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;School&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">&lt;name&gt;School&lt;&#x2F;name&gt;</span><br><span class="line">&lt;description&gt;Demo project for School Management System&lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;java.version&gt;11&lt;&#x2F;java.version&gt;</span><br><span class="line">&lt;!--  &lt;java-jar-plugin.version&gt;3.1.1&lt;&#x2F;java-jar-plugin.version&gt;--&gt;</span><br><span class="line">&lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;!-- pom.xml 文件中默认有两个模块：</span><br><span class="line">spring-boot-starter ：核心模块，包括自动配置支持、日志和 YAML，如果引入了 spring-boot-starter-web web 模块可以去掉此配置，因为 spring-boot-starter-web 自动依赖了 spring-boot-starter。</span><br><span class="line">spring-boot-starter-test ：测试模块，包括 JUnit、Hamcrest、Mockito。 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;exclusions&gt;</span><br><span class="line">&lt;exclusion&gt;</span><br><span class="line">&lt;groupId&gt;org.junit.vintage&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;junit-vintage-engine&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;exclusion&gt;</span><br><span class="line">&lt;&#x2F;exclusions&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- pom.xml中添加支持web的模块 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;!-- servlet依赖. --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;javax.servlet-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jstl&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!-- tomcat的支持.--&gt;</span><br><span class="line">        &lt;!-- 添加如下包对JSP进行编译 包tomcat-embed-jasper被标记为已提供（provided），</span><br><span class="line">        因此表明我们希望JDK或容器在运行时提供依赖项，该作用域仅在编译和测试类路径上可用，并且不可传递--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.tomcat.embed&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;tomcat-embed-jasper&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;provide&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!-- mysql--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">          &lt;version&gt;8.0.19&lt;&#x2F;version&gt;&lt;!--$NO-MVN-MAN-VER$--&gt;&lt;!-- 我装的是8.0.19版本--&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!-- jpa--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;   </span><br><span class="line"></span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;build&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;plugin&gt;</span><br><span class="line">&lt;&#x2F;plugins&gt;</span><br><span class="line">&lt;&#x2F;build&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>知识总结笔记-字典树</title>
      <link href="/2020/06/01/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93%E7%AC%94%E8%AE%B0-%E5%AD%97%E5%85%B8%E6%A0%91/"/>
      <url>/2020/06/01/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93%E7%AC%94%E8%AE%B0-%E5%AD%97%E5%85%B8%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>1）定义：字典树，又叫单词查找树，Trie树，他是哈希树的变种，是一种N叉树，一种特色的前缀树结构。看下图：<br><img src="https://img-blog.csdnimg.cn/20200406181408564.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><blockquote><p>哈希树：可参考<a href="https://blog.csdn.net/yang_yulei/article/details/46337405" target="_blank" rel="noopener">查找——图文详解HashTree（哈希树）</a><br>哈希树可以广泛应用于那些需要对大容量数据进行快速匹配操作的地方。例如：数据库索引系统、短信息中的收条匹配、大量号码路由匹配、信息过滤匹配。哈希树不需要额外的平衡和防止退化的操作，效率十分理想。</p></blockquote><blockquote><p><strong>前缀树</strong>：前缀树是N叉树的一种特殊形式。通常来说，一个前缀树是用来存储字符串的。前缀树的每个节点代表一个字符串(前缀)。每个节点会有多个子节点，通往不同子节点的路径上有着不同的字符。子节点代表的字符串是由节点本身的原始字符串，以及通往该子节点路径上所有的字符组成的。前缀树的一个特点是：<strong>节点所有孩子与该节点相关的字符串有着共同前缀。</strong></p></blockquote><p>2）性质：</p><ul><li>根节点不包含字符，除外每个节点都只包含一个字符；</li><li>从根节点到某一节点，路径上经过的字符串联是该节点对应的字符串；</li><li>每个节点的所有子节点包含字符不同。</li></ul><h1 id="2-各种构造及实现"><a href="#2-各种构造及实现" class="headerlink" title="2. 各种构造及实现"></a>2. 各种构造及实现</h1><p>搜索字典的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> hehuan</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2020年4月6日下午4:10:11</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Trie</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIZE=<span class="number">26</span>;</span><br><span class="line"><span class="keyword">private</span> TrieNode root;<span class="comment">//字典树的根</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//字典树节点定义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> num;<span class="comment">//通过该节点的单词个数(由根节点到该节点组成的字符串出现的次数)</span></span><br><span class="line"><span class="keyword">private</span> TrieNode[] childNodes;<span class="comment">//孩子节点</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> isEnd;<span class="comment">//是否是最后一个节点</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">char</span> val;<span class="comment">//节点的值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TrieNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">num=<span class="number">1</span>;</span><br><span class="line">childNodes = <span class="keyword">new</span> TrieNode[SIZE];</span><br><span class="line">isEnd=<span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化字典树</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Trie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">root = <span class="keyword">new</span> TrieNode();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//建立字典树，在字典树中插入一个单词串</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (str==<span class="keyword">null</span>||str.length()==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">TrieNode node=root;</span><br><span class="line"><span class="keyword">char</span>[] letters=str.toCharArray();<span class="comment">//将目标单词转换为字符数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; letters.length; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> pos=letters[i]-<span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">if</span> (node.childNodes[pos]==<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//如果当前节点的儿子节点中没有该字符，则构建一个TrieNode并赋值该字符</span></span><br><span class="line">node.childNodes[pos]=<span class="keyword">new</span> TrieNode();</span><br><span class="line">node.childNodes[pos].val=letters[i];</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//如果出现了该字符，则将由根到该节点孩子节点字符串模式出现次数+1</span></span><br><span class="line">node.childNodes[pos].num++;</span><br><span class="line">&#125;</span><br><span class="line">node = node.childNodes[pos];</span><br><span class="line">&#125;</span><br><span class="line">node.isEnd=<span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在字典树中查找一个完全匹配的单词</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">find</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (str==<span class="keyword">null</span>||str.length()==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">TrieNode node=root;</span><br><span class="line"><span class="keyword">char</span>[] letters=str.toCharArray();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; letters.length; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> pos = letters[i]-<span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">if</span> (node.childNodes[pos]!=<span class="keyword">null</span>) &#123;</span><br><span class="line">node=node.childNodes[pos];</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果最后一个节点能走到底，则表示是完全匹配，如果不是最后一个节点走到底，就是部分匹配</span></span><br><span class="line"><span class="keyword">return</span> node.isEnd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前序遍历字典树</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preTraverse</span><span class="params">(TrieNode node)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (node!=<span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.print(node.val+<span class="string">"-"</span>);</span><br><span class="line"><span class="keyword">for</span> (TrieNode child:node.childNodes) &#123;</span><br><span class="line">preTraverse(child);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算前缀单词的数量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">PrefixNum</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (prefix==<span class="keyword">null</span>||prefix.length()==<span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">TrieNode node = root;</span><br><span class="line"><span class="keyword">char</span>[] letters = prefix.toCharArray();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; letters.length; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> pos = letters[i]-<span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">if</span> (node.childNodes[pos]!=<span class="keyword">null</span>) &#123;</span><br><span class="line">node=node.childNodes[pos];</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> node.num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历经过该节点的单词</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preTraverse</span><span class="params">(TrieNode node,String prefix)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!node.isEnd) &#123;</span><br><span class="line"><span class="keyword">for</span> (TrieNode child:node.childNodes) &#123;</span><br><span class="line"><span class="keyword">if</span> (child!=<span class="keyword">null</span>) &#123;</span><br><span class="line">preTraverse(node, prefix+child.val);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(prefix);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印指定前缀的单词</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">PrefixPrint</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (prefix==<span class="keyword">null</span>||prefix.length()==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">TrieNode node=root;</span><br><span class="line"><span class="keyword">char</span>[] letters = prefix.toCharArray();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; letters.length; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> pos = letters[i]-<span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">if</span> (node.childNodes[pos]!=<span class="keyword">null</span>) &#123;</span><br><span class="line">node=node.childNodes[pos];</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">preTraverse(node,prefix);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获得根节点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  TrieNode <span class="title">getRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Trie trie = <span class="keyword">new</span> Trie();</span><br><span class="line">String[] strs = &#123;<span class="string">"hello"</span>,<span class="string">"hi"</span>,<span class="string">"wor"</span>,<span class="string">"world"</span>,<span class="string">"hello"</span>,<span class="string">"he"</span>,<span class="string">"huan"</span>,<span class="string">"hehuan"</span>&#125;;</span><br><span class="line">String[] prefix = &#123;<span class="string">"h"</span>,<span class="string">"he"</span>,<span class="string">"wo"</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (String str:strs) &#123;</span><br><span class="line">trie.insert(str);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(trie.find(<span class="string">"wo"</span>));</span><br><span class="line">System.out.println(trie.find(<span class="string">"world"</span>));</span><br><span class="line">trie.preTraverse(trie.getRoot());</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="keyword">for</span> (String pre:prefix) &#123;</span><br><span class="line"><span class="keyword">int</span> num=trie.PrefixNum(pre);</span><br><span class="line">System.out.println(pre+<span class="string">"数量："</span>+num);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">true</span></span><br><span class="line">-h-e-h-u-a-n-l-l-o-i-u-a-n-w-o-r-l-d-</span><br><span class="line">h数量：<span class="number">6</span></span><br><span class="line">he数量：<span class="number">4</span></span><br><span class="line">wo数量：<span class="number">2</span></span><br></pre></td></tr></table></figure><h1 id="3-应用场景"><a href="#3-应用场景" class="headerlink" title="3.应用场景"></a>3.应用场景</h1><ul><li>有一个很大很大文本(全是单词组成)，查找出现次数最多的单词？</li><li>判断一个单词是否在这个超大文本中出现？(单词检索)<br>给出N个单词组成的熟词表，以及一篇全用小写英文书写的文章，请你按最早出现的顺序写出所有不在熟词表中的生词。<br>在这道题中，我们可以用数组枚举，用哈希，用字典树，先把熟词建一棵树，然后读入文章进行比较，这种方法效率是比较高的。</li><li>查找每个单词在文本中出现的次数？(词频统计)</li><li>对文本中的单词排序？(先序遍历)<br>给定N个互不相同的仅由一个单词构成的英文名，让你将他们按字典序从小到大输出<br>用字典树进行排序，采用数组的方式创建字典树，这棵树的每个结点的所有儿子很显然地按照其字母大小排序，对这棵树进行先序遍历即可。</li><li>查找单词最长公共前缀？<br>对所有串建立字典树，对于两个串的最长公共前缀的长度即他们所在的结点的公共祖先个数，于是，问题就转化为当时公共祖先问题。</li></ul><p>参考：<a href="https://baike.baidu.com/item/%E5%AD%97%E5%85%B8%E6%A0%91?fr=aladdin" target="_blank" rel="noopener">百度百科</a><br><a href="https://blog.csdn.net/weixin_39778570/article/details/81990417" target="_blank" rel="noopener">字典树(前缀树)</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java知识总结-常见的几种设计模式</title>
      <link href="/2020/06/01/java%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93-%E5%B8%B8%E8%A7%81%E7%9A%84%E5%87%A0%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/06/01/java%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93-%E5%B8%B8%E8%A7%81%E7%9A%84%E5%87%A0%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="23种设计模式类型"><a href="#23种设计模式类型" class="headerlink" title="23种设计模式类型"></a>23种设计模式类型</h1><p>java中有<strong>23</strong>种设计模式<br>设计模式分为三种类型：</p><ul><li><em>创建型模式（5种）</em>：这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用new运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。<br> <strong>单例模式、抽象工厂模式、建造者模式、工厂方法模式、原型模式</strong></li><li><em>结构型模式（7种）</em>：关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。<br>  <strong>适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式</strong></li><li><em>行为型模式（11种）</em>：这些设计模式特别关注对象之间的通信。<br><strong>模板方法模式、策略模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式</strong></li></ul><h2 id="1-单例模式"><a href="#1-单例模式" class="headerlink" title="1.单例模式"></a>1.单例模式</h2><p> 单例模式是指一个类只允许产生一个实例化对象。也是最好理解的一种设计模式。<br>    分为懒汉式和饿汉式。<br>    <strong>应用场景</strong>：在我们的系统中，有些对象只需要一个，比如：<strong>线程池、缓存、对话框、注册表、日志对象、充当打印机，显卡等设备驱程序的对象</strong>。事实上，这类对象只能有一个实例，如果制造出对歌实例就可能会导致一些问题的发生，比如程序的行为异常、资源使用过量、或者不一致的结果。<br>    <strong>单例模式优点</strong>：<br>    - 对于使用频繁的对象，可以省略创建对象所花费的时间，这对于那些重量级对象而言，是非常客观的一笔系统开销。<br>    - 由于new操作次数减少，因而对系统内存使用的频率也会降低，这将减轻GC压力，缩短GC停顿时间。</p><ul><li><strong>饿汉式</strong>：构造方法私有化，外部无法产生新的实例化对象，只能通过static方法取得实例化对象。<br>  具体实现步骤：<br>  1）将采用单例设计模式的类的构造方法私有化（private修饰）。<br>  2）在其内部产生该类的实例化对象，并将其封装成private static类型。<br>  3）定义一个静态方法返回该类的实例。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【线程安全，效率低】</span></span><br><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton instance=<span class="keyword">new</span> Singleton(); <span class="comment">//2.在内部类产生本类的实例化对象</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;<span class="comment">//1. 私有化构造方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123; <span class="comment">//3.通过静态方法返回instance对象</span></span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello Singleton..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Singleton singleton = <span class="keyword">null</span>;<span class="comment">//声明对象</span></span><br><span class="line">singleton=Singleton.getInstance();<span class="comment">//取得实例化对象</span></span><br><span class="line">singleton.print();<span class="comment">//调用方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>懒汉式</strong>：当第一次去使用Singleton对象的时候才会为其产生实例化对象的操作。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【非线程安全，效率高】</span></span><br><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;<span class="comment">//1. 私有化构造方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123; <span class="comment">//2.通过静态方法返回instance对象</span></span><br><span class="line"><span class="keyword">if</span> (instance==<span class="keyword">null</span>) &#123; <span class="comment">// 3. 使用Singleton对象时才产生实例化对象操作</span></span><br><span class="line">instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello Singleton..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Singleton singleton = <span class="keyword">null</span>;<span class="comment">//声明对象</span></span><br><span class="line">singleton=Singleton.getInstance();<span class="comment">//取得实例化对象</span></span><br><span class="line">singleton.print();<span class="comment">//调用方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>==但是==上面这种懒汉式单例模式在多线程并发执行getInstance()的时候会出现线程不安全的问题。所以为了保证线程安全，又有两种写法：<br>方法1:在getInstance()加个synchronized锁就可以了。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线程安全，效率低</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;<span class="comment">//1. 私有化构造方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123; <span class="comment">//2.通过静态方法返回instance对象</span></span><br><span class="line"><span class="keyword">if</span> (instance==<span class="keyword">null</span>) &#123; <span class="comment">// 3. 使用Singleton对象时才产生实例化对象操作</span></span><br><span class="line">instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello Singleton..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>方法2:【推荐使用这种写法】<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//【线程安全，效率高】</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;<span class="comment">//1. 私有化构造方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123; <span class="comment">//2.通过静态方法返回instance对象</span></span><br><span class="line"><span class="keyword">if</span> (instance==<span class="keyword">null</span>) &#123; <span class="comment">// 3. 使用Singleton对象时才产生实例化对象操作</span></span><br><span class="line"><span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (instance==<span class="keyword">null</span>) &#123;</span><br><span class="line">instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello Singleton..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>推荐阅读：<a href="https://blog.csdn.net/jason0539/article/details/23297037" target="_blank" rel="noopener">JAVA设计模式之单例模式</a></li></ul><h2 id="2-工厂设计模式"><a href="#2-工厂设计模式" class="headerlink" title="2.工厂设计模式"></a>2.工厂设计模式</h2><p>工厂模式分为工厂方法模式和抽象工厂模式。相当于程序在接口和子类之间加入一个过渡站（一个专门的类），通过这个过渡站可以动态获取实现了共同接口的子类实例化对象。【有一个专门的类来负责创建实例的过程】</p><h3 id="2-1工厂方法模式"><a href="#2-1工厂方法模式" class="headerlink" title="2.1工厂方法模式"></a>2.1工厂方法模式</h3><p>工厂方法模式又分3种：<em>普通工厂方法模式、多个工厂方法模式、静态工厂方法模式</em></p><ol><li><p><strong>普通工厂方法模式</strong>：建立一个工厂类，<strong>对实现了同一接口的一些类进行实例的创建。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="comment">//发送邮件和短信的例子</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Sender</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MailSender</span> <span class="keyword">implements</span> <span class="title">Sender</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Email Sending....."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhoneSender</span> <span class="keyword">implements</span> <span class="title">Sender</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Phone Sending..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//过渡站，实例化对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SendFactory</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Sender <span class="title">produce</span><span class="params">(String className)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"Email"</span>.equals(className)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> MailSender();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"Phone"</span>.equals(className)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> PhoneSender();</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"className error..."</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryPattern</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SendFactory factory = <span class="keyword">new</span> SendFactory();</span><br><span class="line">Sender sender = factory.produce(<span class="string">"Email"</span>);</span><br><span class="line">sender.Send();</span><br><span class="line">sender = factory.produce(<span class="string">"Phone"</span>);</span><br><span class="line">sender.Send();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>多个工厂方法模式</strong>：是对普通工厂模式的改进，普通工厂方法模式中如果传递的字符串出错，则不能正确创建对象，多个工厂方法模式是<strong>提供多个工厂方法，分别创建对象。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="comment">//发送邮件和短信的例子</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Sender</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MailSender</span> <span class="keyword">implements</span> <span class="title">Sender</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Email Sending....."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhoneSender</span> <span class="keyword">implements</span> <span class="title">Sender</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Phone Sending..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//过渡站，实例化对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SendFactory</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Sender <span class="title">ProduceMail</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> MailSender();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Sender <span class="title">producePhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> PhoneSender();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryPattern</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SendFactory factory = <span class="keyword">new</span> SendFactory();</span><br><span class="line">Sender sender = factory.ProduceMail();</span><br><span class="line">sender.Send();</span><br><span class="line">sender = factory.producePhone();</span><br><span class="line">sender.Send();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>静态工厂方法模式</strong>：将多个工厂方法模式的方法设置为静态的，不需要创建实例，直接调用即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="comment">//发送邮件和短信的例子</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Sender</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MailSender</span> <span class="keyword">implements</span> <span class="title">Sender</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Email Sending....."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhoneSender</span> <span class="keyword">implements</span> <span class="title">Sender</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Phone Sending..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//过渡站，实例化对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SendFactory</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Sender <span class="title">ProduceMail</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> MailSender();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Sender <span class="title">producePhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> PhoneSender();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryPattern</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Sender sender = SendFactory.ProduceMail();</span><br><span class="line">sender.Send();</span><br><span class="line">sender = SendFactory.producePhone();</span><br><span class="line">sender.Send();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工厂方法模式的缺点：类的创建依赖工厂类，要想扩展程序，必须对工厂类进行修改。</p><h3 id="2-2-抽象工厂模式"><a href="#2-2-抽象工厂模式" class="headerlink" title="2.2 抽象工厂模式"></a>2.2 抽象工厂模式</h3><p>抽象工厂模式解决了工厂方法模式的缺点，<strong>抽象出来一个工厂接口，创建了多个工厂类</strong>，如果需要增加新功能，直接增加新工厂类即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="comment">//发送邮件和短信的例子</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Sender</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MailSender</span> <span class="keyword">implements</span> <span class="title">Sender</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Email Sending....."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhoneSender</span> <span class="keyword">implements</span> <span class="title">Sender</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Phone Sending..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从工厂类中抽象出来一个接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Producer</span></span>&#123;</span><br><span class="line"><span class="function">Sender <span class="title">produce</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//工厂类实例化mail对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SendMailFactory</span> <span class="keyword">implements</span> <span class="title">Producer</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Sender <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> MailSender();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//工厂类实例化phone对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SendPhoneFactory</span> <span class="keyword">implements</span> <span class="title">Producer</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Sender <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> PhoneSender();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryPattern</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Producer producer = <span class="keyword">new</span> SendMailFactory();</span><br><span class="line">Sender sender = producer.produce();</span><br><span class="line">sender.Send();</span><br><span class="line">producer = <span class="keyword">new</span> SendPhoneFactory();</span><br><span class="line">sender = producer.produce();</span><br><span class="line">sender.Send();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-建造者模式"><a href="#3-建造者模式" class="headerlink" title="3. 建造者模式"></a>3. 建造者模式</h2><p>上面的工厂模式提供的是创建单个类的模式，建造者模式是将各种产品集中起来管理，用来创建复合对象(一个类有不同的属性)。<br>参考链接：<a href="https://blog.csdn.net/weixin_34566605/article/details/105135715" target="_blank" rel="noopener">设计模式知识笔记-建造者模式</a></p><h2 id="4-策略模式"><a href="#4-策略模式" class="headerlink" title="4.策略模式"></a>4.策略模式</h2></li><li><p>定义：策略模式定义了一系列算法，并将每个算法封装起来，而且使他们可以互相替换。</p></li><li><p>实现方式：<br>1）提供公共接口或抽象类，定义需要使用的策略方法。<br>2）多个实现的策略抽象类的实现类。<br>3）环境类，对多个实现类的封装，提供接口类型的成员变量，可在客户端切换。<br>4）客户端，调用环境类，进行不同策略的切换。</p><blockquote><p>JDK中的TreeSet、TreeMap的排序功能使用类策略模式。</p></blockquote></li><li><p>优点：<br>1）提供了一系列可重用的算法族，恰当使用继承可把算法族公共代码放到父类，避免重复代码。<br>2）可以在运行时切换对象内的算法。<br>3）可以将算法的实现和使用算法的代码隔离开来。<br>4）开闭原则。可以在不修改原代码的前提下，灵活增加新的算法。<br>5）多重条件的语句不容易维护，策略模式可以避免使用多重语句（if-else）。</p></li><li><p>缺点：<br>1）客户端必须知道所有的策略类，并决定使用哪一个策略类。这意味着客户端必须理解这些算法的区别，以便选择合适算法类。<br>2）策略太多的话，会出现很多策略类。</p></li><li><p>主要角色：<br>1）抽象策略类：定义了一个公共抽象接口，各种不同算法以不同方式实现这个接口，环境角色使用该接口调用不同算法。<br>2）具体策略类：实现抽象策略定义的接口，提供具体的算法实现。<br>3）上下文类(环境类)：持有一个策略类的引用，最终给客户端调用。</p></li><li><p>模式结构：<img src="https://img-blog.csdnimg.cn/20200327151041546.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p></li><li><p>举例说明：</p></li></ol><ul><li>角色：抽象决策类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> hehuan</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2020年3月27日下午3:17:31</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doOperation</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>角色： 具体策略类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> hehuan</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2020年3月27日下午3:19:33</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationAdd</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doOperation</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> num1+num2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> hehuan</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2020年3月27日下午3:20:17</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationSubstract</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doOperation</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> num1-num2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>角色：上下文类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> hehuan</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2020年3月27日下午3:21:01</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Strategy strategy;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(Strategy strategy)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.strategy=strategy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">executeStrategy</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> strategy.doOperation(num1, num2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>测试：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> hehuan</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2020年3月27日下午3:23:11</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyPattern</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Context context = <span class="keyword">new</span> Context(<span class="keyword">new</span> OperationAdd());</span><br><span class="line">System.out.println(<span class="string">"10+3="</span>+context.executeStrategy(<span class="number">10</span>, <span class="number">3</span>));</span><br><span class="line">context = <span class="keyword">new</span> Context(<span class="keyword">new</span> OperationSubstract());</span><br><span class="line">System.out.println(<span class="string">"10-3="</span>+context.executeStrategy(<span class="number">10</span>, <span class="number">3</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://img-blog.csdnimg.cn/2020032715302237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h2 id="5-适配器模式"><a href="#5-适配器模式" class="headerlink" title="5. 适配器模式"></a>5. 适配器模式</h2><p>定义：适配器模式就是将某个类的接口转换成客户端所需要的另一个接口表示，使得接口不兼容的对象能够相互合作。就像我们平时使用的转换头、适配器之类的意思。<br><img src="https://img-blog.csdnimg.cn/20200328092538204.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>适配器模式主要分为三种：类适配器模式、对象适配器模式、接口适配器模式</p><h3 id="5-1类适配器模式"><a href="#5-1类适配器模式" class="headerlink" title="5.1类适配器模式"></a>5.1类适配器模式</h3><p><strong>原理</strong>：通过<strong>继承</strong>来实现适配器的功能。</p><p><strong>举例说明</strong>：我有一台电脑带USB接口，我的U盘是TypeC接口的，我现在想要在电脑上插上我的U盘，但是现在接口不匹配，怎么办呢，我拿来了一个Typec转USB的转换器，在中间当个桥梁，这样我就可以将U盘和电脑进行连接交互了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> hehuan</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2020年3月28日上午9:27:44</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//描述接口USB的格式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">USB</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">isUSB</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> hehuan</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2020年3月28日上午9:30:18</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//USB接口格式的具体实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">USBer</span> <span class="keyword">implements</span> <span class="title">USB</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">isUSB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"插上USB接口"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> hehuan</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2020年3月28日上午9:28:17</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//描述接口TypeC的格式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TypeC</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">isTypeC</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> hehuan</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2020年3月28日上午9:31:18</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//这是个TypeC转USB的转换头</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">USBer</span> <span class="keyword">implements</span> <span class="title">TypeC</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">isTypeC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我是TypeC接口"</span>);</span><br><span class="line">isUSB();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> hehuan</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2020年3月28日上午9:33:05</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterPattern</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">TypeC typeC = <span class="keyword">new</span> Adapter();</span><br><span class="line">typeC.isTypeC();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：<br><img src="https://img-blog.csdnimg.cn/20200328094338512.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h3 id="5-2对象适配器模式"><a href="#5-2对象适配器模式" class="headerlink" title="5.2对象适配器模式"></a>5.2对象适配器模式</h3><p>原理：通过<strong>组合</strong>对象方式来实现适配器功能。<br>还是上面的例子，只是实现方式有些不同，Adapter不继承USBer类了，而是通过持有USB的实例对象来达到适配功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> hehuan</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2020年3月28日上午9:31:18</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">implements</span> <span class="title">TypeC</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> USB usb;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Adapter</span><span class="params">(USB usb)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.usb=usb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">isTypeC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我是TypeC接口"</span>);</span><br><span class="line">usb.isUSB();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> hehuan</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2020年3月28日上午9:33:05</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterPattern</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">TypeC typeC = <span class="keyword">new</span> Adapter(<span class="keyword">new</span> USBer());</span><br><span class="line">typeC.isTypeC();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3接口适配器模式"><a href="#5-3接口适配器模式" class="headerlink" title="5.3接口适配器模式"></a>5.3接口适配器模式</h3><p>原理：通过<strong>抽象类</strong>来实现适配器功能。<br> 当我们写一个接口，里面定义了很多抽象方法，但是现在我们可能只需要其中的一部分方法，如果实现该接口就必须对所有方法进行实现，这会导致代码浪费，为解决此问题，采用接口适配器的话，它采用一个抽象类作为中转，该抽象类实现来该接口的所有方法，我们如果想要实现接口的某个方法时，只需要对抽象类中的某个方法进行重写即可。【图画的不好看，能理解就好】<br><img src="https://img-blog.csdnimg.cn/20200328103200902.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="接口适配器模式" loading="lazy"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> hehuan</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2020年3月28日上午10:35:32</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USB</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Typec</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MiniDP</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HDMI</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> hehuan</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2020年3月28日上午9:31:18</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">implements</span> <span class="title">Target</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">USB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Typec</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MiniDP</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HDMI</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> hehuan</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2020年3月28日上午9:30:18</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> <span class="keyword">extends</span> <span class="title">Adapter</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">USB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"转换成电脑USB接口"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HDMI</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"转换成电脑HDMI接口"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> hehuan</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2020年3月28日上午10:48:12</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> <span class="keyword">extends</span> <span class="title">Adapter</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Typec</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"转换成手机typec接口"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> hehuan</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2020年3月28日上午9:33:05</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterPattern</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Computer computer = <span class="keyword">new</span> Computer();</span><br><span class="line">computer.USB();</span><br><span class="line">computer.HDMI();</span><br><span class="line">Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line">phone.Typec();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">转换成电脑USB接口</span><br><span class="line">转换成电脑HDMI接口</span><br><span class="line">转换成手机typec接口</span><br></pre></td></tr></table></figure><blockquote><p>总结：</p><ol><li>当我们希望一个类转换为满足的另一新接口的类时，可创建一个新类继承原有类实现新接口，这种情况可采用<strong>类的适配器模式</strong>。</li><li>当我们希望一个对象转换为满足另一个新接口对象时，可在新类中持有原类的一个实例，在新类方法中调用实例方法即可，这种情况采用<strong>对象的适配器模式</strong>。</li><li>当我们接口中有很多方法，但又不想全部实现时，可以采用继承抽象类的方式来重写我们需要的方法，这种情况采用<strong>接口的适配器模式</strong>。</li></ol></blockquote><h2 id="6-代理模式"><a href="#6-代理模式" class="headerlink" title="6.代理模式"></a>6.代理模式</h2><p><strong>定义</strong>：代理模式是指给一个对象提供一个代理(中介)，由代理控制对原对象的使用。代理分为<strong>静态代理</strong>和<strong>动态代理</strong>。这里暂时讲静态代理。<br><strong>优点</strong>：</p><ul><li>代理模式在客户端与目标对象之间起到一个<strong>中介</strong>作用和<strong>保护目标对象</strong>的作用。</li><li>代理对象可以<strong>扩展目标对象的功能</strong>。</li><li>代理模式能将客户端与目标对象分离，在一定程度上<strong>降低了系统的耦合度</strong>。</li></ul><p><strong>缺点</strong>：</p><ul><li>在客户端和目标对象之间增加一个代理对象，会造成请求处理<strong>速度变慢</strong>。</li><li>增加了<strong>系统的复杂度</strong>。</li></ul><p>角色：</p><ol><li><strong>抽象主题(Subject)</strong>：通过接口或抽象类声明真实主题和代理对象实现的业务方法。</li><li><strong>真实主题(Real Subject)</strong>：实现了抽象主题中的具体业务，是代理对象所代表的真实对象，是最终要引用的对象。</li><li><strong>代理(Proxy)</strong>：提供了与真实主题相同的接口，其内部含有对真实主题的引用，它可以访问、控制或扩展真实主题的功能。</li></ol><p>举个例子：我想买个手机，我可以直接找手机厂商买，也可以通过手机店买，其中手机店相当于代理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象主题</span></span><br><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> hehuan</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2020年3月28日下午2:39:47</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//买手机接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BuyPhone</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buyphone</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实际主题</span></span><br><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> hehuan</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2020年3月28日下午2:40:41</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">implements</span> <span class="title">BuyPhone</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyphone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"顾客买了一部手机"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代理</span></span><br><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> hehuan</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2020年3月28日下午2:41:54</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneProxy</span> <span class="keyword">implements</span> <span class="title">BuyPhone</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Customer customer;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PhoneProxy</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.customer=customer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyphone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">customer.buyphone();</span><br><span class="line">System.out.println(<span class="string">"我是手机店代理，送顾客一张贴膜"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> hehuan</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2020年3月28日下午2:43:43</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyPattern</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">PhoneProxy phoneProxy = <span class="keyword">new</span> PhoneProxy(customer);</span><br><span class="line">phoneProxy.buyphone();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">顾客买了一部手机</span><br><span class="line">我是手机店代理，送顾客一张贴膜</span><br></pre></td></tr></table></figure><p>上面的例子比较简单，好像看不出来代理的作用哈，这样说吧，代理不仅可以当中介卖你手机，他还能作出一些额外的工作，比如你买手机送你一张贴膜？比如给你手机设置权限你只能使用一部分功能？如果你手机出来问题直接找代理，不用去找厂商，厂商很忙的？</p><p>适用场景：<br>1）比如一张很大的图像，载入显示需要很长时间。<br>2）比如一个计算过程要花很久时间，但是需要显示中间结果。<br>3）一个对象只有某些访问权限，代理可以验证用户权限。</p><p>暂时先写到这，未完待续。。。</p><p>参考：<br><a href="https://www.cnblogs.com/tytr/p/6119573.html" target="_blank" rel="noopener">java几种常用设计模式简单示例</a><br><a href="https://blog.csdn.net/yubujian_l/article/details/81455524" target="_blank" rel="noopener">Java 中几种常用设计模式</a><br><a href="https://blog.csdn.net/jason0539/article/details/44956775" target="_blank" rel="noopener">23种设计模式汇总整理</a><br><a href="https://www.cnblogs.com/V1haoge/p/6479118.html" target="_blank" rel="noopener">Java设计模式之《适配器模式》及应用场景</a></p><p>发现了一个关于介绍设计模式的翻译网站，值得一看：<a href="https://refactoringguru.cn/design-patterns/creational-patterns" target="_blank" rel="noopener">Refactoring.Guru</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式知识笔记-建造者模式</title>
      <link href="/2020/06/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/06/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<ol><li><p><strong>定义</strong>：建造者模式是将各种产品集中起来管理，用来创建复合对象(一个类有不同的属性)。</p></li><li><p><strong>使用范围</strong>：</p></li></ol><ul><li>当创建复杂对象的算法时应该独立于该对象的组成部分以及他们的装配方式的时候。</li><li>当构造过程必须允许被构造的对象有不同的表示的时候。</li></ul><ol start="3"><li><strong>角色</strong>：<br>在这样的设计模式中，有以下几个角色：</li></ol><p>– Product：抽象产品类。ConcreteBuilder创建该产品的内部表示并定义它的装配过程，包含定义组成部件的类，包括将这些部件装配成最终产品的接口。<br>– Builder：为了规范产品的组建，创建一个产品对象的各个部件指定抽象接口。<br>– ConcreteBuilder：实现Builder的接口的具体实现类，以构造和装配该产品的各个部件，定义并明确它所创建的表示，并提供一个检索产品的接口。<br>– Director：构造一个使用Builder接口的对象，指导构建过程。</p><p>下面采用电脑装机的例子来进行解释：<br>角色Product：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> hehuan</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2020年3月27日上午10:24:28</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String CPU; <span class="comment">//cpu</span></span><br><span class="line"><span class="keyword">private</span> String mainBoard; <span class="comment">//主板</span></span><br><span class="line"><span class="keyword">private</span> String HD; <span class="comment">//硬盘</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCPU</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> CPU;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCPU</span><span class="params">(String cPU)</span> </span>&#123;</span><br><span class="line">CPU = cPU;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getMainBoard</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> mainBoard;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMainBoard</span><span class="params">(String mainBoard)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.mainBoard = mainBoard;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getHD</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> HD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHD</span><span class="params">(String hD)</span> </span>&#123;</span><br><span class="line">HD = hD;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> hehuan</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2020年3月27日上午9:46:55</span></span><br><span class="line"><span class="comment">*/</span><span class="comment">//角色product</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Macbook</span> <span class="keyword">extends</span> <span class="title">Computer</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Macbook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"macbook开始装机。。。"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>角色Builder：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> hehuan</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2020年3月27日上午9:44:19</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//角色Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ComputerBuilder</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildCPU</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildMainBoard</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildHD</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">Computer <span class="title">buildComputer</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>角色ConcreteBuilder：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> hehuan</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2020年3月27日上午9:49:38</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//角色ConcreteBuilder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MacbookBuilder</span> <span class="keyword">implements</span> <span class="title">ComputerBuilder</span></span>&#123;</span><br><span class="line">Computer computer;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MacbookBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">computer = <span class="keyword">new</span> Macbook();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildCPU</span><span class="params">()</span> </span>&#123;</span><br><span class="line">computer.setCPU(<span class="string">"CPU装机..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildMainBoard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">computer.setMainBoard(<span class="string">"主板装机..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildHD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">computer.setHD(<span class="string">"硬盘装机..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Computer <span class="title">buildComputer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> computer;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>角色Director：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> hehuan</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2020年3月27日上午9:54:08</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//角色：Director</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputerDirector</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Computer <span class="title">constructComputer</span><span class="params">(ComputerBuilder computerBuilder)</span> </span>&#123;</span><br><span class="line">computerBuilder.buildCPU();</span><br><span class="line">computerBuilder.buildMainBoard();</span><br><span class="line">computerBuilder.buildHD();</span><br><span class="line"><span class="keyword">return</span> computerBuilder.buildComputer();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuilderPattern</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ComputerDirector computerDirector = <span class="keyword">new</span> ComputerDirector();</span><br><span class="line">MacbookBuilder macbookBuilder = <span class="keyword">new</span> MacbookBuilder();</span><br><span class="line">Computer macbookComputer = computerDirector.constructComputer(macbookBuilder);</span><br><span class="line">System.out.println(macbookComputer.getCPU());</span><br><span class="line">System.out.println(macbookComputer.getMainBoard());</span><br><span class="line">System.out.println(macbookComputer.getHD());</span><br><span class="line">System.out.println(<span class="string">"装机完成。。。"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：<br><img src="https://img-blog.csdnimg.cn/20200327103038769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>未完待续。。。<br>参考链接🔗：<br><a href="https://blog.csdn.net/jason0539/article/details/44992733" target="_blank" rel="noopener">java设计模式之建造者模式</a><br><a href="https://www.runoob.com/w3cnote/builder-pattern.html" target="_blank" rel="noopener">设计模式之建造者(Builder)模式</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java知识笔记--Java线程创建方式、线程池</title>
      <link href="/2020/06/01/Java%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0-Java%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA%E6%96%B9%E5%BC%8F%E3%80%81%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>/2020/06/01/Java%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0-Java%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA%E6%96%B9%E5%BC%8F%E3%80%81%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<p>@[TOC]</p><h1 id="创建线程的四种方式"><a href="#创建线程的四种方式" class="headerlink" title="创建线程的四种方式"></a>创建线程的四种方式</h1><h2 id="1）继承thread类"><a href="#1）继承thread类" class="headerlink" title="1）继承thread类"></a>1）继承thread类</h2><ol><li>定义一个Thread类的子类，重写run方法，实现相关逻辑；</li><li>创建自定义的线程子类对象；</li><li>调用子类实例的start方法来启动线程。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"MyThread is executing."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">myThread.start();</span><br><span class="line">System.out.println(<span class="string">"mainThread is finished"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>结果：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyThread is executing.</span><br><span class="line">mainThread is finished</span><br></pre></td></tr></table></figure><h2 id="2）实现Runnable接口"><a href="#2）实现Runnable接口" class="headerlink" title="2）实现Runnable接口"></a>2）实现Runnable接口</h2></li><li>定义一个类MyRunnable实现接口Runnable，重写run方法，实现相关逻辑；</li><li>创建MyRunnable的实例对象myRunnable，把myRunnable作为目标创建Thread对象，该Thread的对象thread才是真的线程对象；</li><li>调用对象thread的start()方法启动线程。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"MyRunnable is executing."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">MyRunnable myRunnable = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">Thread thread = <span class="keyword">new</span> Thread(myRunnable);</span><br><span class="line">thread.start();</span><br><span class="line">System.out.println(<span class="string">"mainThread is finished"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>结果：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mainThread is finished</span><br><span class="line">MyRunnable is executing.</span><br></pre></td></tr></table></figure><h2 id="3）使用Callable和Future创建线程"><a href="#3）使用Callable和Future创建线程" class="headerlink" title="3）使用Callable和Future创建线程"></a>3）使用Callable和Future创建线程</h2></li><li>定义一个类MyCallable实现接口Callable，重写call方法，实现相关业务逻辑；</li><li>创建MyCallable的实例对象myCallable，把myCallable作为目标创建FutureTask对象；</li><li>再创建FutureTask的实例对象futureTask，把futureTask作为目标创建Thread对象；</li><li>调用对象thread的start()方法。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"myCallable's call() is running"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">MyCallable myCallable = <span class="keyword">new</span> MyCallable();</span><br><span class="line">FutureTask&lt;String&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;&gt;(myCallable);</span><br><span class="line">Thread thread = <span class="keyword">new</span> Thread(futureTask);</span><br><span class="line">thread.start();</span><br><span class="line">System.out.println(<span class="string">"mainThread is finished"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>结果：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mainThread is finished</span><br><span class="line">myCallable<span class="string">'s call() is running</span></span><br></pre></td></tr></table></figure><blockquote><pre><code>使用FutureTask类来包装Callbale对象，调用get()方法来获取子线程执行结束后返回的结果。</code></pre><p>调用get方法会阻塞，必须等到自宣称结束后才会得到返回值</p></blockquote><h2 id="4）使用Executor框架创建线程池"><a href="#4）使用Executor框架创建线程池" class="headerlink" title="4）使用Executor框架创建线程池"></a>4）使用Executor框架创建线程池</h2><strong>线程池为线程生命周期开销问题和资源不足问题提供了解决方案。</strong><br>Executors提供了一系列工厂方法用于创建线程池，返回的线程池都实现了<strong>ExecutorService</strong>接口，主要有：<br>newFixedThreadPool，newCacheThreadPool，newSingleThreadExecutor，newScheduledThreadPool。<h3 id="1-newFixThreadPool"><a href="#1-newFixThreadPool" class="headerlink" title="1. newFixThreadPool"></a>1. newFixThreadPool</h3>创建一个指定工作线程数量的线程池。每当提交一个任务就创建一个工作线程，若工作线程数量达到线程池初始最大数，则将提交的任务存入池队列中。也就是<code>创建一个可重用固定线程数的线程池，以共享的无界队列方式来运行这些线程。</code><br><strong>特点：</strong><ul><li>提高程序效率和节省创建线程时所消耗的开销；</li><li>当线程空闲时即线程池中没有可运行任务时，它不会释放工作线程，还会占用一定的系统资源。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ExecutorService fixedThreadPool = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> index = i;</span><br><span class="line">fixedThreadPool.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(index);</span><br><span class="line">Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>结果：每隔2s打印3个值，并且打印完后程序处于未结束状态。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="2-newCacheThreadPool"><a href="#2-newCacheThreadPool" class="headerlink" title="2. newCacheThreadPool"></a>2. newCacheThreadPool</h3><p>创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，否则，创建新线程。也就是说：<code>调用execute将重用以前构造的可用线程，如果现有线程没有可以用的，则创建一个新的线程到线程池。</code><br><strong>特点：</strong></p><ul><li>工作线程的创建数量可以很多（限制为Integer.MAX_VALUE），这样可灵活往线程池中添加线程。</li><li>如果长时间没有往线程池中提交任务，即如果工作线程空闲了指定的时间（默认1min），则该工作线程将自动终止，终止后，若又提交新任务，则线程池重新创建一个工作线程。</li><li>在使用 CacheThreadPool时，一定要注意控制任务的数量，否则，由于大量线程同时运行，容易造成系统崩溃。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ExecutorService cachedThreadPool = Executors.newCachedThreadPool();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> index = i;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(index * <span class="number">1000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">cachedThreadPool.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(index);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>结果：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><h3 id="3-newSingleThreadExecutor"><a href="#3-newSingleThreadExecutor" class="headerlink" title="3. newSingleThreadExecutor"></a>3. newSingleThreadExecutor</h3>创建一个单线程化的Executor，即<code>只创建唯一的工作线程来执行任务</code>，保证所有任务按照指定顺序（FIFO、LIFO、优先级）执行。如果这个线程异常结束，会有另一个取代它，保证顺序执行。<br>特点:<ul><li>单线程执行可保证顺序地执行各个任务，并且在任意给定时间不会有多个线程是活动的。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ExecutorService fixedThreadPool = Executors.newSingleThreadExecutor();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> index = i;</span><br><span class="line">fixedThreadPool.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(index);</span><br><span class="line">Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>结果：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><h3 id="4-newScheduledThreadPool"><a href="#4-newScheduledThreadPool" class="headerlink" title="4. newScheduledThreadPool"></a>4. newScheduledThreadPool</h3>创建一个定长的线程池，并且支持定时的以及周期性的任务执行或给定延迟后运行命令执行。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(<span class="number">5</span>);</span><br><span class="line">scheduledThreadPool.schedule(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"。。。延迟3s打印"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：打印完程序没有结束</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">。。。延迟<span class="number">3</span>s打印</span><br></pre></td></tr></table></figure><h2 id="使用线程池可能带来的风险"><a href="#使用线程池可能带来的风险" class="headerlink" title="使用线程池可能带来的风险"></a>使用线程池可能带来的风险</h2><p> <strong>1. 死锁</strong><br> 任何多线程应用程序都有死锁风险。所有池线程都在执行已经阻塞的等待队列中另一任务的执行结果的任务，但是这一任务却因为没有被占用的线程而不能运行，造成线程死锁。</p><p> <strong>2. 资源不足</strong><br> 线程消耗包括和其它系统资源在内的大量资源。如果线程池太大，那么被那些线程消耗的资源可能严重的影响系统的性能。</p><p> <strong>3. 并发错误</strong><br> 线程池和其它排队机制依靠使用wait方法和notify方法，这两个方法都难以使用。如果编码不正确，那么可能丢失通知，导致线程保存空闲状态，尽管队列中有工作要处理。使用这些方法时，必须格外小心。最好使用现有的、已经知道能工作的实现，例如util.concurrent包。</p><p><strong>4. 线程泄露</strong><br> 各种类型的线程池中一个严重的风险是线程泄漏，<code>当从池中除去一个线程以执行一项任务，而在任务完成后该线程却没有返回池时，</code>会发生这种情况。发生线程泄漏的一种情形出现在任务抛出一个 RuntimeException 或一个 Error 时。如果池类没有捕捉到它们，那么线程只会退出而线程池的大小将会永久减少一个。当这种情况发生的次数足够多时，线程池最终就为空，而且系统将停止，因为没有可用的线程来处理任务。<br>有些任务可能会永远等待某些资源或来自用户的输入，而这些资源又不能保证变得可用，用户可能也已经回家了，诸如此类的任务会永久停止，而这些停止的任务也会引起和线程泄漏同样的问题。如果某个线程被这样一个任务永久地消耗着，那么它实际上就被从池除去了。对于这样的任务，<strong>应该要么只给予它们自己的线程，要么只让它们等待有限的时间</strong>。</p><p><strong>5. 请求过载</strong><br><strong>请求过量可能会压垮服务器</strong>。在这种情形下，我们可能不想将每个到来的请求都排队到我们的工作队列，因为排在队列中等待执行的任务可能会消耗太多的系统资源并引起资源缺乏。在这种情形下决定如何做取决于您自己；在某些情况下，您可以简单地抛弃请求，依靠更高级别的协议稍后重试请求，您也可以用一个指出服务器暂时很忙的响应来拒绝请求。</p><p>参考：<a href="https://www.cnblogs.com/aaron911/p/6213808.html" target="_blank" rel="noopener">https://www.cnblogs.com/aaron911/p/6213808.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java内存模型（JMM）概述</title>
      <link href="/2020/06/01/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%EF%BC%88JMM%EF%BC%89%E6%A6%82%E8%BF%B0/"/>
      <url>/2020/06/01/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%EF%BC%88JMM%EF%BC%89%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p>今天看Java内存模型，觉的有一篇文章写的比较好，所以引用过来。<br>转载地址：<a href="https://blog.csdn.net/justloveyou_/article/details/71189093" target="_blank" rel="noopener">https://blog.csdn.net/justloveyou_/article/details/71189093</a></p><blockquote><p>Java内存模型（Java Memory Model），简称JMM。JMM定义了Java 虚拟机(JVM)在计算机内存(RAM)中的工作方式。JVM是整个计算机虚拟模型，所以JMM是隶属于JVM的。</p></blockquote><p>@[TOC]</p><h1 id="一、Java虚拟机内存模型"><a href="#一、Java虚拟机内存模型" class="headerlink" title="一、Java虚拟机内存模型"></a>一、Java虚拟机内存模型</h1><p>Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域，这些数据区域可以分为两个部分：一部分是<strong>线程共享</strong>的，一部分则是<strong>线程私有</strong>的。其中，线程共享的数据区包括<strong>方法区</strong>和<strong>堆</strong>，线程私有的数据区包括<strong>虚拟机栈</strong>、<strong>本地方法栈</strong>和<strong>程序计数器</strong>。如下图所示<br><img src="https://img-blog.csdnimg.cn/20200310160652447.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">)<img src="https://img-blog.csdnimg.cn/20200310165422141.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><blockquote><p><strong>关于永久代</strong><br>jdk1.6及之前：常量池分配在永久代 ；<br>jdk1.7：有，但已经逐步“去永久代” ；<br>jdk1.8及之后：无(java.lang.OutOfMemoryError: PermGen space,这种错误将不会出现在JDK1.8中 )；</p></blockquote><h2 id="1-线程私有区"><a href="#1-线程私有区" class="headerlink" title="1. 线程私有区"></a>1. 线程私有区</h2><p>线程私有的数据区 包括 <strong>程序计数器</strong>、 <strong>虚拟机栈</strong> 和 <strong>本地方法栈</strong> 三个区域。</p><h3 id="1-1程序计数器"><a href="#1-1程序计数器" class="headerlink" title="1.1程序计数器"></a>1.1程序计数器</h3><blockquote><p>知识点：线程是CPU调度的基本单位。在多线程情况下，当线程数超过CPU数量或CPU内核数量时，线程之间就要根据时间片轮询抢夺CPU时间资源。也就是说，<strong>在任何一个确定的时刻，一个处理器都只会执行一条线程中的指令</strong>。因此，为了线程切换后能够恢复到正确的执行位置，<strong>每条线程都需要一个独立的程序计数器去记录其正在执行的字节码指令地址。</strong></p></blockquote><p>1）程序计数器占较小的一块内存空间，可以看作是当前线程所执行的字节码的行号指示器。<br>　–如果线程正在执行的是一个 Java 方法，计数器记录的是正在执行的字节码指令的地址；<br>　–如果正在执行的是 Native 方法，则计数器的值为空。<br>2）程序计数器是唯一一个没有规定任何 OutOfMemoryError 的区域。</p><h3 id="1-2虚拟机栈"><a href="#1-2虚拟机栈" class="headerlink" title="1.2虚拟机栈"></a>1.2虚拟机栈</h3><p>虚拟机栈描述的是<strong>Java方法执行的内存模型</strong>，生命周期与线程相同，每个方法在执行的时候都会创建一个栈帧，用于<strong>存储局部变量表、操作数栈、动态链接、方法出口</strong>等信息，而且每个方法从调用直至完成的过程，对应一个栈帧在虚拟机栈中入栈到出栈的过程。其中，局部变量表主要存放一些基本类型的变量（int, short, long, byte, float, double, boolean, char）和 对象句柄，它们可以是方法参数，也可以是方法的局部变量。<strong>虚拟机栈有两种异常情况：StackOverflowError 和 OutOfMemoryError</strong>。<br>1）StackOverflowError情况：一个线程拥有一个自己的栈，（-Xss 参数可以设置虚拟机栈大小），若线程请求的栈深度大于虚拟机允许的深度，则抛出 StackOverFlowError 异常。<br>2）OutOfMemoryError情况：栈的大小可以是固定的，也可以是动态扩展的，若虚拟机栈可以动态扩展（大多数虚拟机都可以），但扩展时无法申请到足够的内存(比如没有足够的内存为一个新创建的线程分配栈空间时)，则抛出 OutofMemoryError 异常。<br>下图为栈帧结构图：<br><img src="https://img-blog.csdnimg.cn/20200310162358276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h3 id="1-3本地方法栈"><a href="#1-3本地方法栈" class="headerlink" title="1. 3本地方法栈"></a>1. 3本地方法栈</h3><p>本地方法栈与Java虚拟机栈非常相似，但是也有区别之处。<br>区别：虚拟机栈<strong>为虚拟机执行 Java 方法服务</strong>，而本地方法栈<strong>为虚拟机执行 Native 方法服务</strong>。<br>相同：与虚拟机栈一样，本地方法栈区域也会抛出 StackOverflowError 和 OutOfMemoryError 异常。</p><h2 id="2-线程共享区"><a href="#2-线程共享区" class="headerlink" title="2.线程共享区"></a>2.线程共享区</h2><p>线程共享的数据区具体包括 <strong>Java堆</strong> 和 <strong>方法区</strong> 两个区域。</p><h3 id="2-1-Java堆"><a href="#2-1-Java堆" class="headerlink" title="2.1 Java堆"></a>2.1 Java堆</h3><p>Java 堆的唯一目的就是<strong>存放对象实例</strong>。类的对象从中分配空间，这些对象通过new、newarray、 anewarray 和 multianewarray 等指令建立，它们不需要程序代码来显式的释放。由于Java堆唯一目的就是用来存放对象实例，因此其也是垃圾收集器管理的主要区域，故也称为称为 <strong>GC堆</strong>。</p><blockquote><p>　<strong>知识点</strong>：从内存回收的角度看，目前垃圾收集器基本都采用<strong>分代收集算法</strong>，所以为了方便垃圾回收Java堆还可以分为 新生代 和 老年代 。新生代用于存放刚创建的对象以及年轻的对象，如果对象一直没有被回收，生存得足够长，对象就会被移入老年代。新生代又可进一步细分为 eden、survivorSpace0 和 survivorSpace1。刚创建的对象都放入新生代（大对象除外）都至少经过一次GC并幸存。如果幸存对象经过一定时间仍存在，则进入老年代。<br><img src="https://img-blog.csdnimg.cn/20200310164218620.png" alt="在这里插入图片描述" loading="lazy"></p></blockquote><p>注意：<strong>Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可</strong>。而且，Java堆可通过-Xmx(最大堆容量) 和 -Xms(最小堆容量)进行容量限制。如果在堆中没有内存完成实例分配，并且堆也无法再拓展时，将会抛出 OutOfMemoryError 异常。</p><h4 id="TLAB-（线程私有分配缓冲区"><a href="#TLAB-（线程私有分配缓冲区" class="headerlink" title="TLAB （线程私有分配缓冲区)"></a>TLAB （线程私有分配缓冲区)</h4><p>　　Sun Hotspot JVM 为了提升对象内存分配的效率，<strong>对于所创建的线程都会分配一块独立的空间 TLAB</strong>（Thread Local Allocation Buffer），其大小由JVM根据运行的情况计算而得。在TLAB上分配对象时不需要加锁(相对于CAS配上失败重试方式 )，因此JVM在给线程的对象<strong>分配内存时会尽量的在TLAB上分配</strong>，在这种情况下JVM中分配对象内存的性能和C基本是一样高效的，但如果<strong>对象过大的话则仍然是直接使用堆空间分配</strong>。</p><blockquote><p>虚拟机为新生对象分配内存时，需要考虑修改指针 (该指针用于划分内存使用空间和空闲空间)时的线程安全问题，因为存在可能出现正在给对象A分配内存，指针还未修改，对象B又同时使用原来的指针分配内存的情况。<strong>TLAB的存在就是为了解决线程安全问题</strong>：每个线程在Java堆中预先分配一小块内存TLAB，哪个线程需要分配内存就在自己的TLAB上进行分配，若TLAB用完并分配新的TLAB时，再加同步锁定，这样就大大提升了对象内存分配的效率。</p></blockquote><h3 id="2-2-方法区"><a href="#2-2-方法区" class="headerlink" title="2.2 方法区"></a>2.2 方法区</h3><p>方法区也可以处于物理上不连续的内存空间中，用于存储已被虚拟机加载的 <strong>类信息、常量、静态变量、即时编译器编译后的代码</strong>等数据。根据Java虚拟机规范的规定，当方法区无法满足内存分配的需求时，将抛出 OutOfMemoryError 异常。</p><h4 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h4><p>运行时常量池（Runtime Constant Pool）是方法区的一部分，用于存放编译期生成的各种 <strong>字面量 和 符号引用</strong>。<br>    1）字面量：比较接近Java语言层次的<strong>常量</strong>概念，如文本字符串、被声明为final的常量值等；<br>    2）符号引用：属于编译原理方面的概念，包括以下三类常量：<strong>类和接口的全限定名</strong>、<strong>字段的名称和描述符</strong> 和 <strong>方法的名称和描述符</strong>。因为运行时常量池（Runtime Constant Pool）是方法区的一部分，那么当常量池无法再申请到内存时也会抛出 OutOfMemoryError 异常。</p><blockquote><p>运行时常量池相对于Class文件常量池的一个重要特征是<strong>具备动态性</strong>。Java语言并不要求常量一定只有编译期才能产生，运行期间也可能将新的常量放入池中，比如字符串的手动入池方法intern()。</p></blockquote><h3 id="2-3-Java堆与方法区的区别"><a href="#2-3-Java堆与方法区的区别" class="headerlink" title="2.3 Java堆与方法区的区别"></a>2.3 Java堆与方法区的区别</h3><p><strong>【Java堆在堆内存中，方法区在非堆内存中】</strong>：Java堆是 Java代码可及的内存，是留给开发人员使用的；而非堆（Non-Heap）是JVM留给自己用的，方法区、JVM内部处理或优化所需的内存 (如JIT编译后的代码缓存)、每个类结构 (如运行时常量池、字段和方法数据)以及方法和构造方法的代码都在非堆内存中。</p><h3 id="2-4-方法区的回收"><a href="#2-4-方法区的回收" class="headerlink" title="2.4 方法区的回收"></a>2.4 方法区的回收</h3><p>方法区的内存回收目标主要是针对 <strong>常量池的回收</strong> 和 <strong>对类型的卸载</strong>。</p><blockquote><p>举例说明：回收废弃常量与回收Java堆中的对象非常类似。以常量池中字面量的回收为例，假如一个字符串“abc”已经进入了常量池中，但是当前系统没有任何一个String对象是叫做“abc”的，换句话说是<strong>没有任何String对象引用常量池中的“abc”常量，也没有其他地方引用了这个字面量，如果在这时候发生内存回收，而且必要的话，这个“abc”常量就会被系统“请”出常量池</strong>。常量池中的其他类（接口）、方法、字段的符号引用也与此类似。</p><p> 无用类的判断比废弃常量的判断要复杂些，类需要同时满足下面3个条件才能算是“无用的类”：</p><ul><li>该类所有的实例都已经被回收，也就是Java堆中不存在该类的任何实例；</li><li>加载该类的ClassLoader已经被回收；</li><li>该类对应的 java.lang.Class 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li></ul></blockquote><h1 id="二-Java对象在虚拟机中的创建与访问定位"><a href="#二-Java对象在虚拟机中的创建与访问定位" class="headerlink" title="二. Java对象在虚拟机中的创建与访问定位"></a>二. Java对象在虚拟机中的创建与访问定位</h1><p>下面以最流行的HotSpot虚拟机以及常用的内存区域Java堆为例来探讨在虚拟机中对象的创建和对象的访问等问题。</p><h2 id="1-对象在虚拟机中的创建过程"><a href="#1-对象在虚拟机中的创建过程" class="headerlink" title="1. 对象在虚拟机中的创建过程"></a>1. 对象在虚拟机中的创建过程</h2><p><strong>【(1)类加载，(2)分配内存】</strong><br>   (1).<strong>检查虚拟机是否加载了所要new的类</strong>，若没加载，则首先执行相应的类加载过程。虚拟机遇到new指令时，首先去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个引用代表的类是否已经被加载、解析和初始化过。<br>   (2). 在类加载检查通过后，对象所需内存的大小在类加载完成后便可完全确定，虚拟机就会<strong>为新生对象分配内存</strong>。一般来说，根据Java堆中内存是否绝对规整，内存的分配有两种方式：</p><ul><li><strong>指针碰撞</strong>：如果Java堆中内存绝对规整，所有用过的内存放在一边，空闲内存放在另一边，中间一个指针作为分界点的指示器，那分配内存就仅仅是把那个指针向空闲空间那边挪动一段与对象大小相同的距离。<ul><li><strong>空闲列表</strong>：如果Java堆中内存并不规整，那么虚拟机就需要维护一个列表，记录哪些内存块是可用的，以便在分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的记录。</li></ul></li></ul><blockquote><p>除了如何划分可用空间之外，还需要考虑修改指针<br>(该指针用于划分内存使用空间和空闲空间)时的线程安全问题，因为存在可能出现正在给对象A分配内存，指针还未修改，对象B又同时使用原来的指针分配内存的情况。解决这个问题有两种方案：<br>–对分配内存空间的动作进行同步处理：采用<strong>CAS+失败重试</strong>的方式保证更新操作的原子性；<br>–把内存分配的动作按照线程划分的不同的空间中：每个线程在Java堆中预先分配一小块内存，称为<strong>本地线程分配缓冲（TLAB）</strong>【具体见上面的2.1-&gt;TLAB介绍】，哪个线程要分配内存，就在自己的TLAB上分配，如果TLAB用完并分配新的TLAB时，再加同步锁定。</p></blockquote><p>(3). 内存分配完成后，虚拟机需要将分配到的内存空间都<strong>初始化为零值</strong>。如果使用TLAB，也可以提前到TLAB分配时进行。这一步操作<strong>保证了对象的实例字段在Java代码中可以不赋初值就直接使用</strong>，程序能访问到这些字段的数据类型所对应的零值。<br>(4). 在上面的工作完成之后，从<strong>虚拟机的角度来看，一个新的对象已经产生</strong>了，但从<strong>Java程序的视角来看，对象的创建才刚刚开始</strong>，此时会执行<init>方法把对象按照程序员的意愿进行初始化，从而产生一个真正可用的对象。</p><h2 id="2-对象在虚拟机中的访问定位"><a href="#2-对象在虚拟机中的访问定位" class="headerlink" title="2.对象在虚拟机中的访问定位"></a>2.对象在虚拟机中的访问定位</h2><p>创建对象是为了使用对象，我们的Java程序通过栈上的reference数据来操作堆上的具体对象。在虚拟机规范中，reference类型中只规定了一个指向对象的引用，并没有定义这个引用使用什么方式去定位、访问堆中的对象的具体位置。目前的主流的访问方式有<strong>使用句柄访问</strong>和<strong>直接指针访问</strong>两种。<br>1）<strong>句柄访问</strong>：Java堆中会划分出一块内存作为句柄池，栈中的reference指向对象的句柄地址，句柄中包含了<strong>对象实例数据</strong>和<strong>类型数据</strong>各自的具体地址信息，如下图所示。<br><img src="https://img-blog.csdnimg.cn/20200310184918475.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>使用句柄访问的好处：reference中存储的是稳定的句柄地址，对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变句柄中的实例数据指针，reference本身不需要修改；</p><p>2）<strong>直接指针访问</strong>：reference中存储的就是对象地址。<br><img src="https://img-blog.csdnimg.cn/20200310185225470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>使用直接指针访问的好处：速度快，节省了一次指针定位的时间开销。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java知识笔记--用户线程、守护线程</title>
      <link href="/2020/06/01/Java%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0-%E7%94%A8%E6%88%B7%E7%BA%BF%E7%A8%8B%E3%80%81%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B/"/>
      <url>/2020/06/01/Java%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0-%E7%94%A8%E6%88%B7%E7%BA%BF%E7%A8%8B%E3%80%81%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>java分两种线程：<strong>用户线程（user thread）和守护线程（daemon thread）。</strong></p><h1 id="1-用户线程、守护线程定义"><a href="#1-用户线程、守护线程定义" class="headerlink" title="1. 用户线程、守护线程定义"></a>1. 用户线程、守护线程定义</h1><p><strong>守护线程</strong>：<strong>指程序运行时后台服务线程</strong>，比如：垃圾回收线程，当所有非守护线程结束时，程序也就终止，同时会杀死进程中所有的守护线程，反过来说，如果任何非守护线程还在运行，程序不会终止，守护线程就不会终止。<strong>【有非守护线程在，守护线程一定在；非守护线程不在程序终止，守护线程随之消亡】</strong><br><strong>用户线程</strong>：<strong>用户自己创建的线程</strong>，比如：new thread。</p><h1 id="2-用户线程与守护线程的区别"><a href="#2-用户线程与守护线程的区别" class="headerlink" title="2. 用户线程与守护线程的区别"></a>2. 用户线程与守护线程的区别</h1><ul><li>在于虚拟机的退出（程序的终止），当虚拟机内只剩下守护线程时，虚拟机会退出，程序会终止。</li><li>通常我们使用Thread创建的线程在默认情况下都属于用户线程，当在启动线程之前，执行thread.setDaemon(true)时，线程会变成守护线程。</li></ul><blockquote><p> <strong>java守护线程与linux守护线程的区别</strong>：linux守护线程是系统级别的，系统退出，守护线程才会终止，<strong>可在命令最后加&amp;</strong>，表示以守护进程方式运行，windows中可运行javaw来达到释放控制台的目的。java中守护线程是JVM级别的，当JVM中没有用户线程时，守护线程终止，jvm退出，程序终止.</p></blockquote><h1 id="3-守护线程"><a href="#3-守护线程" class="headerlink" title="3. 守护线程"></a>3. 守护线程</h1><h2 id="3-1-守护线程的特点"><a href="#3-1-守护线程的特点" class="headerlink" title="3.1 守护线程的特点"></a>3.1 守护线程的特点</h2><ol><li>守护线程是运行程序后台的线程；</li><li>守护线程创建的线程，依然是守护线程。</li><li>守护线程不会影响JVM的退出，当JVM只剩下守护线程时，JVM进行退出。</li><li>守护线程在JVM退出时，自动销毁。</li></ol><h2 id="3-2-要注意⚠️"><a href="#3-2-要注意⚠️" class="headerlink" title="3.2 要注意⚠️"></a>3.2 要注意⚠️</h2><ul><li><p><strong>thread.setDaemon(true)需要在执行thread.start()方法之前设置</strong>，否则会抛出IllegalThreadStateException异常。不可以把正在运行的常规线程设置为守护线程。</p></li><li><p>守护线程应该永远不去访问固有资源，如文件、数据库，因为它会在任何时候甚至在一个操作的中间发生中断。</p><h2 id="3-3-守护线程适用场景"><a href="#3-3-守护线程适用场景" class="headerlink" title="3.3 守护线程适用场景"></a>3.3 守护线程适用场景</h2><p>通常可用于开发一些为其它用户线程服务的功能Thread Dump打印出来的线程信息，含有daemon，比如：心跳检测，windows下的监听Ctrl+break的守护进程，GC（垃圾回收），Finalizer守护进程、编译守护进程、服务守护进程、引用处理守护进程。</p></li></ul><p>一个守护线程的小例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"this is a example of daemonThread."</span>);</span><br><span class="line"><span class="comment">//创建一个守护线程及写好其业务逻辑</span></span><br><span class="line">Thread daemonThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">" starting."</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">" finally."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//创建一个子线程</span></span><br><span class="line">Thread subThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">daemonThread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">daemonThread.start();<span class="comment">//开始执行这个线程</span></span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">" is Running."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">subThread.start();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">2000</span>); <span class="comment">//主线程休息2s保证子线程能够执行它的业务逻辑</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">" is finished."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span> is a example of daemonThread.</span><br><span class="line">Thread-<span class="number">0</span> starting.</span><br><span class="line">Thread-<span class="number">1</span> is start.</span><br><span class="line">Thread-<span class="number">0</span> <span class="keyword">finally</span>.</span><br><span class="line">Thread-<span class="number">0</span> starting.</span><br><span class="line">main is finished.</span><br></pre></td></tr></table></figure><blockquote><p>分析：main方法是我们的主线程，首先让它sleep 2s,保证子线程能够完整执行。子线程开始执行，守护线程也开始执行<code>Thread-0 starting.</code>,然后守护线程休眠了，子线程打印<code>Thread-1 is start.</code>后退出，这时候守护线程也要退出，但是由于守护线程在退出时不会执行finally中的代码，所以只打印了<code>Thread-0 finally.\n Thread-0 starting.</code>之后就退出了，所以守护线程不能依靠finally块的内容来确保执行关闭或者清理资源。（守护线程在JVM退出时，自动销毁。）</p></blockquote><p>执行结果二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span> is a example of daemonThread.</span><br><span class="line">Thread-<span class="number">0</span> starting.</span><br><span class="line">Thread-<span class="number">1</span> is start.</span><br><span class="line">Thread-<span class="number">0</span> <span class="keyword">finally</span>.</span><br><span class="line">Thread-<span class="number">0</span> starting.</span><br><span class="line">main is finished.</span><br><span class="line">Thread-<span class="number">0</span> <span class="keyword">finally</span>.</span><br><span class="line">Thread-<span class="number">0</span> starting.</span><br></pre></td></tr></table></figure><blockquote><p>分析：这次守护线程是在main()结束后才退出，与上面的结果不一样。这和守护线程休眠获得的时间片有关。理论来说，这种打印结果比较符合我们的分析判断。守护线程应该是在所有用户线程（main,subThread）都结束后再终结自己。</p></blockquote><p><code>（ps：目前执行结果只出现上面这两种情况，也不知道我分析的对不对，如果有错误，希望指正）</code></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java实现一个简单的造成死锁的代码</title>
      <link href="/2020/06/01/java%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E9%80%A0%E6%88%90%E6%AD%BB%E9%94%81%E7%9A%84%E4%BB%A3%E7%A0%81/"/>
      <url>/2020/06/01/java%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E9%80%A0%E6%88%90%E6%AD%BB%E9%94%81%E7%9A%84%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p><strong>死锁定义：</strong>    死锁是指两个或两个以上的进程在执行过程中,因争夺资源而造成的一种互相等待的现象。<br>当线程进入对象的synchronized代码块时，就占用此资源，直到它退出该代码块或者调用wait方法，才释放资源，在此期间，其他线程将不能进入该代码块。当线程互相持有对方所需要的资源时，会互相等待对方释放资源，如果线程都不主动释放所占有的资源，将产生死锁。</p><p>下面是两个线程造成死锁的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> Object object1 = <span class="keyword">new</span> Object(); <span class="comment">//创建静态对象object1</span></span><br><span class="line"><span class="keyword">static</span> Object object2 = <span class="keyword">new</span> Object(); <span class="comment">//创建静态对象object2</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Thread thread1 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (object1) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"上锁了object1"</span>);</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">synchronized</span> (object2) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"上锁了object2"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">Thread thread2 = <span class="keyword">new</span> Thread(()-&gt; &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (object2) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"锁住了object2"</span>);</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">synchronized</span> (object1) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"锁住了object1"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">thread1.start();</span><br><span class="line">thread2.start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：【程序运行未结束】</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Thread-0上锁了object1</span><br><span class="line">Thread-1锁住了object2</span><br></pre></td></tr></table></figure><blockquote><p><strong>分析：thread1拿到了object1的锁，然后休眠了1000s，这时候thread2拿到了object2的锁，然后thread1醒了想要拿object2的锁，结果发现在thread2的手上，thread2想要拿object1的锁，结果发现在thread1的手上。两人没有达成协议所以僵持不下。【ps：由于子线程运行时顺序的不确定性，可能thread1先执行，可能thread2先执行，所以thread2中也加了sleep(1000);</strong>】</p></blockquote><p>修改1：把object1、object2改成字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> String object1= <span class="string">"abc"</span>; <span class="comment">//把对象object1修改成字符串“abc”</span></span><br><span class="line"><span class="keyword">static</span> String object2=<span class="string">"abc"</span>;  <span class="comment">//把对象object2修改成字符串“abc”</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Thread thread1 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">2</span>) &#123; <span class="comment">//未避免执行陷入死循环，这里设置了最多循环2次</span></span><br><span class="line"><span class="keyword">synchronized</span> (object1) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"上锁了object1"</span>);</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">synchronized</span> (object2) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"上锁了object2"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">Thread thread2 = <span class="keyword">new</span> Thread(()-&gt; &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123; <span class="comment">//这里就不改了，正好和上面做个对比</span></span><br><span class="line"><span class="keyword">synchronized</span> (object2) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"锁住了object2"</span>);</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">synchronized</span> (object1) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"锁住了object1"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">thread1.start();</span><br><span class="line">thread2.start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Thread-0上锁了object1</span><br><span class="line">Thread-0上锁了object2</span><br><span class="line">Thread-0上锁了object1</span><br><span class="line">Thread-0上锁了object2</span><br><span class="line">Thread-1锁住了object2</span><br><span class="line">Thread-1锁住了object1</span><br><span class="line">Thread-1锁住了object2</span><br><span class="line">Thread-1锁住了object1</span><br><span class="line">Thread-1锁住了object2</span><br><span class="line">。。。。。</span><br></pre></td></tr></table></figure><blockquote><p>分析：由于object1和object2指向的是同一个对象常量，object1和object2在内存中指向同一个地方，所以程序认为两把锁就是同一把锁。当thread1锁住了object1后，想要拿object2，这时发现，object1就是object2，已经拿到手了。所以就不存在死锁问题了。</p></blockquote><p>修改2:把静态变量改成如下值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">static String object1 = new String(<span class="string">"abc"</span>);</span><br><span class="line">static String object2 = new String(<span class="string">"abc"</span>);</span><br></pre></td></tr></table></figure><p>这时我们发现，又发生死锁了，和刚开始的程序结果一样。</p><blockquote><p>分析一下：程序把内存中指向同一地址的地方当成是一个东西。当内存不指向同一个地方，我们认为是两个变量，只是可能名字一样，但实际上是两个东西。所以线程执行时给东西1上锁了，发现东西2在另一个线程手上，所以同样发生死锁。</p></blockquote><p><strong>产生死锁的必要条件：</strong></p><ol><li><strong>互斥条件</strong>：指进程对所分配到的资源进行排它性使用，即在一段时间内某资源只由一个进程占用。如果此时还有其它进程请求资源，则请求者只能等待，直至占有资源的进程用毕释放。</li><li><strong>请求和保持条件</strong>：指进程已经保持至少一个资源，但又提出了新的资源请求，而该资源已被其它进程占有，此时请求进程阻塞，但又对自己已获得的其它资源保持不放。</li><li><strong>不剥夺条件</strong>：指进程已获得的资源，在未使用完之前，不能被剥夺，只能在使用完时由自己释放。</li><li><strong>循环等待条件</strong>：若干资源形成一种头尾相接的循环等待资源的关系。</li></ol><p><strong>避免死锁方法：</strong><br>1.避免一个线程同时获取多个锁。<br>2.避免一个线程在锁内同时占用多个资源，尽量保证每个锁只占用一个资源。<br>3.尝试使用定时锁，使用locak.tryLock(timeout)来代替使用内部锁机制<br>4.对于数据库锁，加锁和解锁必须在一个数据库连接里，否则会出现解锁失败的情况。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构系列--B树、B+树、B*树</title>
      <link href="/2020/06/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97-B%E6%A0%91%E3%80%81B-%E6%A0%91%E3%80%81B-%E6%A0%91/"/>
      <url>/2020/06/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B3%BB%E5%88%97-B%E6%A0%91%E3%80%81B-%E6%A0%91%E3%80%81B-%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="一、B树"><a href="#一、B树" class="headerlink" title="一、B树"></a>一、B树</h1><p><strong>B树，也叫B-树，它是一棵多路平衡搜索树。</strong><br><strong>*一个m阶的B树满足以下条件</strong>：*<br>    1. 每个节点最多有m个子节点。（m&gt;=2,m=2时是二叉搜索树）<br>    2. 根节点至少有2个子节点，至少1个关键字.(除了一棵树只有根节点外)<br>    3. 每个分支节点至少ceil(m/2)[取上限]个子节点（除根节点和叶子节点外）<br>    4. 所有叶子节点在同一层。（叶子节点不包含任何信息，可看成额外的节点）<br>    5. 有k个子节点的分支节点有k-1的关键字，按递增顺序排列。<br>    6. 每个分支结点关键字数量要满足ceil（m/2）-1&lt;=n&lt;=m-1.<br>    7.  分支节点包含n个关键字:（n，P<del>0</del>，K<del>1</del>，P<del>1</del>，K<del>2</del>，…,K<del>n</del>,P<del>n</del>）,满足K<del>i</del>&lt;P<del>i</del>&lt;K<del>i</del>+1(相当于：左孩子&lt;父节点&lt;右孩子)</p><blockquote><p>这个网站不错： <a href="https://www.cs.usfca.edu/~galles/visualization/BTree.html" target="_blank" rel="noopener">一个可视化B树的网站</a></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200301232650448.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>   <strong>优点</strong>：利用平衡树的优势，保证了查询稳定性、加快了查询速度。</p><p>关于B树的插入和删除操作原则要记住：<strong>在进行插入或删除操作后，一定要查看树是否满足约束条件，若不满足，则进行调整。</strong></p><p><strong>B树应用场景</strong>:B树可以优化，提高磁盘读取时定位的效率。由于一棵树中任意检查一个节点需要一次磁盘的访问，所以B树避免了大量的磁盘访问；而且B树是平衡树，每个节点到叶子节点的高度都相同，保证了查询的稳定性，查询时间复杂度为O（logN）（严格意义上写为log<del>m</del>N，m为度数，N为节点数）。</p><p><strong><em>B树的高度</em></strong>:T为度数（节点包含的最少子节点个数，T&gt;=2）,也叫阶数，N为总元素个数或总关键字数。<br><img src="https://img-blog.csdnimg.cn/20200301231828465.png" alt="在这里插入图片描述" loading="lazy"></p><h1 id="二、B-树"><a href="#二、B-树" class="headerlink" title="二、B+树"></a>二、B+树</h1><p>B+树是B树的变体，为了适应文件系统所需而产生的。<br><img src="https://img-blog.csdnimg.cn/20200301232705690.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br><strong>B和B+树的区别：</strong><br>    1. <strong>关键字数量不同</strong>。B树有m个节点，m-1个关键字；B+树有m个关键字，有m个叶子节点，关键字只是起到索引的作用。<br>    2. <strong>存储位置不同</strong>。B树的数据存储在每个节点上，并不仅仅存储在叶子节点上；B+树中的数据都存储在叶子节点上。<br>    3. <strong>分支节点构造不同</strong>。B+树的分支节点存储关键字信息和孩子指针，也就是说内部节点仅仅包含索引信息<br>    4. <strong>查询不同</strong>。B树在找到具体数值以后就结束，而B+树则需要通过索引找到叶子节点中的数据才结束，也就是说B+树的搜索过程中走了一条从根节点到叶子节点的路径，高度相同，相对来说更稳定。<br>    5. <strong>区间访问不同</strong>。B+树的叶子节点按顺序建立起链状指针，可进行区间访问。<br>    6. <strong>B+树比B树更适合实际应用中操作系统文件索引和数据库索引</strong>。（1）B+树的磁盘读写代价更低；（2）B+树的查询更稳定</p><h1 id="三、B-树"><a href="#三、B-树" class="headerlink" title="三、B*树"></a>三、B*树</h1><p>B<em>树是B+树的变体，B</em>树在分支节点中增加了指向兄弟节点的指针。B<em>树定义了非叶子节点关键字个数至少要(2/3)</em>m个，即最低使用率2/3.<br><img src="https://img-blog.csdnimg.cn/20200301232141117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>==B * 和B+的区别== :</p><ol><li><p>B*树分配新结点的概率比B+树要低，空间使用率要高。</p></li><li><p>B*树的分裂影响兄弟节点，B+树的分裂只影响原节点和父节点，不会影响兄弟节点，所以不用指向兄弟指针。</p><p>总结：</p></li></ol><table><thead><tr><th>B树</th><th>B+树</th><th>B*树</th></tr></thead><tbody><tr><td>有序数组+平衡多叉树</td><td>有序数组链表+平衡多叉树【至少1/2利用率】</td><td>比B+树多子多孙【至少2/3利用率 】</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据基准测试平台BigDataBench5.0安装配置及使用</title>
      <link href="/2020/06/01/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0BigDataBench5-0%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/06/01/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0BigDataBench5-0%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>bigDataBench5.0（2019.6月发布）<br><strong>前提：安装hadoop、jdk、g++、gcc、gsl</strong></p><h2 id="1-首先就是下载BigDataBench安装包"><a href="#1-首先就是下载BigDataBench安装包" class="headerlink" title="1. 首先就是下载BigDataBench安装包"></a>1. 首先就是下载BigDataBench安装包</h2><p><a href="http://125.39.136.212:8090/BigDataBench/BigDataBench_V5.0_BigData_MicroBenchmark" target="_blank" rel="noopener">http://125.39.136.212:8090/BigDataBench/BigDataBench_V5.0_BigData_MicroBenchmark</a><br><a href="http://125.39.136.212:8090/BigDataBench/BigDataBench_V5.0_BigData_ComponentBenchmark" target="_blank" rel="noopener">http://125.39.136.212:8090/BigDataBench/BigDataBench_V5.0_BigData_ComponentBenchmark</a><br>（需要有GitLab账户才可以下载）<br>如果不想注册，可以从这<a href="https://pan.baidu.com/s/1CW8T_bArnbmRzv7J09pu5Q" target="_blank" rel="noopener">下载</a>（提取码：jusb ）。根据自己的系统环境和需要选择合适的安装包（我是ubuntu18.04，所以下载的是tar.gz的包）<br><img src="https://img-blog.csdnimg.cn/20191110194903181.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h2 id="2-解压安装包"><a href="#2-解压安装包" class="headerlink" title="2. 解压安装包"></a>2. 解压安装包</h2><p>我解压到了/opt/module下</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> tar <span class="literal">-zxvf</span> BigDataBench_V5.<span class="number">0</span>_BigData_MicroBenchmark.tar.gz <span class="literal">-C</span> /opt/module/</span><br><span class="line"><span class="variable">$</span> tar <span class="literal">-zxvf</span> BigDataBench_V5.<span class="number">0</span>_BigData_ComponentBenchmark.tar.gz <span class="literal">-C</span> /opt/module/</span><br></pre></td></tr></table></figure><p>重命名BigDataBench_V5.0_BigData_MicroBenchmark， BigDataBench_V5.0_BigData_ComponentBenchmark（太长了这名字）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv BigDataBench_V5.<span class="number">0</span>_BigData_MicroBenchmark BigDataBench5.<span class="number">0</span>_MicroBenchmark</span><br><span class="line">mv BigDataBench_V5.<span class="number">0</span>_BigData_ComponentBenchmark BigDataBench5.<span class="number">0</span>_ComponentBenchmark</span><br></pre></td></tr></table></figure><p>解压之后，查看BigDataBench目录结构<br><img src="https://img-blog.csdnimg.cn/20191110195154969.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20191110195209885.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><blockquote><p>提示：最好不要直接运行./prepare.sh,会出现编译失败的错误（小伙伴可以尝试一下，没有出错就不用看下面的步骤啦）<br>    原因：它里面的很多文件都太旧了，所以需要手动更新，重新进行make</p></blockquote><h2 id="3-进入安装目录，进行数据生成器Text-data-generate-的编译"><a href="#3-进入安装目录，进行数据生成器Text-data-generate-的编译" class="headerlink" title="3. 进入安装目录，进行数据生成器Text data generate 的编译"></a>3. 进入安装目录，进行数据生成器Text data generate 的编译</h2><p>Ubuntu下载GSL库并安装(GSL是一个开源的科学计算库,C语言的版本)<br>安装教程参考：<a href="https://blog.csdn.net/weixin_34566605/article/details/103001334" target="_blank" rel="noopener">https://blog.csdn.net/weixin_34566605/article/details/103001334</a></p><blockquote><p><del>进入BigDataGenratorSuite/Text_datagen里,会看到一个压缩文件gsl-1.15.tar.gz(就是这里面的文件有些旧了，需要重新编译)</del><br><del>cd ./BigDataGeneratorSuite/Text_datagen     解压gsl-1.15.tar.gz     tar -xf<br>gsl-1.15.tar.gz      cd gsl-1.15/<br>    nano@nano1:/opt/module/BigDataBench5.0/BigDataGeneratorSuite/Text_datagen/gsl-1.15$./autogen.sh（生成最新的cofig.guess,config.sub等文件,自带的是2009年的，已经过时了）<br>    nano@nano1:/opt/module/BigDataBench5.0/BigDataGeneratorSuite/Text_datagen/gsl-1.15$./configure<br>    nano@nano1:/opt/module/BigDataBench5.0/BigDataGeneratorSuite/Text_datagen/gsl-1.15$make<br>    nano@nano1:/opt/module/BigDataBench5.0/BigDataGeneratorSuite/Text_datagen/gsl-1.15$sudo<br>make install（必须要有root权限）</del></p></blockquote><p>编译：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano@nano10:/opt/module/BigDataBench5.<span class="number">0</span>_MicroBenchmark/BigDataGeneratorSuite/Text_datagen<span class="variable">$</span> make</span><br></pre></td></tr></table></figure><blockquote><p>出错啦：<br>gen_random_text.cpp:43:23: warning: ISO C++ forbids converting a string constant to ‘char<em>’ [-Wwrite-strings]<br>     char</em> alpha_temp2=”/final.other”;<br>                       ^<del>~</del><br>gen_random_text.cpp:44:32: error: ‘strlen’ was not declared in this scope<br>     char* alphafile = new char[strlen(alpha_temp1)+strlen(modeldirname)+strlen(alpha_temp2)+1];     <img src="https://img-blog.csdnimg.cn/20191111175707847.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">                     出错原因：<br>     1. warning: ISO C++ forbids converting a string constant to ‘char<em>’ [-Wwrite-strings]<br>    *</em>出现这样的警告是因为在c和c++中，赋值操作的时候，等号两边的变量类型不一样，那么编译器会进行一种叫做 implicit conversion的操作来使得变量可以被赋值。将右边的常量强制类型转换成一个指针，也就是在修改一个const常量。编译运行的结果会因编译器和操作系统共同决定，有的编译器会通过，有的会抛异常，就算过了也可能因为操作系统的敏感性而被杀掉。像这种直接将string literal赋值给指针的操作被开发者们认为是deprecated，只不过由于以前很多代码都有这种习惯，为了兼容，就保留下来了。所以，为了消除警告，可以在程序前添加#pragma GCC diagnostic ignored “-Wwrite-strings”。**<br>    2.  error: ‘strlen’ was not declared in this scope<br>        <strong>编译器默认没有包含cstring，所以需要添加cstring头文件，在程序开始前添加头文件#include<cstring></strong><br>解决方案：<br>先make clean一下<img src="https://img-blog.csdnimg.cn/20191111180002689.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_10,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">在gen_random_text.cpp和pgen_random_text.cpp中添加<br>    <strong>#include<cstring><br>    #pragma GCC diagnostic ignored “-Wwrite-strings”</strong><br><img src="https://img-blog.csdnimg.cn/20191111180053328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_8,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>    再重新make编译<br>参考资料：<br><a href="https://www.youtube.com/watch?v=PZQaN9wTIsQ" target="_blank" rel="noopener">https://www.youtube.com/watch?v=PZQaN9wTIsQ</a><br><a href="https://blog.csdn.net/VVVLeHr/article/details/86697346" target="_blank" rel="noopener">https://blog.csdn.net/VVVLeHr/article/details/86697346</a></p></blockquote><p>Ok,如果没有出问题的话，会出现如下图所示<br><img src="https://img-blog.csdnimg.cn/20191111180634265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">Compile Text data generate 完成。</p><h2 id="4-进行数据生成器-Graph-data-generate的编译"><a href="#4-进行数据生成器-Graph-data-generate的编译" class="headerlink" title="4    进行数据生成器 Graph data generate的编译"></a>4    进行数据生成器 Graph data generate的编译</h2><p>nano@nano10:/opt/module/BigDataBench5.0_MicroBenchmark/BigDataGeneratorSuite/Graph_datagen$ make</p><blockquote><p>出错啦</p><ol><li>错误1<br><img src="https://img-blog.csdnimg.cn/20191111180823706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_10,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>出错原因：snap.o需要重新编译，进入Snap-core目录下，重新make一下，生成新的Snap.o目标文件，然后移到父目录同级下。<br>If there are some error about the incompatible of Snap when executes make command, users need to recompile the snap-core and update the Snap.O:<br>$ cd snap-core $ make $ mv Snap.o ../     And the execute the make command under directory of BigDataGeneratorSuite/Graph_datagen again: $ cd ../  $ make<br>解决方案：进入snap-core目录下，重新make编译该目录下的文件。<br>参考资料：<a href="http://www.benchcouncil.org/BigDataBench/files/BigDataBench5.0-User-Manual.pdf" target="_blank" rel="noopener">http://www.benchcouncil.org/BigDataBench/files/BigDataBench5.0-User-Manual.pdf</a></li><li>错误2<br><img src="https://img-blog.csdnimg.cn/20191111181609379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_8,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>出错原因：没有Makefile.config这个文件<br>解决方案：找一个或者自己写一个Makefile.config<br>下载地址：<a href="https://github.com/AthenaHe/BeanchMark/blob/master/Makefile.config" target="_blank" rel="noopener">https://github.com/AthenaHe/BeanchMark/blob/master/Makefile.config</a></li><li>错误3<br> <img src="https://img-blog.csdnimg.cn/20191111181744927.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_10,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>出错原因：<br>（1）../glib-core/ds.h:280:5: warning: this ‘for’ clause does not guard… [-Wmisleading-indentation]<br>  for (int i=0; i&lt;Len(); i++) if(ValV[i]!=Tup[i]){return false;} return true; }<br> ../glib-core/linalg.cpp:985:9: warning: this ‘else’ clause does not guard… [-Wmisleading-indentation]<br> 由于编译环境的不同，高版本的编译环境更加严格，for后面即使只有一条语句，也要加花括号。<br>解决方案：<br> 打开../glib-core/ds.h文件，找到第280行，for循环后面相应位置添加花括号{}；打开../glib-core/linalg.cpp文件，找到第985行。else后面相应位置添加花括号{}。<br><img src="https://img-blog.csdnimg.cn/2019111118184034.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_10,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">)<img src="https://img-blog.csdnimg.cn/20191111181850363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_10,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>（2）../glib-core/bd.cpp:13:21: note: forward declaration of ‘struct __exception’<br>int _matherr(struct __exception* e)<br>解决方案：<br>在bd.cpp中添加结构体：<br>struct __exception {<br> int    type;      /* Exception type <em>/<br> char</em>  name;      /* Name of function causing exception <em>/<br> double arg1;      /</em> 1st argument to function <em>/<br> double arg2;      /</em> 2nd argument to function <em>/<br> double retval;    /</em> Function return value */<br>};<br><img src="https://img-blog.csdnimg.cn/20191111181945752.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_10,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><ol start="5"><li>进行数据生成器Table data generate的编译<br>nano@nano1:/opt/module/BigDataBench5.0/BigDataGeneratorSuite$ cd Table_datagen/personal_generator/<br>nano@nano1:/opt/module/BigDataBench5.0/BigDataGeneratorSuite/Table_datagen/personal_generator$ make<br><img src="https://img-blog.csdnimg.cn/20191111182029487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_10,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li></ol></li></ol></blockquote><h2 id="6-数据生成及处理"><a href="#6-数据生成及处理" class="headerlink" title="6. 数据生成及处理"></a>6. 数据生成及处理</h2><p><strong>注意：有些脚本中没有加MAHOUT_HOME地址，执行会报错，自己在脚本中手动添加BigDatabench中自带的mahout地址，或者在环境变量中配置</strong></p><ul><li>terasort<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">生成<span class="number">1</span>G的数据</span><br><span class="line">nano@nano1:/opt/module/BigDataBench5.<span class="number">0</span>/Hadoop/Sort<span class="variable">$</span> ./genData<span class="literal">-sort</span>.sh <span class="number">1</span></span><br><span class="line"><span class="comment"># Generating command: ./genData-sort.sh &lt;size&gt;</span></span><br><span class="line"><span class="comment">#       size: the input data size, GB</span></span><br><span class="line">a=<span class="variable">$1</span></span><br><span class="line">let L=<span class="variable">$a</span>*<span class="number">10000000</span></span><br><span class="line"><span class="comment">#-----------------generating input data---------------</span></span><br><span class="line"><span class="variable">$HADOOP_HOME</span>/bin/hadoop dfs <span class="literal">-rmr</span> /hadoop/terasort/terasort-<span class="variable">$</span>&#123;a&#125;G</span><br><span class="line"><span class="variable">$HADOOP_HOME</span>/bin/hadoop jar <span class="variable">$</span>&#123;HADOOP_HOME&#125;/share/hadoop/mapreduce/hadoop<span class="literal">-mapreduce</span><span class="literal">-examples</span>-*.jar teragen <span class="variable">$L</span> /hadoop/terasort/terasort-<span class="variable">$</span>&#123;a&#125;G</span><br><span class="line"><span class="variable">$HADOOP_HOME</span>/bin/hadoop dfs <span class="literal">-rmr</span> /hadoop/terasort/tera<span class="built_in">sort-out</span></span><br><span class="line">运行工作负载</span><br><span class="line">nano@nano1:/opt/module/BigDataBench5.<span class="number">0</span>/Hadoop/Sort<span class="variable">$</span> ./run<span class="literal">-terasort</span>.sh <span class="number">1</span></span><br><span class="line"><span class="comment"># Running command: ./run-terasort.sh &lt;size&gt;</span></span><br><span class="line"><span class="comment">#       size: the input data size, GB</span></span><br><span class="line">a=<span class="variable">$1</span></span><br><span class="line"><span class="comment">#-----------------running hadoop terasort-------------</span></span><br><span class="line"><span class="variable">$HADOOP_HOME</span>/bin/hadoop jar <span class="variable">$</span>&#123;HADOOP_HOME&#125;/share/hadoop/mapreduce/hadoop<span class="literal">-mapreduce</span><span class="literal">-examples</span>-*.jar terasort /hadoop/terasort/terasort-<span class="variable">$</span>&#123;a&#125;G /hadoop/terasort/tera<span class="built_in">sort-out</span></span><br></pre></td></tr></table></figure></li><li>Wordcount</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">生成<span class="number">1</span>G的数据</span><br><span class="line">nano@nano1:/opt/module/BigDataBench5.<span class="number">0</span>/Hadoop/wordcount<span class="variable">$</span>./genData<span class="literal">-wc</span>.sh <span class="number">1</span></span><br><span class="line"><span class="comment"># Generating command: ./genData-wc.sh &lt;size&gt;</span></span><br><span class="line"><span class="comment">#       size: the input data size, GB</span></span><br><span class="line"><span class="comment">#----------------------------genenrate-data----------------------------#</span></span><br><span class="line">curdir=`pwd`</span><br><span class="line">a=<span class="variable">$1</span></span><br><span class="line">    let L=a*<span class="number">2</span></span><br><span class="line">    cd ../../BigDataGeneratorSuite/Text_datagen/</span><br><span class="line">    rm <span class="literal">-fr</span> ./gen_data/<span class="variable">$a</span><span class="string">"GB"</span><span class="literal">-wordcountHP</span></span><br><span class="line">    ./gen_text_data.sh lda_wiki1w <span class="variable">$L</span> <span class="number">8000</span> <span class="number">10000</span> ./gen_data/<span class="variable">$a</span><span class="string">"GB"</span><span class="literal">-wordcountHP</span></span><br><span class="line">    <span class="variable">$</span>&#123;HADOOP_HOME&#125;/bin/hadoop fs <span class="literal">-rmr</span> /hadoop/wd/<span class="variable">$a</span><span class="string">"GB"</span><span class="literal">-wordcountHP</span></span><br><span class="line">    <span class="variable">$</span>&#123;HADOOP_HOME&#125;/bin/hadoop fs <span class="literal">-mkdir</span> <span class="literal">-p</span> /hadoop/wd</span><br><span class="line">    <span class="variable">$</span>&#123;HADOOP_HOME&#125;/bin/hadoop fs <span class="literal">-put</span> ./gen_data/<span class="variable">$a</span><span class="string">"GB"</span><span class="literal">-wordcountHP</span> /hadoop/wd</span><br><span class="line">运行工作负载</span><br><span class="line">nano@nano1:/opt/module/BigDataBench5.<span class="number">0</span>/Hadoop/wordcount<span class="variable">$</span>./run<span class="literal">-wordcount</span>.sh <span class="number">1</span></span><br><span class="line"><span class="comment"># Running command: ./run-wordcount.sh &lt;size&gt;</span></span><br><span class="line"><span class="comment">#       size: the input data size, GB</span></span><br><span class="line">a=<span class="variable">$1</span></span><br><span class="line"><span class="comment">#-----------------------------run-workload-----------------------------#</span></span><br><span class="line">echo <span class="string">"running wordcount"</span></span><br><span class="line">cd <span class="variable">$curdir</span></span><br><span class="line">cd ./externals/shell/industryPack/hadoop/workloads/wordcount</span><br><span class="line"><span class="variable">$</span>&#123;HADOOP_HOME&#125;/bin/hadoop fs <span class="literal">-rmr</span> /hadoop/wd/wordcountHP<span class="literal">-result</span></span><br><span class="line"><span class="variable">$</span>&#123;HADOOP_HOME&#125;/bin/hadoop jar <span class="variable">$</span>&#123;HADOOP_HOME&#125;/share/hadoop/mapreduce/hadoop<span class="literal">-mapreduce</span><span class="literal">-examples</span>-*.jar  wordcount  /hadoop/wd/<span class="variable">$a</span><span class="string">"GB"</span><span class="literal">-wordcountHP</span>  /hadoop/wd/wordcountHP<span class="literal">-result</span></span><br></pre></td></tr></table></figure><ul><li>Grep<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">生成<span class="number">1</span>G的数据</span><br><span class="line">nano@nano1:/opt/module/BigDataBench5.<span class="number">0</span>/Hadoop/Grep<span class="variable">$</span>./genData<span class="literal">-grep</span>.sh <span class="number">1</span></span><br><span class="line"><span class="comment"># Generating command: ./genData-grep.sh &lt;size&gt;</span></span><br><span class="line"><span class="comment">#       size: the input data size, GB</span></span><br><span class="line"><span class="comment">#----------------------------genenrate-data----------------------------#</span></span><br><span class="line">curdir=`pwd`</span><br><span class="line">a=<span class="variable">$1</span></span><br><span class="line">    let L=a*<span class="number">2</span></span><br><span class="line">    cd ../../BigDataGeneratorSuite/Text_datagen/</span><br><span class="line">    rm <span class="literal">-fr</span> ./gen_data/<span class="variable">$a</span><span class="string">"GB"</span><span class="literal">-grepHP</span></span><br><span class="line">    ./gen_text_data.sh lda_wiki1w <span class="variable">$L</span> <span class="number">8000</span> <span class="number">10000</span> ./gen_data/<span class="variable">$a</span><span class="string">"GB"</span><span class="literal">-grepHP</span></span><br><span class="line">    <span class="variable">$</span>&#123;HADOOP_HOME&#125;/bin/hadoop fs <span class="literal">-rmr</span> /hadoop/grep/<span class="variable">$a</span><span class="string">"GB"</span><span class="literal">-grepHP</span></span><br><span class="line">    <span class="variable">$</span>&#123;HADOOP_HOME&#125;/bin/hadoop fs <span class="literal">-mkdir</span> <span class="literal">-p</span> /hadoop/grep/</span><br><span class="line">    <span class="variable">$</span>&#123;HADOOP_HOME&#125;/bin/hadoop fs <span class="literal">-put</span> ./gen_data/<span class="variable">$a</span><span class="string">"GB"</span><span class="literal">-grepHP</span> /hadoop/grep/</span><br><span class="line">运行工作负载</span><br><span class="line">nano@nano1:/opt/module/BigDataBench5.<span class="number">0</span>/Hadoop/Grep<span class="variable">$</span>./run<span class="literal">-grep</span>.sh <span class="number">1</span></span><br><span class="line"><span class="comment"># Running command: ./run-wordcount.sh &lt;size&gt;</span></span><br><span class="line"><span class="comment">#       size: the input data size, GB</span></span><br><span class="line">a=<span class="variable">$1</span></span><br><span class="line"><span class="comment">#-----------------------------run-workload-----------------------------#</span></span><br><span class="line">echo <span class="string">"running wordcount"</span></span><br><span class="line">cd <span class="variable">$curdir</span></span><br><span class="line">cd ./externals/shell/industryPack/hadoop/workloads/wordcount</span><br><span class="line"><span class="variable">$</span>&#123;HADOOP_HOME&#125;/bin/hadoop fs <span class="literal">-rmr</span> /hadoop/wd/wordcountHP<span class="literal">-result</span></span><br><span class="line"><span class="variable">$</span>&#123;HADOOP_HOME&#125;/bin/hadoop jar <span class="variable">$</span>&#123;HADOOP_HOME&#125;/share/hadoop/mapreduce/hadoop<span class="literal">-mapreduce</span><span class="literal">-examples</span>-*.jar  wordcount  /hadoop/wd/<span class="variable">$a</span><span class="string">"GB"</span><span class="literal">-wordcountHP</span>  /hadoop/wd/wordcountHP<span class="literal">-result</span></span><br></pre></td></tr></table></figure></li><li>MD5<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> 生成<span class="number">1</span>G的数据</span><br><span class="line">nano@nano1:/opt/module/BigDataBench5.<span class="number">0</span>_MicroBenchmark/Hadoop/MD5<span class="variable">$</span> ./genData<span class="literal">-md5</span>.sh <span class="number">1</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment"># Generating command: ./genData-md5.sh &lt;size&gt;</span></span><br><span class="line"><span class="comment">#       size: the input data size, GB</span></span><br><span class="line"><span class="comment">#----------------------------genenrate-data----------------------------#</span></span><br><span class="line">a=<span class="variable">$1</span></span><br><span class="line">    let L=a*<span class="number">2</span></span><br><span class="line">    cd ../../BigDataGeneratorSuite/Text_datagen/</span><br><span class="line">    rm <span class="literal">-fr</span> ./gen_data/<span class="variable">$a</span><span class="string">"GB"</span><span class="literal">-md5HP</span></span><br><span class="line">    ./gen_text_data.sh lda_wiki1w <span class="variable">$L</span> <span class="number">8000</span> <span class="number">10000</span> ./gen_data/<span class="variable">$a</span><span class="string">"GB"</span><span class="literal">-md5HP</span></span><br><span class="line">    <span class="variable">$</span>&#123;HADOOP_HOME&#125;/bin/hadoop fs <span class="literal">-rmr</span> /hadoop/md5/<span class="variable">$a</span><span class="string">"GB"</span><span class="literal">-md5HP</span></span><br><span class="line">    <span class="variable">$</span>&#123;HADOOP_HOME&#125;/bin/hadoop fs <span class="literal">-mkdir</span> <span class="literal">-p</span> /hadoop/md5/</span><br><span class="line">    <span class="variable">$</span>&#123;HADOOP_HOME&#125;/bin/hadoop fs <span class="literal">-put</span> ./gen_data/<span class="variable">$a</span><span class="string">"GB"</span><span class="literal">-md5HP</span> /hadoop/md5/</span><br><span class="line">运行工作负载</span><br><span class="line">nano@nano1:/opt/module/BigDataBench5.<span class="number">0</span>_MicroBenchmark/Hadoop/MD5<span class="variable">$</span>./run<span class="literal">-md5</span>.sh <span class="number">1</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Running command: ./run-md5.sh &lt;size&gt;</span></span><br><span class="line"><span class="comment">#       size: the input data size, GB</span></span><br><span class="line">a=<span class="variable">$1</span></span><br><span class="line"><span class="comment">#-----------------------------run-workload-----------------------------#</span></span><br><span class="line">echo <span class="string">"running wordcount"</span></span><br><span class="line"><span class="variable">$</span>&#123;HADOOP_HOME&#125;/bin/hadoop fs <span class="literal">-rmr</span> /hadoop/md5/md5HP<span class="literal">-result</span></span><br><span class="line"><span class="variable">$HADOOP_HOME</span>/bin/hadoop jar md5/DwarfMD5.jar DwarfMD5 /hadoop/md5/<span class="variable">$a</span><span class="string">"GB"</span><span class="literal">-md5HP</span> /hadoop/md5/md5HP<span class="literal">-result</span></span><br></pre></td></tr></table></figure></li><li>MatrixMult（矩阵相乘）<br>这里少了mahout的路径，要加上。MAHOUT_HOME=../apache-mahout-0.10.2-compile<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">nano@nano1:/opt/module/BigDataBench5.<span class="number">0</span>_MicroBenchmark/Hadoop/MatrixMult<span class="variable">$</span> ./genData<span class="literal">-matMult</span>.sh <span class="number">0.2</span> <span class="number">10</span> <span class="number">10</span> <span class="number">10</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment"># Generating command: ./genData-matMult.sh &lt;sparsity&gt; &lt;row_i&gt; &lt;col_i&gt; &lt;col_j&gt; </span></span><br><span class="line"><span class="comment">#       sparsity: the percentage of zero elements, ranges from 0 to 1.</span></span><br><span class="line"><span class="comment">#       row_i: the row number of matrix A</span></span><br><span class="line"><span class="comment">#       col_i: the column number of matrix A</span></span><br><span class="line"><span class="comment">#       col_j: the column number of matrix B</span></span><br><span class="line"><span class="comment">#----------------------------genenrate-data----------------------------#</span></span><br><span class="line">sparsity=<span class="variable">$1</span></span><br><span class="line">row_i=<span class="variable">$2</span></span><br><span class="line">col_i=<span class="variable">$3</span></span><br><span class="line">col_j=<span class="variable">$4</span></span><br><span class="line">cd genData<span class="literal">-Matrix</span></span><br><span class="line">rm <span class="operator">-f</span> <span class="keyword">data</span><span class="literal">-kmeans</span></span><br><span class="line">make</span><br><span class="line">sh generate<span class="literal">-matrix</span>.sh int <span class="variable">$row_i</span> <span class="variable">$col_i</span> <span class="variable">$sparsity</span></span><br><span class="line">mv <span class="keyword">data</span><span class="literal">-kmeans</span> mat1</span><br><span class="line">sh generate<span class="literal">-matrix</span>.sh int <span class="variable">$col_i</span> <span class="variable">$col_j</span> <span class="variable">$sparsity</span></span><br><span class="line">mv <span class="keyword">data</span><span class="literal">-kmeans</span> mat2</span><br><span class="line"><span class="variable">$HADOOP_HOME</span>/bin/hadoop fs <span class="literal">-rmr</span> /hadoop/matMult/</span><br><span class="line"><span class="variable">$HADOOP_HOME</span>/bin/hadoop fs <span class="literal">-mkdir</span> <span class="literal">-p</span> /hadoop/matMult/</span><br><span class="line"><span class="variable">$HADOOP_HOME</span>/bin/hadoop fs <span class="literal">-put</span> mat* /hadoop/matMult/</span><br><span class="line">运行工作负载</span><br><span class="line">nano@nano1:/opt/module/BigDataBench5.<span class="number">0</span>_MicroBenchmark/Hadoop/MatrixMult<span class="variable">$</span> ./run<span class="literal">-matMult</span>.sh <span class="number">0.2</span> <span class="number">10</span> <span class="number">10</span> <span class="number">10</span></span><br><span class="line"><span class="comment">#!/bin/bash  </span></span><br><span class="line"><span class="comment"># Running command: ./run-matMult.sh &lt;sparsity&gt; &lt;row_i&gt; &lt;col_i&gt; &lt;col_j&gt; </span></span><br><span class="line"><span class="comment">#       sparsity: the percentage of zero elements, ranges from 0 to 1.</span></span><br><span class="line"><span class="comment">#       row_i: the row number of matrix A</span></span><br><span class="line"><span class="comment">#       col_i: the column number of matrix A</span></span><br><span class="line"><span class="comment">#       col_j: the column number of matrix B</span></span><br><span class="line">sparsity=<span class="variable">$1</span></span><br><span class="line">row_i=<span class="variable">$2</span></span><br><span class="line">col_i=<span class="variable">$3</span></span><br><span class="line">col_j=<span class="variable">$4</span></span><br><span class="line">MAHOUT_HOME=../apache<span class="literal">-mahout</span><span class="literal">-0</span>.<span class="number">10.2</span><span class="literal">-compile</span></span><br><span class="line"><span class="comment">#-----------------------------run-workload-----------------------------#</span></span><br><span class="line">echo <span class="string">"running matMult"</span></span><br><span class="line"><span class="variable">$</span>&#123;HADOOP_HOME&#125;/bin/hadoop fs <span class="literal">-rmr</span> /hadoop/matMult/mat*<span class="literal">-seq</span> /hadoop/matMult/mat<span class="literal">-out</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$MAHOUT_HOME</span>/bin/mahout seqdirectory -<span class="literal">-input</span> /hadoop/matMult/mat1 -<span class="literal">-output</span> /hadoop/matMult/mat1<span class="literal">-seq</span></span><br><span class="line"><span class="variable">$MAHOUT_HOME</span>/bin/mahout seqdirectory -<span class="literal">-input</span> /hadoop/matMult/mat2 -<span class="literal">-output</span> /hadoop/matMult/mat2<span class="literal">-seq</span></span><br><span class="line"><span class="variable">$</span>&#123;MAHOUT_HOME&#125;/bin/mahout matrixmult \</span><br><span class="line">        -<span class="literal">-numRowsA</span> <span class="variable">$row_i</span> \</span><br><span class="line">        -<span class="literal">-numColsA</span> <span class="variable">$col_i</span> \</span><br><span class="line">        -<span class="literal">-numRowsB</span> <span class="variable">$col_i</span> \</span><br><span class="line">        -<span class="literal">-numColsB</span> <span class="variable">$col_j</span> \</span><br><span class="line">        -<span class="literal">-inputPathA</span> /hadoop/matMult/mat1<span class="literal">-seq</span> \</span><br><span class="line">        -<span class="literal">-inputPathB</span> /hadoop/matMult/mat2<span class="literal">-seq</span> \</span><br><span class="line">        -<span class="literal">-outputPath</span> /hadoop/matMult/mat<span class="literal">-out</span></span><br><span class="line"></span><br><span class="line">echo <span class="string">"hadoop matrix mulitiply end"</span></span><br></pre></td></tr></table></figure></li><li>CC（Connected Component）<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">nano@nano1:/opt/module/BigDataBench5.<span class="number">0</span>_MicroBenchmark/Hadoop/CC<span class="variable">$</span> ./genData<span class="literal">-cc</span>.sh <span class="number">5</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment"># Generating command: ./genData-cc.sh &lt;log_vertex&gt;</span></span><br><span class="line"><span class="comment">#       log_vertex: indicates the vertex of the generated data, means vertex = 2^log_vertex</span></span><br><span class="line"><span class="comment">#----------------------------genenrate-data----------------------------#</span></span><br><span class="line">curdir=`pwd`</span><br><span class="line">I=<span class="variable">$1</span></span><br><span class="line">cd ../../BigDataGeneratorSuite/Graph_datagen</span><br><span class="line">dir=/hadoop/cc</span><br><span class="line">rm <span class="literal">-fr</span> ./gen_data/Google_genGraph_<span class="variable">$I</span>.txt</span><br><span class="line">./gen_kronecker_graph  <span class="literal">-o</span>:./gen_data/Google_genGraph_<span class="variable">$I</span>.txt <span class="literal">-m</span>:<span class="string">"0.8305 0.5573; 0.4638 0.3021"</span> <span class="literal">-i</span>:<span class="variable">$I</span></span><br><span class="line">head ./gen_data/Google_genGraph_<span class="variable">$I</span>.txt &gt; ./gen_data/Google_parameters_<span class="variable">$I</span></span><br><span class="line">sed <span class="number">1</span>,<span class="number">4</span>d ./gen_data/Google_genGraph_<span class="variable">$I</span>.txt &gt; ./gen_data/Google_genGraph_<span class="variable">$I</span>.tmp</span><br><span class="line">mv ./gen_data/Google_genGraph_<span class="variable">$I</span>.tmp ./gen_data/Google_genGraph_<span class="variable">$I</span>.txt</span><br><span class="line"><span class="variable">$</span>&#123;HADOOP_HOME&#125;/bin/hadoop fs <span class="literal">-rmr</span> /hadoop/cc/Google_genGraph_<span class="variable">$I</span>.txt</span><br><span class="line"><span class="variable">$</span>&#123;HADOOP_HOME&#125;/bin/hadoop fs <span class="literal">-mkdir</span> <span class="literal">-p</span> /hadoop/cc</span><br><span class="line"><span class="variable">$</span>&#123;HADOOP_HOME&#125;/bin/hadoop fs <span class="literal">-put</span> ./gen_data/Google_genGraph_<span class="variable">$I</span>.txt /hadoop/cc</span><br><span class="line">运行工作负载</span><br><span class="line">nano@nano1:/opt/module/BigDataBench5.<span class="number">0</span>_MicroBenchmark/Hadoop/CC<span class="variable">$</span> ./run<span class="literal">-cc</span>.sh <span class="number">5</span></span><br><span class="line"><span class="comment">#!/bin/bash  </span></span><br><span class="line"><span class="comment"># Running command: ./run-cc.sh &lt;log_vertex&gt;</span></span><br><span class="line"><span class="comment">#       log_vertex: indicates the vertex of the input data, means vertex = 2^log_vertex</span></span><br><span class="line"></span><br><span class="line">reducers=<span class="number">12</span></span><br><span class="line">I=<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------------------------------run----------------------------#</span></span><br><span class="line"><span class="variable">$</span>&#123;HADOOP_HOME&#125;/bin/hadoop fs <span class="literal">-rmr</span> concmpt_curbm concmpt_tempbm concmpt_nextbm concmpt_output</span><br><span class="line"><span class="variable">$</span>&#123;HADOOP_HOME&#125;/bin/hadoop jar pegasus<span class="literal">-2</span>.<span class="number">0</span>.jar pegasus.ConCmpt <span class="literal">-D</span> mapred.input.format<span class="class">.<span class="keyword">class</span>=<span class="title">org</span>.<span class="title">apache</span>.<span class="title">hadoop</span>.<span class="title">mapred</span>.<span class="title">lib</span>.<span class="title">NLineInputFormat</span> -<span class="title">D</span> <span class="title">mapred</span>.<span class="title">line</span>.<span class="title">input</span>.<span class="title">format</span>.<span class="title">linespermap</span>=2500000 /<span class="title">hadoop</span>/<span class="title">cc</span>/<span class="title">Google_genGraph_</span>$<span class="title">I</span>.<span class="title">txt</span> <span class="title">concmpt_curbm</span> <span class="title">concmpt_tempbm</span> <span class="title">concmpt_nextbm</span> <span class="title">concmpt_output</span> $<span class="title">I</span> $<span class="title">reducers</span> <span class="title">new</span> <span class="title">makesym</span></span></span><br></pre></td></tr></table></figure></li><li>Kmeans<br>  MAHOUT_HOME=../apache-mahout-0.10.2-compile<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">nano@nano1:/opt/module/BigDataBench5.<span class="number">0</span>_ComponentBenchmark/Hadoop/Kmeans<span class="variable">$</span> ./genData<span class="literal">-kmeans</span>.sh <span class="number">5</span></span><br><span class="line"><span class="comment">##!/bin/bash</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment"># Parameter $I indicates that the vertex of the generated graph is 2^$I</span></span><br><span class="line"><span class="comment"># Generating command: ./genData-kmeans.sh &lt;log_vertex&gt; </span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line">I=<span class="variable">$1</span></span><br><span class="line">cd ../../BigDataGeneratorSuite/Graph_datagen</span><br><span class="line">rm <span class="literal">-fr</span> ./gen_data/Facebook_genGragh_<span class="variable">$I</span>.txt</span><br><span class="line">./gen_kronecker_graph  <span class="literal">-o</span>:./gen_data/Facebook_genGragh_<span class="variable">$I</span>.txt <span class="literal">-m</span>:<span class="string">"0.9999 0.5887; 0.6254 0.3676"</span> <span class="literal">-i</span>:<span class="variable">$I</span></span><br><span class="line">head <span class="literal">-4</span> ./gen_data/Facebook_genGragh_<span class="variable">$I</span>.txt &gt; ./gen_data/Facebook_parameters_<span class="variable">$I</span></span><br><span class="line">sed <span class="number">1</span>,<span class="number">4</span>d ./gen_data/Facebook_genGragh_<span class="variable">$I</span>.txt &gt; ./gen_data/Facebook_genGragh_<span class="variable">$I</span>.tmp</span><br><span class="line">mv ./gen_data/Facebook_genGragh_<span class="variable">$I</span>.tmp ./gen_data/Facebook_genGragh_<span class="variable">$I</span>.txt</span><br><span class="line">sed <span class="string">'s/[[:space:]][[:space:]]*/ /g'</span> ./gen_data/Facebook_genGragh_<span class="variable">$I</span>.txt &gt;./gen_data/testdata</span><br><span class="line"><span class="variable">$</span>&#123;HADOOP_HOME&#125;/bin/hadoop fs <span class="literal">-rmr</span> testdata</span><br><span class="line"><span class="variable">$</span>&#123;HADOOP_HOME&#125;/bin/hadoop fs <span class="literal">-put</span> ./gen_data/testdata</span><br><span class="line">运行工作负载</span><br><span class="line">nano@nano1:/opt/module/BigDataBench5.<span class="number">0</span>_ComponentBenchmark/Hadoop/Kmeans<span class="variable">$</span> ./run<span class="literal">-Kmeans</span>.sh <span class="number">0.4</span> <span class="number">0.1</span> <span class="number">0.1</span> <span class="number">5</span></span><br><span class="line"><span class="comment">##!/bin/bash</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment"># Kmeans running command:</span></span><br><span class="line"><span class="comment"># ./run-Kmeans.sh &lt;t1&gt; &lt;t2&gt; &lt;cd&gt; &lt;x&gt;</span></span><br><span class="line"><span class="comment">#       t1: T1 threshold value (0-1), such as 0.4</span></span><br><span class="line"><span class="comment">#       t2: T2 threshold value (0-1), such as 0.1</span></span><br><span class="line"><span class="comment">#       cd: The convergence delta value (0-1), such as 0.1</span></span><br><span class="line"><span class="comment">#       x: The max iteration number</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">#-----------------------------------run--------------------------------------------#</span></span><br><span class="line">MAHOUT_HOME=../apache<span class="literal">-mahout</span><span class="literal">-0</span>.<span class="number">10.2</span><span class="literal">-compile</span></span><br><span class="line"><span class="variable">$HADOOP_HOME</span>/bin/hadoop dfs <span class="literal">-rmr</span> output</span><br><span class="line"><span class="variable">$</span>&#123;MAHOUT_HOME&#125;/bin/mahout org.apache.mahout.clustering.syntheticcontrol.kmeans.Job \</span><br><span class="line">        <span class="literal">-i</span> testdata \</span><br><span class="line">        <span class="literal">-o</span> output \</span><br><span class="line">        <span class="literal">-dm</span> org.apache.mahout.common.distance.CosineDistanceMeasure \</span><br><span class="line">        <span class="literal">-t1</span> <span class="variable">$1</span> \</span><br><span class="line">        <span class="literal">-t2</span> <span class="variable">$2</span> \</span><br><span class="line">        <span class="literal">-cd</span> <span class="variable">$3</span> \</span><br><span class="line">        <span class="literal">-x</span> <span class="variable">$4</span> \</span><br></pre></td></tr></table></figure></li><li>Pagerank<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">nano@nano1:/opt/module/BigDataBench5.<span class="number">0</span>_ComponentBenchmark/Hadoop/PageRank<span class="variable">$</span> ./genData<span class="literal">-pagerank</span>.sh <span class="number">5</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment"># Parameter $I indicates that the vertex of the generated graph is 2^$I</span></span><br><span class="line"><span class="comment"># Generating command: ./genData-pagerank.sh &lt;log_vertex&gt; </span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">#----------------------------genenrate-data----------------------------#</span></span><br><span class="line">I=<span class="variable">$1</span></span><br><span class="line">cd ../../BigDataGeneratorSuite/Graph_datagen</span><br><span class="line">dir=/hadoop/pagerank</span><br><span class="line">rm <span class="literal">-fr</span> ./gen_data/Google_genGraph_<span class="variable">$I</span>.txt</span><br><span class="line">./gen_kronecker_graph  <span class="literal">-o</span>:./gen_data/Google_genGraph_<span class="variable">$I</span>.txt <span class="literal">-m</span>:<span class="string">"0.8305 0.5573; 0.4638 0.3021"</span> <span class="literal">-i</span>:<span class="variable">$I</span></span><br><span class="line">head ./gen_data/Google_genGraph_<span class="variable">$I</span>.txt &gt; ./gen_data/Google_parameters_<span class="variable">$I</span></span><br><span class="line">sed <span class="number">1</span>,<span class="number">4</span>d ./gen_data/Google_genGraph_<span class="variable">$I</span>.txt &gt; ./gen_data/Google_genGraph_<span class="variable">$I</span>.tmp</span><br><span class="line">mv ./gen_data/Google_genGraph_<span class="variable">$I</span>.tmp ./gen_data/Google_genGraph_<span class="variable">$I</span>.txt</span><br><span class="line"><span class="variable">$</span>&#123;HADOOP_HOME&#125;/bin/hadoop fs <span class="literal">-rmr</span> /hadoop/pagerank/Google_genGraph_<span class="variable">$I</span>.txt</span><br><span class="line"><span class="variable">$</span>&#123;HADOOP_HOME&#125;/bin/hadoop fs <span class="literal">-mkdir</span> <span class="literal">-p</span> /hadoop/pagerank</span><br><span class="line"><span class="variable">$</span>&#123;HADOOP_HOME&#125;/bin/hadoop fs <span class="literal">-put</span> ./gen_data/Google_genGraph_<span class="variable">$I</span>.txt /hadoop/pagerank</span><br></pre></td></tr></table></figure>运行工作负载<br>nano@nano1:/opt/module/BigDataBench5.0_ComponentBenchmark/Hadoop/PageRank$./run-pagerank.sh 5<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash  </span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment"># Parameter $I indicates that the vertex of the generated graph is 2^$I</span></span><br><span class="line"><span class="comment"># Running command: ./run-pagerank.sh &lt;log_vertex&gt; </span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line">I=<span class="variable">$1</span></span><br><span class="line"><span class="variable">$</span>&#123;HADOOP_HOME&#125;/bin/hadoop fs <span class="literal">-rmr</span> /hadoop/pagerank/prtemp /hadoop/pagerank/output pr_distr pr_minmax pr_vector</span><br><span class="line"><span class="variable">$</span>&#123;HADOOP_HOME&#125;/bin/hadoop jar pegasus<span class="literal">-2</span>.<span class="number">0</span>.jar pegasus.PagerankNaive /hadoop/pagerank/Google_genGraph_<span class="variable">$I</span>.txt /hadoop/pagerank/prtemp /hadoop/pagerank/output <span class="number">450</span> <span class="number">4</span> <span class="number">3</span> nosym new</span><br></pre></td></tr></table></figure></li><li>RandSample<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">生成<span class="number">1</span>G的数据</span><br><span class="line">nano@nano1:/opt/module/BigDataBench5.<span class="number">0</span>_MicroBenchmark/Hadoop/randSample<span class="variable">$</span> ./genData<span class="literal">-randSample</span>.sh <span class="number">1</span></span><br><span class="line"><span class="comment"># Generating command: ./genData-randSample.sh &lt;size&gt;</span></span><br><span class="line"><span class="comment">#       size: the input data size, GB</span></span><br><span class="line"><span class="comment">#----------------------------genenrate-data----------------------------#</span></span><br><span class="line">curdir=`pwd`</span><br><span class="line">a=<span class="variable">$1</span></span><br><span class="line">    let L=a*<span class="number">2</span></span><br><span class="line">    cd ../../BigDataGeneratorSuite/Text_datagen/</span><br><span class="line">    rm <span class="literal">-fr</span> ./gen_data/<span class="variable">$a</span><span class="string">"GB"</span><span class="literal">-randsampleHP</span></span><br><span class="line">    ./gen_text_data.sh lda_wiki1w <span class="variable">$L</span> <span class="number">8000</span> <span class="number">10000</span> ./gen_data/<span class="variable">$a</span><span class="string">"GB"</span><span class="literal">-randsampleHP</span></span><br><span class="line">    <span class="variable">$</span>&#123;HADOOP_HOME&#125;/bin/hadoop fs <span class="literal">-rmr</span> /hadoop/randsample/<span class="variable">$a</span><span class="string">"GB"</span><span class="literal">-randsampleHP</span></span><br><span class="line">    <span class="variable">$</span>&#123;HADOOP_HOME&#125;/bin/hadoop fs <span class="literal">-mkdir</span> <span class="literal">-p</span> /hadoop/randsample</span><br><span class="line">    <span class="variable">$</span>&#123;HADOOP_HOME&#125;/bin/hadoop fs <span class="literal">-put</span> ./gen_data/<span class="variable">$a</span><span class="string">"GB"</span><span class="literal">-randsampleHP</span> /hadoop/randsample</span><br><span class="line">```</span><br><span class="line">运行工作负载</span><br><span class="line">nano@nano1:/opt/module/BigDataBench5.<span class="number">0</span>_MicroBenchmark/Hadoop/randSample<span class="variable">$</span> ./run<span class="literal">-randSample</span>.sh <span class="number">1</span> <span class="number">0.3</span></span><br><span class="line">```powershell</span><br><span class="line"><span class="comment"># Running command: ./run-randSample.sh &lt;size&gt; &lt;sample_ratio&gt;</span></span><br><span class="line"><span class="comment">#       size: the input data size, GB</span></span><br><span class="line"><span class="comment">#       sample_ratio: the sampling ratio, ranges from 0 to 1.</span></span><br><span class="line">curdir=`pwd`</span><br><span class="line">a=<span class="variable">$1</span></span><br><span class="line"><span class="comment">#-----------------------------run-workload-----------------------------#</span></span><br><span class="line">echo <span class="string">"running randsample"</span></span><br><span class="line"><span class="variable">$</span>&#123;HADOOP_HOME&#125;/bin/hadoop fs <span class="literal">-rmr</span> /hadoop/randsample/randsampleHP<span class="literal">-result</span></span><br><span class="line"><span class="variable">$</span>&#123;HADOOP_HOME&#125;/bin/hadoop jar RandSample/out/artifacts/RandSample_jar/RandSample.jar RandSample /hadoop/randsample/<span class="variable">$a</span><span class="string">"GB"</span><span class="literal">-randsampleHP</span>  /hadoop/randsample/randsampleHP<span class="literal">-result</span> <span class="variable">$2</span></span><br></pre></td></tr></table></figure></li><li>CF（collaborative Filtering）<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">生成<span class="number">1</span>G的数据</span><br><span class="line">nano@nano1:/opt/module/BigDataBench5.<span class="number">0</span>_ComponentBenchmark/Hadoop/CF<span class="variable">$</span> ./genData<span class="literal">-cf</span>.sh <span class="number">1</span></span><br><span class="line"><span class="comment">#Command for generating data:</span></span><br><span class="line"><span class="comment">#       ./genData-cf.sh &lt;size&gt; #GB</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">a=`expr <span class="variable">$1</span> \* <span class="number">1024</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment">#-----------------generating input data---------------</span></span><br><span class="line">rm <span class="literal">-rf</span> genData<span class="literal">-CF</span>/als_input.txt</span><br><span class="line"><span class="variable">$HADOOP_HOME</span>/bin/hadoop dfs <span class="literal">-rmr</span> /hadoop/cf/cf-<span class="variable">$</span>&#123;<span class="number">1</span>&#125;G</span><br><span class="line">cd genData<span class="literal">-CF</span></span><br><span class="line">make</span><br><span class="line">./ALS<span class="literal">-DataGen</span> <span class="variable">$a</span></span><br><span class="line"><span class="variable">$HADOOP_HOME</span>/bin/hadoop fs <span class="literal">-mkdir</span> <span class="literal">-p</span> /hadoop/cf/</span><br><span class="line"><span class="variable">$HADOOP_HOME</span>/bin/hadoop fs als_input.txt /hadoop/cf/cf-<span class="variable">$</span>&#123;<span class="number">1</span>&#125;G</span><br><span class="line"><span class="variable">$HADOOP_HOME</span>/bin/hadoop dfs <span class="literal">-rmr</span> /hadoop/cf/cf<span class="literal">-out</span> /hadoop/cf/temp</span><br></pre></td></tr></table></figure> 运行工作负载<br> nano@nano1:/opt/module/BigDataBench5.0_ComponentBenchmark/Hadoop/CF$ ./run-cf.sh 1<br> 注意：脚本中没有加MAHOUT_HOME地址，执行会报错，自己在脚本中手动添加BigDatabench中自带的mahout地址，或者在环境变量中配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash </span><br><span class="line">#Run command: .&#x2F;run-cf.sh &lt;size&gt; &lt;numFeatures&gt; &lt;numIterations&gt; &lt;lambda&gt;</span><br><span class="line">#       size: the input data size, GB</span><br><span class="line">#       numFeatures: the number of features</span><br><span class="line">#       numIterations: the number of features</span><br><span class="line">#       lambda: regularization parameter</span><br><span class="line">MAHOUT_HOME&#x3D;..&#x2F;apache-mahout-0.10.2-compile</span><br><span class="line">#-----------------running hadoop cf-------------</span><br><span class="line">$&#123;MAHOUT_HOME&#125;&#x2F;bin&#x2F;mahout parallelALS \</span><br><span class="line">        -i &#x2F;hadoop&#x2F;cf&#x2F;cf-$&#123;1&#125;G \</span><br><span class="line">        -o &#x2F;hadoop&#x2F;cf&#x2F;cf-out \</span><br><span class="line">        --numFeatures $2 \</span><br><span class="line">        --numIterations $3 \</span><br><span class="line">        --lambda $4 \</span><br><span class="line">        --tempDir &#x2F;hadoop&#x2F;cf&#x2F;temp</span><br><span class="line">#-----------------killing monitor script--------------</span><br><span class="line">echo &quot;hadoop cf end&quot;</span><br></pre></td></tr></table></figure></li><li>Bayes<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">生成<span class="number">1</span>G的数据</span><br><span class="line">nano@nano1:/opt/module/BigDataBench5.<span class="number">0</span>_ComponentBenchmark/Hadoop/Bayes<span class="variable">$</span> ./genData<span class="literal">-bayes</span>.sh <span class="number">1</span></span><br><span class="line"><span class="comment">#!/bin/bash  </span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#The parameter $1 indicates the data size (GB) to generate</span></span><br><span class="line"><span class="comment">#Command for generate data: ./genData-bayes.sh &lt;size&gt; #GB</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#------------generate-data---------------------</span></span><br><span class="line">a=<span class="variable">$1</span></span><br><span class="line">cd ../../BigDataGeneratorSuite/Text_datagen/</span><br><span class="line">rm <span class="literal">-rf</span> ./gen_data/<span class="keyword">data</span><span class="literal">-naivebayes</span></span><br><span class="line">    let L=a*<span class="number">2</span></span><br><span class="line">    ./gen_text_data.sh amazonMR1 <span class="variable">$L</span> <span class="number">1900</span> <span class="number">11500</span> ./gen_data/<span class="keyword">data</span><span class="literal">-naivebayes</span>/amazonMR1</span><br><span class="line">    ./gen_text_data.sh amazonMR2 <span class="variable">$L</span> <span class="number">1900</span> <span class="number">11500</span> ./gen_data/<span class="keyword">data</span><span class="literal">-naivebayes</span>/amazonMR2</span><br><span class="line">    ./gen_text_data.sh amazonMR3 <span class="variable">$L</span> <span class="number">1900</span> <span class="number">11500</span> ./gen_data/<span class="keyword">data</span><span class="literal">-naivebayes</span>/amazonMR3</span><br><span class="line">    ./gen_text_data.sh amazonMR4 <span class="variable">$L</span> <span class="number">1900</span> <span class="number">11500</span> ./gen_data/<span class="keyword">data</span><span class="literal">-naivebayes</span>/amazonMR4</span><br><span class="line">    ./gen_text_data.sh amazonMR5 <span class="variable">$L</span> <span class="number">1900</span> <span class="number">11500</span> ./gen_data/<span class="keyword">data</span><span class="literal">-naivebayes</span>/amazonMR5</span><br><span class="line"><span class="comment">#-------------------------------------put-data----------------------------#</span></span><br><span class="line">    <span class="variable">$</span>&#123;HADOOP_HOME&#125;/bin/hadoop fs <span class="literal">-rmr</span> /hadoop/Bayes/*</span><br><span class="line">    <span class="variable">$</span>&#123;HADOOP_HOME&#125;/bin/hadoop fs <span class="literal">-mkdir</span> <span class="literal">-p</span> /hadoop/Bayes</span><br><span class="line">    <span class="variable">$</span>&#123;HADOOP_HOME&#125;/bin/hadoop fs <span class="literal">-put</span> ./gen_data/<span class="keyword">data</span><span class="literal">-naivebayes</span> /hadoop/Bayes/</span><br></pre></td></tr></table></figure>运行工作负载<br>nano@nano1:/opt/module/BigDataBench5.0_ComponentBenchmark/Hadoop/Bayes$ ./run-bayes.sh<br>注意：脚本中没有加MAHOUT_HOME地址，执行会报错，自己在脚本中手动添加BigDatabench中自带的mahout地址，或者在环境变量中配置<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash  </span></span><br><span class="line"><span class="comment"># Run command: ./run-bayes.sh</span></span><br><span class="line">MAHOUT_HOME=../apache<span class="literal">-mahout</span><span class="literal">-0</span>.<span class="number">10.2</span><span class="literal">-compile</span></span><br><span class="line"><span class="comment">#--------------------------------------run-workload-----------------------#</span></span><br><span class="line"><span class="comment">#Generates input dataset for training &amp; testing classifier</span></span><br><span class="line">dir=/hadoop/Bayes</span><br><span class="line">echo <span class="string">"Creating sequence files from naivebayes-naivebayes data"</span></span><br><span class="line"> <span class="variable">$</span>&#123;MAHOUT_HOME&#125;/bin/mahout seqdirectory \</span><br><span class="line">  <span class="literal">-i</span> /hadoop/Bayes/<span class="keyword">data</span><span class="literal">-naivebayes</span> \</span><br><span class="line">  <span class="literal">-o</span> /hadoop/Bayes/naivebayes<span class="literal">-seq</span> <span class="literal">-ow</span></span><br><span class="line">echo <span class="string">"Converting sequence files to vectors"</span></span><br><span class="line"> <span class="variable">$</span>&#123;MAHOUT_HOME&#125;/bin/mahout seq2sparse \</span><br><span class="line">  <span class="literal">-i</span> /hadoop/Bayes/naivebayes<span class="literal">-seq</span> \</span><br><span class="line">  <span class="literal">-o</span> /hadoop/Bayes/naivebayes<span class="literal">-vectors</span>  <span class="literal">-lnorm</span> <span class="literal">-nv</span>  <span class="literal">-wt</span> tfidf</span><br><span class="line">echo <span class="string">"Creating training and holdout set with a random 80-20 split of the generated vector dataset"</span></span><br><span class="line"> <span class="variable">$</span>&#123;MAHOUT_HOME&#125;/bin/mahout split \</span><br><span class="line">  <span class="literal">-i</span> /hadoop/Bayes/naivebayes<span class="literal">-vectors</span>/tfidf<span class="literal">-vectors</span> \</span><br><span class="line">  -<span class="literal">-trainingOutput</span> /hadoop/Bayes/naivebayes<span class="literal">-train</span><span class="literal">-vectors</span> \</span><br><span class="line">  -<span class="literal">-testOutput</span> /hadoop/Bayes/naivebayes<span class="literal">-test</span><span class="literal">-vectors</span>  \</span><br><span class="line">  -<span class="literal">-randomSelectionPct</span> <span class="number">70</span> -<span class="literal">-overwrite</span> -<span class="literal">-sequenceFiles</span> <span class="literal">-xm</span> sequential</span><br><span class="line"><span class="comment">#Trains the classifier</span></span><br><span class="line">echo <span class="string">"Training Naive Bayes model"</span></span><br><span class="line"> <span class="variable">$</span>&#123;MAHOUT_HOME&#125;/bin/mahout trainnb \</span><br><span class="line">  <span class="literal">-i</span> /hadoop/Bayes/naivebayes<span class="literal">-train</span><span class="literal">-vectors</span>  \</span><br><span class="line">  <span class="literal">-o</span> /hadoop/Bayes/model \</span><br><span class="line">  <span class="literal">-li</span> /hadoop/Bayes/labelindex \</span><br><span class="line">  <span class="literal">-ow</span> <span class="comment">#$c</span></span><br><span class="line"><span class="comment">#------------------------------------------run------------------------------#</span></span><br><span class="line">hadoop dfs <span class="literal">-rmr</span> /hadoop/Bayes/naivebayes<span class="literal">-testing</span></span><br><span class="line"><span class="variable">$</span>&#123;MAHOUT_HOME&#125;/bin/mahout testnb \</span><br><span class="line"> <span class="literal">-i</span> /hadoop/Bayes/naivebayes<span class="literal">-test</span><span class="literal">-vectors</span> \</span><br><span class="line"> <span class="literal">-m</span> /hadoop/Bayes/model \</span><br><span class="line"> <span class="literal">-l</span> /hadoop/Bayes/labelindex \</span><br><span class="line"> <span class="literal">-ow</span> <span class="literal">-o</span> /hadoop/Bayes/naivebayes<span class="literal">-testing</span> <span class="comment">#$c</span></span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20191111185658916.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_10,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li><li>Index<br>首先进行配置<br>nano@nano1:/opt/module/BigDataBench5.0_ComponentBenchmark/Hadoop/Index/conf$ vim hibench-config.sh<br><img src="https://img-blog.csdnimg.cn/20191111185813179.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_10,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">nano@nano1:/opt/module/BigDataBench5.0_ComponentBenchmark/Hadoop/Index/conf$ vim configure.sh<br><img src="https://img-blog.csdnimg.cn/20191111185849328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_10,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">生成数据</span><br><span class="line">nano@nano1:/opt/module/BigDataBench5.<span class="number">0</span>_ComponentBenchmark/Hadoop/Index/bin<span class="variable">$</span> ./genData_Index.sh </span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">bin=`dirname <span class="string">"<span class="variable">$0</span>"</span>`</span><br><span class="line">bin=`cd <span class="string">"<span class="variable">$bin</span>"</span>; pwd`</span><br><span class="line"></span><br><span class="line">echo <span class="string">"========== preparing nutchindex data =========="</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># configure</span></span><br><span class="line">DIR=`cd <span class="variable">$bin</span>/../; pwd`</span><br><span class="line">. <span class="string">"<span class="variable">$</span>&#123;DIR&#125;/conf/hibench-config.sh"</span></span><br><span class="line">. <span class="string">"<span class="variable">$</span>&#123;DIR&#125;/conf/configure.sh"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># compress</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$COMPRESS</span> -<span class="type">eq</span> <span class="number">1</span> ]; then</span><br><span class="line">    COMPRESS_OPT=<span class="string">"-c <span class="variable">$</span>&#123;COMPRESS_CODEC&#125;"</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">rm <span class="literal">-rf</span> <span class="variable">$TMPLOGFILE</span></span><br><span class="line">hadoop dfs <span class="literal">-rmr</span> /Nutch</span><br><span class="line">hadoop dfs <span class="literal">-mkdir</span> /Nutch</span><br><span class="line"><span class="comment"># generate data</span></span><br><span class="line">OPTION=<span class="string">"-t nutch \</span></span><br><span class="line"><span class="string">        -b <span class="variable">$</span>&#123;NUTCH_BASE_HDFS&#125; \</span></span><br><span class="line"><span class="string">        -n <span class="variable">$</span>&#123;NUTCH_INPUT&#125; \</span></span><br><span class="line"><span class="string">        -m <span class="variable">$</span>&#123;NUM_MAPS&#125; \</span></span><br><span class="line"><span class="string">        -r <span class="variable">$</span>&#123;NUM_REDS&#125; \</span></span><br><span class="line"><span class="string">        -p <span class="variable">$</span>&#123;PAGES&#125; \</span></span><br><span class="line"><span class="string">        -o sequence"</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$HADOOP_EXECUTABLE</span> jar  ../conf/datatools.jar HiBench.DataGen <span class="variable">$</span>&#123;OPTION&#125; <span class="variable">$</span>&#123;COMPRESS_OPT&#125;</span><br><span class="line">运行工作负载</span><br><span class="line">nano@nano1:/opt/module/BigDataBench5.<span class="number">0</span>_ComponentBenchmark/Hadoop/Index/bin<span class="variable">$</span> ./run_Index.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">bin=`dirname <span class="string">"<span class="variable">$0</span>"</span>`</span><br><span class="line">bin=`cd <span class="string">"<span class="variable">$bin</span>"</span>; pwd`</span><br><span class="line"></span><br><span class="line">echo <span class="string">"========== running nutchindex data =========="</span></span><br><span class="line"><span class="comment"># configure</span></span><br><span class="line">DIR=`cd <span class="variable">$bin</span>/../; pwd`</span><br><span class="line">. <span class="string">"<span class="variable">$</span>&#123;DIR&#125;/conf/hibench-config.sh"</span></span><br><span class="line">. <span class="string">"<span class="variable">$</span>&#123;DIR&#125;/conf/configure.sh"</span></span><br><span class="line"></span><br><span class="line">export NUTCH_HOME=<span class="variable">$BigdataBench_Home</span>/SearchEngine/Index/nutch<span class="literal">-1</span>.<span class="number">2</span><span class="literal">-hadoop1</span></span><br><span class="line">cd <span class="variable">$NUTCH_HOME</span></span><br><span class="line">export NUTCH_CONF_DIR=<span class="variable">$HADOOP_CONF_DIR:</span><span class="variable">$NUTCH_HOME</span>/conf</span><br><span class="line"></span><br><span class="line">hadoop dfs <span class="literal">-rmr</span> /Nutch/Output</span><br><span class="line">hadoop dfs <span class="literal">-rmr</span> <span class="variable">$INPUT_HDFS</span>/indexes</span><br><span class="line"><span class="comment"># run bench</span></span><br><span class="line">../nutch<span class="literal">-1</span>.<span class="number">2</span><span class="literal">-hadoop1</span>/bin/nutch index <span class="variable">$COMPRESS_OPTS</span> <span class="variable">$OUTPUT_HDFS</span> <span class="variable">$INPUT_HDFS</span>/crawldb <span class="variable">$INPUT_HDFS</span>/linkdb <span class="variable">$INPUT_HDFS</span>/segments/*</span><br></pre></td></tr></table></figure><blockquote><p>出错啦：<br><img src="https://img-blog.csdnimg.cn/2019111119391582.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_10,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>出错原因：<br>解决方案：</p></blockquote></li><li>SIFT<br><a href="https://blog.csdn.net/chezhai/article/details/66044054" target="_blank" rel="noopener">SIFT详解</a>：（局部特征提取算法）尺度不变特征转换(Scale-invariant feature transform或SIFT)是一种电脑视觉的算法用来侦测与描述影像中的局部性特征，它在空间尺度中寻找极值点，并提取出其位置、尺度、旋转不变量，此算法由 David Lowe在1999年所发表，2004年完善总结。其应用范围包含物体辨识、机器人地图感知与导航、影像缝合、3D模型建立、手势辨识、影像追踪和动作比对。此算法有其专利，专利拥有者为英属哥伦比亚大学。<br>数据集下载地址<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.image<span class="literal">-net</span>.org/challenges/LSVRC/<span class="number">2014</span>/</span><br></pre></td></tr></table></figure>上传数据集<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs://<span class="number">192.168</span>.<span class="number">1.101</span>:<span class="number">9000</span>/hadoop/sift/<span class="keyword">data</span>/image1G.hib</span><br></pre></td></tr></table></figure>运行工作负载<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano@nano1:/opt/module/BigDataBench5.<span class="number">0</span>_ComponentBenchmark/Hadoop/SIFT<span class="variable">$</span> ./run<span class="literal">-sift</span>.sh <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">#Running command: ./run-sift.sh &lt;imgsize&gt;</span></span><br><span class="line"><span class="comment">#       imgsize: the total size of the images, GB</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">#----------------check whether opencv is installed--------#  </span></span><br><span class="line">isopencv=`pkg<span class="literal">-config</span> -<span class="literal">-modversion</span> opencv`</span><br><span class="line">strB=<span class="string">"Package opencv was not found"</span></span><br><span class="line">result=<span class="variable">$</span>(echo <span class="variable">$isopencv</span> | grep <span class="string">"<span class="variable">$</span>&#123;strB&#125;"</span>)</span><br><span class="line">echo <span class="variable">$result</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$result</span> != <span class="string">""</span> ]];then</span><br><span class="line">echo <span class="string">"no opencv"</span></span><br><span class="line"><span class="keyword">exit</span> <span class="number">1</span></span><br><span class="line">fi</span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$1</span> -<span class="type">ge</span> <span class="number">10</span> ]];then</span><br><span class="line">a=<span class="number">10</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">a=<span class="number">1</span></span><br><span class="line">fi</span><br><span class="line"><span class="comment">#-----------------generating input data---------------</span></span><br><span class="line"><span class="variable">$HADOOP_HOME</span>/bin/hadoop dfs <span class="literal">-rmr</span> /hadoop/sift/<span class="keyword">data</span>/image<span class="variable">$</span>&#123;a&#125;G.*</span><br><span class="line"><span class="variable">$HADOOP_HOME</span>/bin/hadoop fs <span class="literal">-mkdir</span> <span class="literal">-p</span> /hadoop/sift/<span class="keyword">data</span>/</span><br><span class="line"><span class="variable">$HADOOP_HOME</span>/bin/hadoop dfs <span class="literal">-rmr</span> /hadoop/sift/sift<span class="literal">-out</span></span><br><span class="line"><span class="variable">$HADOOP_HOME</span>/bin/hadoop fs <span class="literal">-put</span> hadoop<span class="literal">-SIFT</span>/<span class="keyword">data</span>/image<span class="variable">$</span>&#123;a&#125;G.* /hadoop/sift/<span class="keyword">data</span>/</span><br><span class="line"><span class="comment">#-----------------running hadoop sift-------------</span></span><br><span class="line"><span class="variable">$HADOOP_HOME</span>/bin/hadoop jar hadoop<span class="literal">-SIFT</span>/hipi<span class="literal">-SIFT</span>/tools/sift/build/libs/sift.jar /hadoop/sift/<span class="keyword">data</span>/image<span class="variable">$</span>&#123;a&#125;G.hib /hadoop/sift/sift<span class="literal">-out</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下载GSL库并安装</title>
      <link href="/2020/06/01/Linux%E4%B8%8B%E8%BD%BDGSL%E5%BA%93%E5%B9%B6%E5%AE%89%E8%A3%85/"/>
      <url>/2020/06/01/Linux%E4%B8%8B%E8%BD%BDGSL%E5%BA%93%E5%B9%B6%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>我是ubuntu18.04下安装gsl。<br>GSL是一个GNU支持的科学计算库,提供了很丰富的数值计算方法<br><a href="http://www.gnu.org/software/gsl/" target="_blank" rel="noopener">GSL库地址</a></p><h2 id="1-下载GSL库"><a href="#1-下载GSL库" class="headerlink" title="1. 下载GSL库"></a>1. 下载GSL库</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git://git.savannah.gnu.org/gsl.git</span><br></pre></td></tr></table></figure><p>查看gsl目录结构<br><img src="https://img-blog.csdnimg.cn/20191110195514444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h2 id="2-编译"><a href="#2-编译" class="headerlink" title="2. 编译"></a>2. 编译</h2><p>编译：<code>make</code>（需要等一会）<br><img src="https://img-blog.csdnimg.cn/20191110195554211.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h2 id="3-测试一下这个库"><a href="#3-测试一下这个库" class="headerlink" title="3.测试一下这个库"></a>3.测试一下这个库</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make check</span><br></pre></td></tr></table></figure><p>出错啦：<br><img src="https://img-blog.csdnimg.cn/20191110195714417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>出错原因及解决方案：<a href="https://github.com/ImageMagick/ImageMagick/issues/169" target="_blank" rel="noopener">https://github.com/ImageMagick/ImageMagick/issues/169</a></p><h2 id="4-安装gsl库"><a href="#4-安装gsl库" class="headerlink" title="4.安装gsl库"></a>4.安装gsl库</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191110195749963.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h2 id="5-查看gsl的include、lib等配置的路径"><a href="#5-查看gsl的include、lib等配置的路径" class="headerlink" title="5. 查看gsl的include、lib等配置的路径"></a>5. 查看gsl的include、lib等配置的路径</h2><p>默认安装如下：<br><img src="https://img-blog.csdnimg.cn/20191110195828876.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20191110195849113.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">)<img src="https://img-blog.csdnimg.cn/20191110195859377.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h2 id="6-配置环境变量"><a href="#6-配置环境变量" class="headerlink" title="6. 配置环境变量"></a>6. 配置环境变量</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>添加如下环境变量</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#GSL_HOME</span></span><br><span class="line">export C_INCLUDE_PATH=<span class="variable">$C_INCLUDE_PATH:</span>/usr/local/include/gsl</span><br><span class="line">export CPLUS_INCLUDE_PATH=<span class="variable">$CPLUS_INCLUDE_PATH:</span>/usr/local/include/gsl</span><br><span class="line">export LD_LIBRARY_PATH=<span class="variable">$LD_LIBRARY_PATH::</span>/usr/local/lib</span><br><span class="line">export LIBRARY_PATH=<span class="variable">$LIBRARY_PATH::</span>/usr/local/lib</span><br></pre></td></tr></table></figure><p>立即生效：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h2 id="7-验证是否安装成功"><a href="#7-验证是否安装成功" class="headerlink" title="7.验证是否安装成功"></a>7.验证是否安装成功</h2><h4 id="（1）编写一个test-c进行测试"><a href="#（1）编写一个test-c进行测试" class="headerlink" title="（1）编写一个test.c进行测试"></a>（1）编写一个test.c进行测试</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano@nano10:/opt/module/<span class="keyword">data</span><span class="variable">$</span> vim test.c</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;gsl/gsl_sf_bessel.h&gt;</span></span><br><span class="line">int</span><br><span class="line">main (void)</span><br><span class="line">&#123;</span><br><span class="line">    double x = <span class="number">5.0</span>;</span><br><span class="line">    double y = gsl_sf_bessel_J0 (x);</span><br><span class="line">    printf (<span class="string">"J0(%g) = %.18e/n"</span>, x, y);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（2）进行编译链接，产生test-o和a-out"><a href="#（2）进行编译链接，产生test-o和a-out" class="headerlink" title="（2）进行编译链接，产生test.o和a.out"></a>（2）进行编译链接，产生test.o和a.out</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nano@nano10:/opt/module/<span class="keyword">data</span><span class="variable">$</span> gcc <span class="literal">-Wall</span> <span class="literal">-I</span>/usr/local/include <span class="literal">-c</span> test.c</span><br><span class="line">nano@nano10:/opt/module/<span class="keyword">data</span><span class="variable">$</span> gcc <span class="literal">-L</span>/usr/local/lib test.o <span class="literal">-lgsl</span> <span class="literal">-lgslcblas</span> <span class="literal">-lm</span></span><br></pre></td></tr></table></figure><h4 id="（3）测试"><a href="#（3）测试" class="headerlink" title="（3）测试"></a>（3）测试</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano@nano10:/opt/module/<span class="keyword">data</span><span class="variable">$</span> vim a.out</span><br></pre></td></tr></table></figure><blockquote><p>出错啦：<br>    error while loading shared libraries: libgsl.so.0: cannot open shared object file: No such file or directory<br>原因：<br>    刚刚安装好gsl后，由于gsl的动态链接库没有及时刷新导致识别不到。<br>解决方案：<br>    sudo ldconfig(ldconfig的作用是：Configure Dynamic Linker Run Time Bindings.)<br>    然后运行ldd test.o查看动态链接库是否链接成功<br>参考资料：<a href="https://www.cnblogs.com/vastiny/p/3849169.html" target="_blank" rel="noopener">https://www.cnblogs.com/vastiny/p/3849169.html</a></p></blockquote><p>出现如下结果，则说明gsl安装成功。<br><img src="https://img-blog.csdnimg.cn/20191110200617966.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>安装GSL参考资料：<br><a href="https://blog.csdn.net/u012248802/article/details/80655902" target="_blank" rel="noopener">https://blog.csdn.net/u012248802/article/details/80655902</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nano上部署hadoop集群</title>
      <link href="/2020/06/01/nano%E4%B8%8A%E9%83%A8%E7%BD%B2hadoop%E9%9B%86%E7%BE%A4/"/>
      <url>/2020/06/01/nano%E4%B8%8A%E9%83%A8%E7%BD%B2hadoop%E9%9B%86%E7%BE%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="0、设置root初始密码"><a href="#0、设置root初始密码" class="headerlink" title="0、设置root初始密码"></a>0、设置root初始密码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd</span><br></pre></td></tr></table></figure><h1 id="一、配置静态ip"><a href="#一、配置静态ip" class="headerlink" title="一、配置静态ip"></a>一、配置静态ip</h1><p>sudo vim /etc/network/interfaces</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># interfaces(5) file used by ifup(8) and ifdown(8)</span></span><br><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"></span><br><span class="line"><span class="comment">#the primary network interface</span></span><br><span class="line"><span class="comment">#网卡名称</span></span><br><span class="line">auto eth0</span><br><span class="line"><span class="comment">#设置为静态</span></span><br><span class="line">iface eth0 inet static</span><br><span class="line"><span class="comment">#静态ip地址</span></span><br><span class="line">address 192.168.1.101</span><br><span class="line"><span class="comment">#子网掩码</span></span><br><span class="line">netmask 255.255.255.0</span><br><span class="line"><span class="comment">#网关</span></span><br><span class="line">gateway 192.168.1.1</span><br></pre></td></tr></table></figure><p>重启网络服务<br>sudo /etc/init.d/networking restart</p><h1 id="二、设置普通用户具有最大权限"><a href="#二、设置普通用户具有最大权限" class="headerlink" title="二、设置普通用户具有最大权限"></a>二、设置普通用户具有最大权限</h1><p>修改 /etc/sudoers 文件，找到下面一行，在root下面添加一行，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">## Allow root to run any commands anywhere</span><br><span class="line">    root    ALL&#x3D;(ALL)     ALL</span><br><span class="line">    nano    ALL&#x3D;(ALL)     NOPASSWD:ALL</span><br></pre></td></tr></table></figure><h1 id="三、创建目录"><a href="#三、创建目录" class="headerlink" title="三、创建目录"></a>三、创建目录</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir &#x2F;opt&#x2F;software 放软件安装包</span><br><span class="line">sudo mkdir &#x2F;opt&#x2F;module  放安装后的软件</span><br></pre></td></tr></table></figure><h1 id="四、修改用户名："><a href="#四、修改用户名：" class="headerlink" title="四、修改用户名："></a>四、修改用户名：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown nano:nano &#x2F;opt&#x2F;software &#x2F;opt&#x2F;module</span><br></pre></td></tr></table></figure><h1 id="四、安装jdk"><a href="#四、安装jdk" class="headerlink" title="四、安装jdk"></a>四、安装jdk</h1><p>下载jdk（下载一般服务器的jdk会显示版本不匹配，所以直接在线安装就可以）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano@nano1:~$ sudo apt install default-jdk</span><br></pre></td></tr></table></figure><p>查看java版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p>查看java安装路径<br>进入/usr/bin<br>查看java的软连接：<code>ls -l java</code><br><img src="https://img-blog.csdnimg.cn/20191024093631218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">切换到相应目录/etc/alternatives/java<br>查看java的软连接：ls -l java<br><img src="https://img-blog.csdnimg.cn/20191024093654988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>可知java的安装目录为：<code>/usr/lib/jvm/java-11-openjdk-arm64</code></p><p>配置java环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br></pre></td></tr></table></figure><p>添加如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#JAVA_HOME</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-11-openjdk-arm64</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=<span class="variable">$CLASSPATH</span>:.</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure><p>立即生效：<code>source /etc/profile</code><br>查看是否生效： <code>echo $JAVA_HOME</code><br><img src="https://img-blog.csdnimg.cn/20191024093756667.png" alt="在这里插入图片描述" loading="lazy"></p><h1 id="五、配置ssh无密码登录"><a href="#五、配置ssh无密码登录" class="headerlink" title="五、配置ssh无密码登录"></a>五、配置ssh无密码登录</h1><p>先ssh远程连接一下：<br><img src="https://img-blog.csdnimg.cn/20191024093822251.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>进行无密钥配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano@nano1:~/.ssh$ <span class="built_in">cd</span> ~/.ssh/</span><br></pre></td></tr></table></figure><p>使用rsa算法生成公钥和私钥：nano@nano1:~/.ssh$ ssh-keygen -t rsa<br>（一路回车就可以了，其中第一个是要输入公钥和私钥的保存位置，默认在.ssh/id_rsa,会看到如下提示）<br><img src="https://img-blog.csdnimg.cn/20191024093846407.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><blockquote><p>.ssh文件夹下的文件功能解释<br>（1）~/.ssh/known_hosts    ：记录ssh访问过计算机的公钥(publickey)<br>（2）id_rsa    ：生成的私钥<br>（3）id_rsa.pub    ：生成的公钥<br>（4）authorized_keys：存放授权过得无秘登录服务器公钥<br><img src="https://img-blog.csdnimg.cn/20191024093942355.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p></blockquote><ul><li><input disabled="" type="checkbox"> 将公钥拷贝到要免密登录的目标机器上（从101机器拷贝到所有机器上，包括自己）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano@nano1:~/.ssh$ ssh-copy-id 192.168.1.102</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/2019102409403088.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>再次远程ssh连接，这次不用密码就可以登录了<br><img src="https://img-blog.csdnimg.cn/20191024094058856.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>有关远程拷贝：<br>scp可以实现服务器与服务器之间的数据拷贝。<br><img src="https://img-blog.csdnimg.cn/20191024094130478.png" alt="在这里插入图片描述" loading="lazy"><br>六、安装rsync同步工具（rsync命令可以当成是高级版的cp+scp，它可以跨机器复制（同步）文件）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano@nano1:/opt/module/<span class="built_in">test</span>$ sudo apt-get install rsync</span><br></pre></td></tr></table></figure><strong>注意：每台机器都需要安装rsync同步工具，必须两两都有才能同步，要不然同步不了。</strong></li></ul><p>rsync远程同步工具，主要用于备份和镜像。具有速度快、避免复制相同内容和支持符号链接的优点。<br>（1）查看rsync使用说明 man rsync | more<br>（2）基本语法 rsync -rvl     $pdir/$fname         $user@hadoop$host:$pdir<br>        命令 命令参数 要拷贝的文件路径/名称   目的用户@主机:目的路径<br>    选项     -r 递归     -v 显示复制过程     -l 拷贝符号连接<br>（3）案例实操     把本机/opt/module/test/下的test.txt文件同步到nano2服务器的nano用户下的/opt/module/test/目录 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano@nano1:/opt/module$ rsync -rvl /opt/module/<span class="built_in">test</span>/test.txt nano@192.168.1.102:/opt/module/<span class="built_in">test</span>/</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191024094237354.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>扩展知识：</p><blockquote><p>使用notepad++ 安装NppFTP 远程连接Linux 如果出现如下问题</p><p>注意：（每台机器应该都要这样配） 解决： 切换到root用户，打开ssh配置文件sshd_config<br>root@nano2:/home/nano# vim /etc/ssh/sshd_config 再文件末尾添加如下内容：<br>KexAlgorithms diffie-hellman-group1-sha1,<a href="mailto:curve25519-sha256@libssh.org">curve25519-sha256@libssh.org</a>,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1<br>保存并退出。 重启ssh服务：root@nano2:/home/nano# service sshd restart</p></blockquote><h1 id="七、编写集群分发脚本xsync"><a href="#七、编写集群分发脚本xsync" class="headerlink" title="七、编写集群分发脚本xsync"></a>七、编写集群分发脚本xsync</h1><p>1）需求分析：循环复制文件到所有节点的相同目录下。<br>    （1）原始拷贝：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano@nano1:/opt/module$ rsync -rvl /opt/module nano@192.168.1.102:/opt/</span><br></pre></td></tr></table></figure><p>（2）期望脚本：<br>    xsync 要同步的文件名称<br>（3）在/usr/local/bin这个目录下存放的脚本，可以在系统任何地方直接执行，需要制定路径。<br>2）案例实操：<br>    （1）在/usr/local/bin目录下创建xsync文件，文件内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#1 获取输入参数个数，如果没有参数，直接退出</span></span><br><span class="line">pcount=<span class="variable">$#</span></span><br><span class="line"><span class="keyword">if</span>((pcount==0));<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> no args;</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2 获取文件名称</span></span><br><span class="line">p1=<span class="variable">$1</span></span><br><span class="line">fname=`basename <span class="variable">$p1</span>`</span><br><span class="line"><span class="built_in">echo</span> fname=<span class="variable">$fname</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3 获取上级目录到绝对路径</span></span><br><span class="line">pdir=`<span class="built_in">cd</span> -P $(dirname <span class="variable">$p1</span>); <span class="built_in">pwd</span>`</span><br><span class="line"><span class="built_in">echo</span> pdir=<span class="variable">$pdir</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4 获取当前用户名称</span></span><br><span class="line">user=`whoami`</span><br><span class="line"></span><br><span class="line"><span class="comment">#5 分发到其它集群上</span></span><br><span class="line"><span class="keyword">for</span>((host=102;host&lt;=102;host++));<span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> ----------192.168.1.<span class="variable">$host</span>-----------</span><br><span class="line">        rsync -rvl <span class="variable">$pdir</span>/<span class="variable">$fname</span> <span class="variable">$user</span>@192.168.1.<span class="variable">$host</span>:<span class="variable">$pdir</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> 上面循环中的ip地址随着集群的增大进行更改（只在101机器上改）<br> （2）修改脚本 xsync 具有执行权限<pre><code>nano@nano1:/usr/local/bin$ chmod a+x xsync</code></pre>（3）调用脚本形式：xsync 文件名称<br><img src="https://img-blog.csdnimg.cn/201910240944510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><h1 id="八、编写分发脚本xcall"><a href="#八、编写分发脚本xcall" class="headerlink" title="八、编写分发脚本xcall"></a>八、编写分发脚本xcall</h1>1）需求分析：在所有主机上同时执行相同的命令<br> xcall +命令<br>2）具体实现<br> （1）在/usr/local/bin目录下创建xcall文件，文件内容如下：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">pcount=<span class="variable">$#</span></span><br><span class="line"><span class="keyword">if</span>((pcount==0));<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> no args;</span><br><span class="line">        <span class="built_in">exit</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> ----------localhost------------</span><br><span class="line"><span class="variable">$@</span></span><br><span class="line"><span class="keyword">for</span>((host=102;host&lt;=102;host++));<span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> -----------192.168.1.<span class="variable">$host</span>----------------</span><br><span class="line">        ssh 192.168.1.<span class="variable">$host</span> <span class="variable">$@</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>（2）修改脚本 xcall 具有执行权限<pre><code>nano@nano1:/usr/local/bin$ chmod a+x xcall</code></pre>（3）调用脚本形式： xcall 操作命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano@nano1:/usr/<span class="built_in">local</span>/bin$ xcall rm -r /opt/module/<span class="built_in">test</span>/</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20191024094647496.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><h1 id="九、配置-etc-hosts，添加ip-主机名，注释前两行"><a href="#九、配置-etc-hosts，添加ip-主机名，注释前两行" class="headerlink" title="九、配置/etc/hosts，添加ip 主机名，注释前两行"></a>九、配置/etc/hosts，添加ip 主机名，注释前两行</h1>（每台机器都要）<br><img src="https://img-blog.csdnimg.cn/20191024094712688.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><h1 id="十、安装hadoop"><a href="#十、安装hadoop" class="headerlink" title="十、安装hadoop"></a>十、安装hadoop</h1>解压到指定目录<br>nano@nano1:/opt/software$ tar -xzvf hadoop-2.7.2.tar.gz -C /opt/module/</li></ul><p>配置hadoop</p><h2 id="1-将hadoop添加到环境变量"><a href="#1-将hadoop添加到环境变量" class="headerlink" title="1. 将hadoop添加到环境变量"></a>1. 将hadoop添加到环境变量</h2><pre><code>获取Hadoop安装路径：pwd</code></pre><p><img src="https://img-blog.csdnimg.cn/20191024094735403.png" alt="在这里插入图片描述" loading="lazy"><br>    打开profile：sudo vim /etc/profile<br>    添加如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#HADOOP_HOME</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME=/opt/module/hadoop-2.7.2</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HADOOP_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HADOOP_HOME</span>/sbin</span><br></pre></td></tr></table></figure><p>设置生效：source /etc/profile<br>查看是否生效：<br><img src="https://img-blog.csdnimg.cn/20191024094823418.png" alt="在这里插入图片描述" loading="lazy"><br>    如果不能生效，重启试一试,，切换到root下，执行如下：<br>    sync<br>    Reboot</p><h2 id="2-配置hadoop-env-sh"><a href="#2-配置hadoop-env-sh" class="headerlink" title="2. 配置hadoop-env.sh"></a>2. 配置hadoop-env.sh</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano@nano1:/opt/module/hadoop-2.7.2/etc/hadoop$ vim hadoop-env.sh</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191024094856168.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-11-openjdk-arm64</span><br></pre></td></tr></table></figure><ol><li>配置core-site.xml（提前建好目录地址）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;!--指定HDFS中namenode地址--&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;fs.defaultFS&lt;&#x2F;name&gt;</span><br><span class="line">                &lt;value&gt;hdfs:&#x2F;&#x2F;192.168.1.101:9000&lt;&#x2F;value&gt;</span><br><span class="line">        &lt;&#x2F;property&gt;</span><br><span class="line">        &lt;!--指定hadoop运行时产生的存储目录--&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;hadoop.tmp.dir&lt;&#x2F;name&gt;</span><br><span class="line">                &lt;value&gt;&#x2F;opt&#x2F;module&#x2F;hadoop-2.7.2&#x2F;data&#x2F;tmp&lt;&#x2F;value&gt;</span><br><span class="line">        &lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>配置hdfs-site.xml（提前建好目录地址）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;!--指定HDFS副本的数量--&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.replication&lt;&#x2F;name&gt;</span><br><span class="line">                &lt;value&gt;3&lt;&#x2F;value&gt;</span><br><span class="line">        &lt;&#x2F;property&gt;</span><br><span class="line">        &lt;!--指定secondnamenode地址--&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.namenode.secondary.http-address&lt;&#x2F;name&gt;</span><br><span class="line">                &lt;value&gt;192.168.1.102:50090&lt;&#x2F;value&gt;</span><br><span class="line">        &lt;&#x2F;property&gt;</span><br><span class="line">        &lt;!--指定namenode的存放目录--&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                  &lt;name&gt;dfs.namenode.name.dir&lt;&#x2F;name&gt;</span><br><span class="line">                  &lt;value&gt;&#x2F;opt&#x2F;module&#x2F;hadoop-2.7.2&#x2F;data&#x2F;hadoop&#x2F;name&lt;&#x2F;value&gt;</span><br><span class="line">        &lt;&#x2F;property&gt;</span><br><span class="line">         &lt;!--指定datanode存放的目录地址--&gt;</span><br><span class="line">         &lt;property&gt;</span><br><span class="line">                &lt;name&gt;dfs.datanode.data.dir&lt;&#x2F;name&gt;</span><br><span class="line">                &lt;value&gt;&#x2F;opt&#x2F;module&#x2F;hadoop-2.7.2&#x2F;data&#x2F;hadoop&#x2F;data&lt;&#x2F;value&gt;</span><br><span class="line">         &lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>配置yarn-env.sh<br> export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-arm64</li><li>配置yarn-site.xml<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Site specific YARN configuration properties --&gt;</span><br><span class="line">&lt;!--reducer获取数据的方式--&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.nodemanager.aux-services.mapreduce.shuffle.class&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;org.apache.hadoop.mapred.ShuffleHandler&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;!--指定yarn的resourcemanager地址--&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;192.168.1.101&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;!-- 日志聚集功能使能 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.log-aggregation-enable&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;<span class="literal">true</span>&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;!-- 日志保留时间设置7天 单位/秒 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.log-aggregation.retain-seconds&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;604800&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--容器是否受虚拟内存限制--&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.nodemanager.vmem-check-enabled&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;<span class="literal">false</span>&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;!--容器是否受物理内存限制--&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.nodemanager.pmem-check-enabled&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;<span class="literal">false</span>&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.resourcemanager.address&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;192.168.1.101:8032&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.resourcemanager.scheduler.address&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;192.168.1.101:8030&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.resourcemanager.resource-tracker.address&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;192.168.1.101:8031&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line"> &lt;name&gt;yarn.resourcemanager.admin.address&lt;/name&gt;</span><br><span class="line">         &lt;value&gt;192.168.1.101:8033&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;!--根据自己电脑内存来配--&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.nodemanager.resource.memory-mb&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;3072&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">         &lt;name&gt;yarn.scheduler.maximum-allocation-mb&lt;/name&gt;</span><br><span class="line">         &lt;value&gt;3072&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">         &lt;name&gt;yarn.scheduler.minimum-allocation-mb&lt;/name&gt;</span><br><span class="line">         &lt;value&gt;1024&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li>配置mapred-env.sh<br> export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-arm64</li><li>配置mapred-site.xml (对template重命名)<br> cp mapred-site.xml.template mapred-site.xml<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;!--指定mr运行在yarn上--&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!--配置job历史服务地址--&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;192.168.1.101:10020&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!--配置job的webapp历史服务地址--&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;192.168.1.101:19888&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!--根据自己电脑配置来配--&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;mapreduce.map.memeory.mb&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;1024&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;mapreduce.map.java.opts&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;-Xmx819m&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;mapreduce.reduce.memory.mb&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;2048&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;mapreduce.reduce.java.opts&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;-Xmx1638m&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;mapred.map.tasks&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;64&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;mapred.reduce.tasks&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;64&lt;/value&gt;</span><br><span class="line">       &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li>配置slaves<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.1.102</span><br></pre></td></tr></table></figure></li></ol><p><strong><em>注意：集群扩大，slaves随着增加</em></strong><br>其他机器上需要独立安装：jdk，rsync，ntp安装步骤见前面,后面。</p><h1 id="十一、分发集群文件"><a href="#十一、分发集群文件" class="headerlink" title="十一、分发集群文件"></a>十一、分发集群文件</h1><p>xsync /opt/module</p><h1 id="十二、集群启动"><a href="#十二、集群启动" class="headerlink" title="十二、集群启动"></a>十二、集群启动</h1><p>集群部署规划<br><img src="https://img-blog.csdnimg.cn/20191024095612671.png" alt="在这里插入图片描述" loading="lazy"></p><ol><li><p>如果是第一次启动集群，需要格式化namenode<br>nano@nano1:/opt/module/hadoop-2.7.2$ bin/hdfs namenode -format<br><img src="https://img-blog.csdnimg.cn/2019102409563779.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p></li><li><p>Hadoop启动停止方式<br> 1）各个服务组件逐一启动</p><pre><code>（1）分别启动hdfs组件    hadoop-daemon.sh  start|stop  namenode|datanode|secondarynamenode（2）启动yarn    yarn-daemon.sh  start|stop  resourcemanager|nodemanager</code></pre><p> 2）各个模块分开启动（配置ssh是前提）常用</p><pre><code>（1）整体启动/停止hdfs    start-dfs.sh    nano@nano1:/opt/module/hadoop-2.7.2$ sbin/start-dfs.sh ![在这里插入图片描述](https://img-blog.csdnimg.cn/20191024095717145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70)    ![在这里插入图片描述](https://img-blog.csdnimg.cn/20191024095738575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70)    stop-dfs.sh</code></pre><p>（2）整体启动/停止yarn</p><pre><code>start-yarn.shnano@nano1:/opt/module/hadoop-2.7.2$ sbin/start-yarn.sh </code></pre><p><img src="https://img-blog.csdnimg.cn/20191024095827576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">)<img src="https://img-blog.csdnimg.cn/20191024095836756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><pre><code>stop-yarn.sh    3）全部启动（不建议使用）        start-all.sh        stop-all.sh</code></pre><p> 4）可能出现的问题及解决方案：<br> <a href="https://www.cnblogs.com/kinglau/p/3796274.html" target="_blank" rel="noopener">执行start-dfs.sh后，datenode没有启动</a></p><h1 id="十三、集群测试"><a href="#十三、集群测试" class="headerlink" title="十三、集群测试"></a>十三、集群测试</h1></li><li><p>上传文件到集群<br>创建文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano@nano1:/opt/module/hadoop-2.7.2$ bin/hdfs dfs -mkdir -p /user/hehuan/<span class="built_in">test</span>/input</span><br></pre></td></tr></table></figure><p>上传文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano@nano1:/opt/module/hadoop-2.7.2$ bin/hdfs dfs -put /opt/software/hadoop-2.7.2.tar.gz /user/hehuan/<span class="built_in">test</span>/input</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano@nano1:/opt/module/hadoop-2.7.2$ bin/hdfs dfs -put README.txt /user/hehuan/<span class="built_in">test</span>/input</span><br></pre></td></tr></table></figure></li><li><p>对文件进行处理<br> yarn上运行mapreduce程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano@nano1:/opt/module/hadoop-2.7.2$ bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.2.jar wordcount /user/hehuan/<span class="built_in">test</span>/input/README.txt /user/hehuan/<span class="built_in">test</span>/output</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191024100033621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p></li><li><p>查看文件内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano@nano1:/opt/module/hadoop-2.7.2$ bin/hdfs dfs -cat /user/hehuan/<span class="built_in">test</span>/output/*</span><br></pre></td></tr></table></figure></li><li><p>从集群下载文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano@nano1:/opt/module/hadoop-2.7.2$ bin/hdfs dfs -get /user/hehuan/<span class="built_in">test</span>/output/* ./data/tmp</span><br></pre></td></tr></table></figure></li><li><p>删除集群上的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano@nano1:/opt/module/hadoop-2.7.2$ bin/hdfs dfs -rm -r /user/hehuan/<span class="built_in">test</span>/input/hadoop-2.7.2.tar.gz</span><br></pre></td></tr></table></figure></li></ol><h1 id="十四、设置集群时间同步"><a href="#十四、设置集群时间同步" class="headerlink" title="十四、设置集群时间同步"></a>十四、设置集群时间同步</h1><ol><li>首先master节点下载ntp，ntpdate同步时间工具</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano@nano1:/opt/module/hadoop-2.7.2$ sudo apt-get install ntp ntpdate</span><br></pre></td></tr></table></figure><ol start="2"><li>修改/etc/ntp.conf配置文件<br>修改如下（表示从IP地址192.168.1.0-192.168.1.254，默认网关255.255.255.0的服务器都可以使用我们的NTP服务器来同步时间）<br>restrict 192.168.1.0 mask 255.255.255.0 nomodify notrap<br><img src="https://img-blog.csdnimg.cn/20191027134035306.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li><li>重启ntp服务（ntpdate执行时ntp必须关闭才可以执行）<br> 先ntpdate同步网络时间<br> root@nano1:~/.ssh# ntpdate cn.pool.ntp.org<br> 然后启动ntp服务<br> root@nano1:/opt/module/hadoop-2.7.2# service ntp stop<br> root@nano1:/opt/module/hadoop-2.7.2# service ntp status<br> root@nano1:/opt/module/hadoop-2.7.2# service ntp start<br> root@nano1:/opt/module/hadoop-2.7.2# service ntp status</li><li>slave的机器上进行定时同步时间(和master同步)<br>先下载ntpdate<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano@nano2:/opt/module/hadoop-2.7.2$ sudo apt-get install ntpdate</span><br></pre></td></tr></table></figure>切换到root用户下，添加定时任务<br>crontab -e<br>设置每分钟同步一次，并写入硬件中（192.168.1.101是master的ip）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* * * * * /usr/sbin/ntpdate 192.168.1.101;/sbin/hwlocal -w</span><br></pre></td></tr></table></figure>ok</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机里的linux磁盘空间扩容</title>
      <link href="/2020/06/01/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%87%8C%E7%9A%84linux%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%89%A9%E5%AE%B9/"/>
      <url>/2020/06/01/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%87%8C%E7%9A%84linux%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E6%89%A9%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<p>之前给虚拟机里装了linux系统，但是安装的时候没有想太多，只分了20G，后来安装的东西越来越多，导致linux的磁盘空间不足了，所以就在网上找各种解决办法怎么扩容。如果只是重新再分一个区的话，比较简单的，但是我想要给磁盘主分区再加空间的，所以有点麻烦，特此记录一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">本人配置情况：</span><br><span class="line">电脑：MacBook</span><br><span class="line">虚拟机：VMware Fusion</span><br><span class="line">虚拟机里的系统：CentOS 6 64位</span><br></pre></td></tr></table></figure><p>首先查看自己的磁盘空间情况：<code>[root@data1 桌面]# df -hl</code><br><img src="https://img-blog.csdnimg.cn/20190905122243903.png" alt="在这里插入图片描述" loading="lazy"><br>可以看到，我的根目录/下只有2.1G的空间了，快要满了。我现在要将根目录/的空间变大。<br>（操作之前，最好先备份系统中的数据，防止丢失，，，不过，我当时没有备份也操作成功了）</p><h3 id="第一步：先下载一个GParted分区工具，我下的是gparted-live-1-0-0-3-amd64-iso，下载最新的即可。"><a href="#第一步：先下载一个GParted分区工具，我下的是gparted-live-1-0-0-3-amd64-iso，下载最新的即可。" class="headerlink" title="第一步：先下载一个GParted分区工具，我下的是gparted-live-1.0.0-3-amd64.iso，下载最新的即可。"></a>第一步：先下载一个<a href="https://gparted.org/" target="_blank" rel="noopener">GParted分区工具</a>，我下的是gparted-live-1.0.0-3-amd64.iso，下载最新的即可。</h3><h3 id="第二步：先手动给磁盘加空间。"><a href="#第二步：先手动给磁盘加空间。" class="headerlink" title="第二步：先手动给磁盘加空间。"></a>第二步：先手动给磁盘加空间。</h3><pre><code>先选中你要操作的linux系统，进到设置-&gt;硬盘</code></pre><p><img src="https://img-blog.csdnimg.cn/20190905123659360.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>我的本来是20G，我现在想增大到40G， 直接拖动游标往后就可以了，再点击应用（注意：修改磁盘空间之前系统要关机）<br><img src="https://img-blog.csdnimg.cn/2019090512405566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">)<img src="https://img-blog.csdnimg.cn/20190905124500539.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br> 但是上面的操作并不能马上让你的linux拥有真正的40G空间，因为新增的这20G还没分区呢。</p><h3 id="第三步，刚刚下载的GPrated工具派上用场了，这次进入：设置-gt-CD-DVD-IDE-，找到你的将你gparted-iso，将CD-DVD启动器改成GParted的-iso镜像文件。"><a href="#第三步，刚刚下载的GPrated工具派上用场了，这次进入：设置-gt-CD-DVD-IDE-，找到你的将你gparted-iso，将CD-DVD启动器改成GParted的-iso镜像文件。" class="headerlink" title="第三步，刚刚下载的GPrated工具派上用场了，这次进入：设置-&gt;CD/DVD(IDE)，找到你的将你gparted-*.iso，将CD/DVD启动器改成GParted的.iso镜像文件。"></a>第三步，刚刚下载的GPrated工具派上用场了，这次进入：设置-&gt;CD/DVD(IDE)，找到你的将你gparted-*.iso，将CD/DVD启动器改成GParted的.iso镜像文件。</h3><p><img src="https://img-blog.csdnimg.cn/20190905124555681.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h3 id="第四步，启动Bios设置，在linux系统开机的时候狂按F2键-然后进入Boot设置，将启动改为CD-ROM-Driver，但是吧，我这里出了些小插曲。。。第一件事情就是，我按F2的时候没有进入这个界面"><a href="#第四步，启动Bios设置，在linux系统开机的时候狂按F2键-然后进入Boot设置，将启动改为CD-ROM-Driver，但是吧，我这里出了些小插曲。。。第一件事情就是，我按F2的时候没有进入这个界面" class="headerlink" title="第四步，启动Bios设置，在linux系统开机的时候狂按F2键,然后进入Boot设置，将启动改为CD-ROM Driver，但是吧，我这里出了些小插曲。。。第一件事情就是，我按F2的时候没有进入这个界面"></a>第四步，启动Bios设置，在linux系统开机的时候狂按F2键,然后进入Boot设置，将启动改为CD-ROM Driver，但是吧，我这里出了些小插曲。。。第一件事情就是，我按F2的时候没有进入这个界面</h3><p><img src="https://img-blog.csdnimg.cn/20190905125142783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>而是进到了这个界面，然后我就很蒙，因为我不太懂系统的这些操作，所以就一直尝试进bios，但是没进去，后来才知道，不是按一下F2就可以的，<code>要在开机的时候多按几下，</code>所以我前面说要狂按，不过我想也只有我这么傻了吧，Bios都不会进。。。。<br><img src="https://img-blog.csdnimg.cn/20190905125254899.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>第二件事情就是，我终于进去Bios界面，发现有些设置不能修改，(这是之前的一个虚拟机截图)下图的右边显示：All items on this menu cannot be modified in user mode.If any items require changes,please consult your system Supervisor。。意思就是说我没有权限。。哎呀，真是多磨难。<br><img src="https://img-blog.csdnimg.cn/20190905125714280.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>然后查找了资料，发现了解决办法：先进入你的这个系统在虚拟机里存放的位置，是一个.vmwarevm文件，现在我要操作的是CentOS6_1这台虚拟机，<img src="https://img-blog.csdnimg.cn/2019090513020964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>如果不知道自己的系统文件存放位置，可以看看设置-&gt;硬盘，这个虚拟磁盘.vmdk就是CentOS6_1.vmwarevm目录下的一个文件，所以我的.vmwarevm就是在/Users/hehuan/Virtual Machines.localized目录下。<br><img src="https://img-blog.csdnimg.cn/20190905130547144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>右击CentOS6_1.vmwarevm-&gt;显示包内容，看的一个.vmx文件，打开它，可以用Sublime Text或者其它编辑软件打开。<br><img src="https://img-blog.csdnimg.cn/20190905131202321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>看到bios.bootOrder=。。。这个，<code>删除102行整行</code>，然后保存文件。<br><img src="https://img-blog.csdnimg.cn/20190905131514924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>好，现在再进入Bios设置时就不会出现没有权限的问题了。以上就是我遇到的坑，唉，发现自己好笨，就这个坑，自己研究了一天。。。<br>接下来继续第四步，，选中CD-ROM Drive ，，然后按+号，将CD-ROM Driver移动到最上面。然后保存并退出，，这样启动的时候就能进GPrated工具了。<br><img src="https://img-blog.csdnimg.cn/20190905131826644.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">)<img src="https://img-blog.csdnimg.cn/20190905132229668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20190905132236623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h3 id="第五步：终于进来了，太不容易了，我真的太难了，选择第一个Gparted-Live-Default-settings-默认的点进去"><a href="#第五步：终于进来了，太不容易了，我真的太难了，选择第一个Gparted-Live-Default-settings-默认的点进去" class="headerlink" title="第五步：终于进来了，太不容易了，我真的太难了，选择第一个Gparted Live(Default settings)默认的点进去"></a>第五步：终于进来了，太不容易了，我真的太难了，选择第一个Gparted Live(Default settings)默认的点进去</h3><p><img src="https://img-blog.csdnimg.cn/20190905132350135.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h3 id="第六步：Don’t-touch-keymap（默认的）-回车。然后会出现选择语言啊等等的，直接一路回车选择默认的即可。"><a href="#第六步：Don’t-touch-keymap（默认的）-回车。然后会出现选择语言啊等等的，直接一路回车选择默认的即可。" class="headerlink" title="第六步：Don’t touch keymap（默认的）,回车。然后会出现选择语言啊等等的，直接一路回车选择默认的即可。"></a>第六步：Don’t touch keymap（默认的）,回车。然后会出现选择语言啊等等的，直接一路回车选择默认的即可。</h3><p><img src="https://img-blog.csdnimg.cn/20190905132620225.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h3 id="第七步：终于到关键的时候了"><a href="#第七步：终于到关键的时候了" class="headerlink" title="第七步：终于到关键的时候了"></a>第七步：终于到关键的时候了</h3><p>可以看到，我的主分区/dev/sda3也就是我根目录/所在的位置一共有17.8个G，现在使用了15.06G了，还有刚刚新加的磁盘空间20G处于未分配状态，我们可以给这20G重新分成一个新的区，也可以直接和主分区合并，我选择第二种，就是将sda3的空间变大。<br><img src="https://img-blog.csdnimg.cn/20190905132933941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h3 id="第八步：选择sda3，点击partition-gt-resize-move"><a href="#第八步：选择sda3，点击partition-gt-resize-move" class="headerlink" title="第八步：选择sda3，点击partition-&gt;resize/move"></a>第八步：选择sda3，点击partition-&gt;resize/move</h3><p><img src="https://img-blog.csdnimg.cn/20190905133301933.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h3 id="第九步：可以看到目前的分区szie"><a href="#第九步：可以看到目前的分区szie" class="headerlink" title="第九步：可以看到目前的分区szie"></a>第九步：可以看到目前的分区szie</h3><p>可以看到，Free space有20480M，也就是20G，现在将New size增加到最大，38711M，点击Resize/Move按钮就可以了。<br><img src="https://img-blog.csdnimg.cn/20190905133517713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20190905133946145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h3 id="第十步：查看最终操作结果"><a href="#第十步：查看最终操作结果" class="headerlink" title="第十步：查看最终操作结果"></a>第十步：查看最终操作结果</h3><p>可以看到，我的根目录现在有37.8G的空间了，终于又可以肆无忌惮的装软件了，装各种环境了，最后，保存此次的所有操作就可以了。<br><img src="https://img-blog.csdnimg.cn/20190905134258641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20190905134038829.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>重新开机，看看磁盘空间的变化，嘿嘿，扩容成功。<br><img src="https://img-blog.csdnimg.cn/20190905134610138.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>我觉的再这样下去，我真的要成运维人员了。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设置Spark运行程序时不显示log信息</title>
      <link href="/2020/06/01/%E8%AE%BE%E7%BD%AESpark%E8%BF%90%E8%A1%8C%E7%A8%8B%E5%BA%8F%E6%97%B6%E4%B8%8D%E6%98%BE%E7%A4%BAlog%E4%BF%A1%E6%81%AF/"/>
      <url>/2020/06/01/%E8%AE%BE%E7%BD%AESpark%E8%BF%90%E8%A1%8C%E7%A8%8B%E5%BA%8F%E6%97%B6%E4%B8%8D%E6%98%BE%E7%A4%BAlog%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="在IDEA中设置不要显示spark的log信息"><a href="#在IDEA中设置不要显示spark的log信息" class="headerlink" title="在IDEA中设置不要显示spark的log信息"></a>在IDEA中设置不要显示spark的log信息</h2><p>需要导入的包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.log4j.Logger</span><br><span class="line">import org.apache.log4j.Level</span><br></pre></td></tr></table></figure><ul><li>第一种方式：在main函数中设置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def main(args:Array[String]):Unit&#x3D;&#123;</span><br><span class="line">Logger.getLogger(&quot;org&quot;).setLevel(Level.OFF)</span><br><span class="line">System.setProperty(&quot;spark.ui.showConsoleProgress&quot;,&quot;false&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>第二种方式：定义成一个函数，直接调用（建议使用这种，代码复用性强）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def SetNoLogger&#x3D;&#123;</span><br><span class="line">Logger.getLogger(&quot;org&quot;).setLevel(Level.OFF)</span><br><span class="line">Logger.getLogger(&quot;com&quot;).setLevel(Level.OFF)</span><br><span class="line">System.setProperty(&quot;Spark.ui.showConsoleProgress&quot;,&quot;false&quot;)</span><br><span class="line">Logger.getRootLogger().setLevel(Level.OFF)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac电脑上的VMware Fusion安装CentoOS 6设置静态ip</title>
      <link href="/2020/06/01/Mac%E7%94%B5%E8%84%91%E4%B8%8A%E7%9A%84VMware-Fusion%E5%AE%89%E8%A3%85CentoOS-6%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81ip/"/>
      <url>/2020/06/01/Mac%E7%94%B5%E8%84%91%E4%B8%8A%E7%9A%84VMware-Fusion%E5%AE%89%E8%A3%85CentoOS-6%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81ip/</url>
      
        <content type="html"><![CDATA[<p><strong><code>1、首先，查看vmnet8的设置，在Mac电脑的终端上打开/Library/Preferences/VMware\ Fusion/vmnet8中的dhcpd.conf</code></strong><br>出现如下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">subnet 192.168.8.0 netmask 255.255.255.0 &#123;</span><br><span class="line">        range 192.168.8.128 192.168.8.254;</span><br><span class="line">        option broadcast-address 192.168.8.255;</span><br><span class="line">        option domain-name-servers 192.168.8.2;</span><br><span class="line">        option domain-name localdomain;</span><br><span class="line">        default-lease-time 1800;                # default is 30 minutes</span><br><span class="line">        max-lease-time 7200;                    # default is 2 hours</span><br><span class="line">        option netbios-name-servers 192.168.8.2;</span><br><span class="line">        option routers 192.168.8.2;</span><br><span class="line">&#125;</span><br><span class="line">host vmnet8 &#123;</span><br><span class="line">        hardware ethernet 00:50:56:C0:00:08;</span><br><span class="line">        fixed-address 192.168.8.1;</span><br><span class="line">        option domain-name-servers 0.0.0.0;</span><br><span class="line">        option domain-name &quot;&quot;;</span><br><span class="line">        option routers 0.0.0.0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">range 192.168.8.128 192.168.8.254;是虚拟机可分配的地址范围</span><br><span class="line">netmask 255.255.255.0  是子网掩码</span><br><span class="line">option broadcast-address 192.168.8.255; 广播地址</span><br><span class="line">option routers 192.168.8.2; 网关</span><br></pre></td></tr></table></figure><p>2、$ <strong>cd /etc/sysconfig/network-scripts/</strong><br>找到网卡配置文件，并打开（不同linux系统配置文件名字可能不一样，但都是ifcfg-开头的）<br>可以先ifconfig查看一下系统的网卡名称。我的是eth0<br><img src="https://img-blog.csdnimg.cn/20190819163632711.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="ifconfig" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20190819163708209.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt=" " loading="lazy">$ <strong>sudo vim ifcfg-eth0</strong><br>修改并添加如下内容：<br><img src="https://img-blog.csdnimg.cn/20190819163802700.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>[root@data1 ~]# <strong>service network restart</strong><br><img src="https://img-blog.csdnimg.cn/20190819163838985.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><pre><code>注意：重启网络之前，看看连接网络适配器是否勾选了！一定要勾选</code></pre><p><img src="https://img-blog.csdnimg.cn/20190819163900434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu下crontab定时任务详细总结</title>
      <link href="/2020/06/01/Ubuntu%E4%B8%8Bcrontab%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/"/>
      <url>/2020/06/01/Ubuntu%E4%B8%8Bcrontab%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="1、定义："><a href="#1、定义：" class="headerlink" title="1、定义："></a>1、定义：</h3><p>cron是服务名称，crond是后台进程，cron的配置文件称为“crontab”，是“cron table”的简写，crontab是定制好的计划任务表。<br><strong>cron服务提供crontab命令来设定cron服务的。</strong></p><h3 id="2、安装："><a href="#2、安装：" class="headerlink" title="2、安装："></a>2、安装：</h3><p>安装：<code>apt-get install cron</code><br>一般情况下ubuntu自带cron服务</p><h3 id="3、crond服务操作命令"><a href="#3、crond服务操作命令" class="headerlink" title="3、crond服务操作命令"></a>3、crond服务操作命令</h3><p><code>/sbin/service crond start //启动服务</code><br><code>/sbin/service crond stop //关闭服务</code><br><code>/sbin/service crond restart //重启服务</code><br><code>/sbin/service crond reload //重新载入配置</code><br><code>service cron status //检查状态</code><br><code>service cron //查询cron可用的命令</code><br> 查看服务是否已经启动 <code>ps -ax | grep cron</code></p><h3 id="4、crontab命令"><a href="#4、crontab命令" class="headerlink" title="4、crontab命令"></a>4、crontab命令</h3><pre><code>crontab -u //设定某个用户的cron服务                     -u指定一个用户crontab -l //列出某个用户cron服务的详细内容              -l列出某个用户的任务计划crontab -r //删除没个用户的cron服务                     -r删除某个用户的任务crontab -e //编辑某个用户的cron服务                     -e编辑某个用户的任务</code></pre><h3 id="5、crontab任务配置基本格式"><a href="#5、crontab任务配置基本格式" class="headerlink" title="5、crontab任务配置基本格式"></a>5、crontab任务配置基本格式</h3><pre><code> 分    小时     日     月     星期     命令0-59   0-23   1-31   1-12    0-6    command     (取值范围,0表示周日、一般一行对应一个任务)</code></pre><p>其中：</p><ul><li><p>“*”代表取值范围内的数字，星号可以用来代表所有有效的值，例：分钟值中的星号意味着在满足其它制约条件后每分都执行该命令。</p></li><li><p>“/”代表”每”，正斜线（/）可以用来指定间隔频率，例：*/3 的值可以用在小时字段中表示每三小时运行一次任务。</p></li><li><p>“-”代表从某个数字到某个数字，整数间的短线（-）指定一个整数范围。例：1-3 意味着整数 1、2、3</p></li><li><p>“,”分开几个离散的数字，用逗号（,）隔开的一系列值指定一个列表。例：2, 4, 7 标明这3个指定的整数<br>开头为井号（#）的行是注释，不会被处理。 </p><h3 id="6、添加定时任务方法"><a href="#6、添加定时任务方法" class="headerlink" title="6、添加定时任务方法"></a>6、添加定时任务方法</h3><p>第一种编辑：键入命令：<code>crontab -e</code> 进行编辑cron服务 （选择vim编辑器）</p><ul><li><ul><li><ul><li><ul><li><ul><li>/opt/module/test.sh     #每分钟执行/opt/module下的test.sh脚本</li></ul></li></ul></li></ul></li></ul></li><li>/5 * * * * /opt/module/test.sh   #每5分钟执行/opt/module下的test.sh脚本<br>30 1 10,20 * * ls                 #每月10号、20号的1：30执行ls命令<br>0,30 18-23 * * * reboot           #每天18 : 00至23 : 00之间每隔30分钟重启电脑</li><li>23-7/1 * * * date &gt;&gt;/log.txt    #晚上23点到早上7点之间，每隔一小时将时间打印到/log.txt文本文件中<br>30 5 * * * ls &gt;/jp/test 2&gt;&amp;1      #每天5：30执行ls命令，并把结果输出到/jp/test文件中  <pre><code>#注：2&gt;&amp;1 表示执行结果及错误信息。</code></pre>·    按esc退出编辑模式进入普通模式，输入:x或:wq保存退出<br>键入命令：<code>crontab -l</code> 查看刚刚写入crontab命令</li></ul></li></ul><p>第二种编辑：直接编辑/etc/crontab 文件，即vi /etc/crontab，添加相应的任务如： 11 2 21 10 * rm -rf /mnt/fb  </p><p>第三种编辑：  <strong>注意：这操作是直接替换该用户下的crontab，而不是新增</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第一步：写cron脚本文件,命名为crontest.cron。</span><br><span class="line">15,30,45,59 * * * * echo &quot;test.....&quot; &gt;&gt; &#x2F;opt&#x2F;module&#x2F;test.txt  表示，每隔15分钟，执行打印一次命令 </span><br><span class="line">第二步：添加定时任务。执行命令 crontab crontest.cron。 </span><br><span class="line">第三步：crontab -l 查看定时任务是否成功或者检测&#x2F;var&#x2F;spool&#x2F;cron下是否生成对应cron脚本</span><br></pre></td></tr></table></figure><h3 id="7、crontab定时任务没有执行的可能原因"><a href="#7、crontab定时任务没有执行的可能原因" class="headerlink" title="7、crontab定时任务没有执行的可能原因"></a>7、crontab定时任务没有执行的可能原因</h3><ul><li>脚本的原因：大多数情况下，我们要相信科学，相信计算机，不是有鬼，就是我们的脚本的问题，这种问题导致crontab不能执行的概率占到 70%以上。因为程序执行到某一步导致crontab终止执行，我就碰到一次在迁移代码的时候将数据库连错了。导致无法访问而死在那里了。</li><li>执行环境问题，当我们碰到第一情况下，一般都可以通过手动执行程序将问题扼杀在摇篮里，一般情况下高手是不应该犯第一种错误的。问题是当我们 手动执行成功而crontab不能执行的时候，笔者碰到一次就是执行环境的问题，例如相关路径的设置问题。解决方案：在代码最前面执行 source /home/user/.bash_profile</li><li>系统时间不正确。这种问题最好理解，也是比较常见和隐蔽的问题，解决方案：date -s <strong>****</strong></li><li>就是我们的脚本是否有可执行权限。必须保证执行脚本的用户有执行改文件的权限。</li><li>crontab 守护进程死掉了。这种情况是极少发生的，但也不排除，当我们实在是找不到其他原因的时候可以用。解决方案：重启该进程。</li><li>crontab -u root /var/spool/cron/root   这样root用户的crontab就生效了   service crond restart 重启下服务</li><li>crond没有启动</li><li>脚本编码问题，脚本在window下编写，传到linux下后乱码，用vi编辑器新建新shell脚本，输入内容后保存。<h3 id="8、crontab权限问题"><a href="#8、crontab权限问题" class="headerlink" title="8、crontab权限问题"></a>8、crontab权限问题</h3>到/var/adm/cron/下一看，文件cron.allow和cron.deny是否存在<br>用法如下：<br>1、如果两个文件都不存在，则只有root用户才能使用crontab命令。<br>2、如果cron.allow存在但cron.deny不存在，则只有列在cron.allow文件里的用户才能使用crontab命令，如果root用户也不在里面，则root用户也不能使用crontab。<br>3、如果cron.allow不存在, cron.deny存在，则只有列在cron.deny文件里面的用户不能使用crontab命令，其它用户都能使用。<br>4、如果两个文件都存在，则列在cron.allow文件中而且没有列在cron.deny中的用户可以使用crontab，如果两个文件中都有同一个用户，以cron.allow文件里面是否有该用户为准，如果cron.allow中有该用户，则可以使用crontab命令。 <h3 id="9、其它"><a href="#9、其它" class="headerlink" title="9、其它"></a>9、其它</h3></li><li>/etc/cron.d/ 这个目录用来存放任何要执行的crontab文件或脚本。</li><li>/var/spool/cron/ 这个目录下存放的是每个用户包括root的crontab任务，每个任务以创建者的名字命名，比如tom建的crontab任务对应的文件就是/var/spool/cron/tom。一般一个用户最多只有一个crontab文件。</li><li>在linux平台上如果需要实现任务调度功能可以编写cron脚本来实现。<br>以某一频率执行任务<br>linux缺省会启动crond进程，crond进程不需要用户启动、关闭。<br>crond进程负责读取调度任务并执行，用户只需要将相应的调度脚本写入cron的调度配置文件中。<br>cron的调度文件有以下几个：<ol><li>crontab</li><li>cron.d</li><li>cron.daily</li><li>cron.hourly</li><li>cron.monthly</li><li>cron.weekly<br>如果用的任务不是以hourly monthly weekly方式执行，则可以将相应的crontab写入到crontab 或cron.d目录中。</li></ol></li></ul><p>参考链接：感谢<br><a href="https://www.cnblogs.com/tankblog/p/6934987.html" target="_blank" rel="noopener">linux应用之crontab定时任务的设置</a><br> <a href="https://www.cnblogs.com/Pxhphp/p/6391718.html" target="_blank" rel="noopener">linux定时任务的设置</a><br><a href="https://www.cnblogs.com/longjshz/p/5779215.html" target="_blank" rel="noopener">Linux下的crontab定时执行任务命令详解</a><br><a href="https://www.cnblogs.com/aminxu/p/5993769.html" target="_blank" rel="noopener">crontab 详细用法 定时任务</a> </p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在ubuntu服务器上搭建git服务器</title>
      <link href="/2020/06/01/%E5%9C%A8ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E6%90%AD%E5%BB%BAgit%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2020/06/01/%E5%9C%A8ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E6%90%AD%E5%BB%BAgit%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<ol><li><p>安装git<br><code>$ sudo apt-get install git</code><br><img src="https://img-blog.csdnimg.cn/20190406155406517.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p></li><li><p>安装完之后，查看 Git 版本,查看是否安装成功。<br><code>$ git –version</code><br><img src="https://img-blog.csdnimg.cn/2019040615550632.png" alt="在这里插入图片描述" loading="lazy"></p></li><li><p>创建git用户和密码<br><code>$ sudo useradd git</code><br><code>$ sudo passwd git</code><br><img src="https://img-blog.csdnimg.cn/20190406155552189.png" alt="在这里插入图片描述" loading="lazy"></p></li><li><p>创建git仓库<br>我仓库的路径设置为/opt/module/git/gitrepo.git<br><code>$ mkdir /opt/module/git/gitrepo.git</code><br><code>$cd /opt/module/git/</code><br>初始化仓库<br><code>/opt/module/git$ git init --bare gitrepo.git/</code><br><img src="https://img-blog.csdnimg.cn/2019040615574539.png" alt="在这里插入图片描述" loading="lazy"><br>在客户端下安装git并配置。。。。。（不详细说了）</p></li><li><p>windows客户端clone在linux上的远程仓库<br><code>$ git clone git@192.168.1.101:22/opt/module/git/gitrepo.git</code><br><img src="https://img-blog.csdnimg.cn/20190406155849742.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>去客户端的C:\Users\Administrator.ssh下查看，打开known_hosts.<br><img src="https://img-blog.csdnimg.cn/20190406155913923.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>打开known_hosts可以看到192.168.1.101即是服务端地址。<br><img src="https://img-blog.csdnimg.cn/20190406155938247.png" alt="在这里插入图片描述" loading="lazy"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu无法安装rpm包的解决办法</title>
      <link href="/2020/06/01/Ubuntu%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85rpm%E5%8C%85%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2020/06/01/Ubuntu%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85rpm%E5%8C%85%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<pre><code>Ubuntu的软件包格式是deb，如果要安装rpm的包，则要先用alien把rpm转换成deb。</code></pre><p>sudo apt-get install alien #alien默认没有安装，所以首先要安装它</p><p>sudo alien xxxx.rpm #将rpm转换位deb，完成后会生成一个同名的xxxx.deb</p><p>sudo dpkg -i xxxx.deb #安装</p><p>注意，用alien转换的deb包并不能保证100%顺利安装，所以可以找到deb最好直接用deb</p><p>有时候，我们想要使用的软件并没有被包含到 Ubuntu 的仓库中，而程序本身也没有提供让 Ubuntu 可以使用的 deb 包，你又不愿从源代码编译。但假如软件提供有 rpm 包的话，我们也是可以在 Ubuntu 中安装的。</p><p><strong>方法一：</strong></p><ol><li>先安装 alien 和 fakeroot 这两个工具，其中前者可以将 rpm 包转换为 deb 包。安装命令为：</li></ol><p>sudo apt-get install alien fakeroot</p><ol start="2"><li><p>将需要安装的 rpm 包下载备用，假设为 package.rpm。</p></li><li><p>使用 alien 将 rpm 包转换为 deb 包：</p></li></ol><p>fakeroot alien package.rpm</p><ol start="4"><li>一旦转换成功，我们可以即刻使用以下指令来安装：</li></ol><p>sudo dpkg -i package.deb</p><p><strong>方法二：</strong></p><p>1.CODE:</p><p>sudo apt-get install rpm alien</p><p>2.CODE:</p><p>alien -d package.rpm</p><p>3.CODE:</p><p>sudo dpkg -i package.deb<br>转载自：<a href="https://blog.csdn.net/suleil1/article/details/49471723" target="_blank" rel="noopener">https://blog.csdn.net/suleil1/article/details/49471723</a> </p><hr>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hive操作错误总结</title>
      <link href="/2020/06/01/hive%E6%93%8D%E4%BD%9C%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93/"/>
      <url>/2020/06/01/hive%E6%93%8D%E4%BD%9C%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<ol><li><code>Execution Error, return code 1 from org.apache.hadoop.hive.ql.exec.MoveTask. org.apache.hadoop.hive.ql.metadata.HiveException: Unable to move source file:</code><br><img src="https://img-blog.csdnimg.cn/20190331181838284.png" alt="在这里插入图片描述" loading="lazy"></li></ol><p> <strong>解决：</strong><br>退出hive，关闭namenode和datanode，删除namenode的tmp目录，再重新启动<br> 2. 多表查询有聚合函数执行mapreduce出错：<br><code>FAILED: Execution Error, return code 2 from org.apache.hadoop.hive.ql.exec.mr.MapRedTaskMapReduce Jobs Launched:</code><br> <img src="https://img-blog.csdnimg.cn/2019033118202343.png" alt="在这里插入图片描述" loading="lazy"><br><strong><em>待解决：</em></strong><br><code>hive&gt; set hive.exec.mode.local.auto=true;</code></p><ol start="3"><li>启动hive后，第二次同样的select语句会出错。<br><code>FAILED: Hive Internal Error: java.lang.IllegalArgumentException(The value of property yarn.resourcemanager.zk-address must not be null)java.lang.IllegalArgumentException: The value of property yarn.resourcemanager.zk-address must not be null</code><br><img src="https://img-blog.csdnimg.cn/20190331182046260.png" alt="在这里插入图片描述" loading="lazy"><br><strong>解决：</strong><br>把yarn-site.xml中的yarn.resourcemanager.zk-address改为hadoop.zk.address<br>并重启hadoop。</li><li><code>cannot recognize input near &#39;date&#39; &#39;string&#39; &#39;,&#39; in column specification</code><br><img src="https://img-blog.csdnimg.cn/20190331182107356.png" alt="在这里插入图片描述" loading="lazy"><br><strong>解决：</strong><br>date为保留关键字，当字段名与关键字重名时。要加上反引号<br><img src="https://img-blog.csdnimg.cn/2019033118225126.png" alt="在这里插入图片描述" loading="lazy">.</li><li><code>Error: Could not open client transport with JDBC Uri: jdbc:hive2://192.168.1.101:10000: Failed to open new session: java.lang.RuntimeException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.security.authorize.AuthorizationException): User: leon is not allowed to impersonate leon (state=08S01,code=0)</code><br><img src="https://img-blog.csdnimg.cn/20190331182319673.png" alt="在这里插入图片描述" loading="lazy"><br><strong>解决：</strong><br>修改core-site.xml文件添加如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;hadoop.proxyuser.leon.hosts&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;value&gt;*&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;hadoop.proxyuser.leon.groups&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;value&gt;*&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure>注意：hadoop.proxyuser.leon.hosts和hadoop.proxyuser.leon.groups中的leon是我的用户名，你要改成你的用户名<br><img src="https://img-blog.csdnimg.cn/20190331182337990.png" alt="在这里插入图片描述" loading="lazy"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zookeeper完全分布式部署</title>
      <link href="/2020/06/01/zookeeper%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2/"/>
      <url>/2020/06/01/zookeeper%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="zookeeper完全分布式部署"><a href="#zookeeper完全分布式部署" class="headerlink" title="zookeeper完全分布式部署"></a>zookeeper完全分布式部署</h1><h3 id="1-首先，下载zookeeper压缩包。http-mirrors-shu-edu-cn-apache-zookeeper"><a href="#1-首先，下载zookeeper压缩包。http-mirrors-shu-edu-cn-apache-zookeeper" class="headerlink" title="1.    首先，下载zookeeper压缩包。http://mirrors.shu.edu.cn/apache/zookeeper/"></a>1.    首先，下载zookeeper压缩包。<a href="http://mirrors.shu.edu.cn/apache/zookeeper/" target="_blank" rel="noopener">http://mirrors.shu.edu.cn/apache/zookeeper/</a></h3><p>官方建议下载stable版本的，就下载stable里的比较稳定。我目前下的是3.4.13的。<br>  <img src="https://img-blog.csdnimg.cn/20190324085721915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20190324085737130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br><strong><em>安装前准备环境：安装jdk</em></strong></p><h3 id="2-将zookeeper-3-4-13-tar-gz拷贝到linux下并解压。"><a href="#2-将zookeeper-3-4-13-tar-gz拷贝到linux下并解压。" class="headerlink" title="2.    将zookeeper-3.4.13.tar.gz拷贝到linux下并解压。"></a>2.    将zookeeper-3.4.13.tar.gz拷贝到linux下并解压。<img src="https://img-blog.csdnimg.cn/20190324085905675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></h3><p>将zookeeper安装路径下的conf目录里的zoo_sample.cfg修改为zoo.cfg；<br><code>mv zoo_sample.cfg zoo.cfg</code><br>创建目录：/opt/module/zookeeper-3.4.13/data/zkData 用来存放data数据。<br>修改zoo.cfg的配置：<br>将dataDir的路径改为你存放data数据的路径：<br><code>dataDir=/opt/module/zookeeper-3.4.13/data/zkData</code><br>不改也没关系，会有一个默认存在/tmp/….的路径<br><img src="https://img-blog.csdnimg.cn/20190324090003504.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br><strong>zoo.cfg 文件中参数含义</strong></p><ol><li>tickTime：通信心跳数，Zookeeper服务器心跳时间，单位毫秒<br>Zookeeper使用的基本时间，服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个tickTime时间就会发送一个心跳，时间单位为毫秒。<br>它用于心跳机制，并且设置最小的session超时时间为两倍心跳时间。(session的最小超时时间是2*tickTime)</li><li>initLimit：LF初始通信时限<br>集群中的follower跟随者服务器(F)与leader领导者服务器(L)之间初始连接时能容忍的最多心跳数（tickTime的数量），用它来限定集群中的Zookeeper服务器连接到Leader的时限。<br>投票选举新leader的初始化时间<br>Follower在启动过程中，会从Leader同步所有最新数据，然后确定自己能够对外服务的起始状态。<br>Leader允许F在initLimit时间内完成这个工作。</li><li>syncLimit：LF同步通信时限<br>集群中Leader与Follower之间的最大响应时间单位，假如响应超过syncLimit * tickTime，<br>Leader认为Follwer死掉，从服务器列表中删除Follwer。<br>在运行过程中，Leader负责与ZK集群中所有机器进行通信，例如通过一些心跳检测机制，来检测机器的存活状态。<br>如果L发出心跳包在syncLimit之后，还没有从F那收到响应，那么就认为这个F已经不在线了。</li><li>dataDir：数据文件目录+数据持久化路径<br>保存内存数据库快照信息的位置，如果没有其他说明，更新的事务日志也保存到数据库。</li><li>clientPort：客户端连接端口<br>监听客户端连接的端口</li></ol><p>我三台服务器的主机名如下：<img src="https://img-blog.csdnimg.cn/20190324090206456.png" alt="在这里插入图片描述" loading="lazy"><br> 在zoo.cfg里配置集群信息：<br>添加如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#cluster information</span><br><span class="line">server.1&#x3D;leon-webserver:2888:3888</span><br><span class="line">server.2&#x3D;lenovo:2888:3888</span><br><span class="line">server.3&#x3D;hp-ProLiant-DL360-Gen9:2888:3888</span><br></pre></td></tr></table></figure><p>其中server.1=leon-webserver:2888:3888中server.1表示第1号服务器，leon-webserver为服务器主机名（或者ip地址），2888是这个服务器与集群中的Leader服务器交换信息的端口；3888是备份的leader端口，防止leader服务器出现问题，是用来执行选举时服务器相互通信的端口。<br><img src="https://img-blog.csdnimg.cn/20190324090304513.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>集群模式下配置一个文件myid，这个文件在dataDir目录下，这个文件里面有一个数据就是比如server.1值1，Zookeeper启动时读取此文件，拿到里面的数据与zoo.cfg里面的配置信息比较从而判断到底是哪个server。<br>在/opt/module/zookeeper-3.4.13/data/zkData目录下创建一个文件 myid<br><code>touch myid</code><br>并输入：1<br><img src="https://img-blog.csdnimg.cn/20190324090344679.png" alt="在这里插入图片描述" loading="lazy"><br>将配置好的zookeeper拷贝到其它机器<br><code>rsync -rvl zookeeper-3.4.13/ user2@ip:/opt/module/zookeeper-3.4.13/</code><br><code>rsync -rvl zookeeper-3.4.13/ user3@ip:/opt/module/zookeeper-3.4.13/</code><br>并分别修改myid文件中内容为2、3<br>在三台服务器上分别启动zookeeper<br><code>bin/zkServer.sh start</code><br>查看zookeeper的状态（一个leader，两个follower，这是通过内部选举机制产生的）<br><code>bin/zkServer.sh status</code><br><img src="https://img-blog.csdnimg.cn/20190324090416900.png" alt="在这里插入图片描述" loading="lazy">)<img src="https://img-blog.csdnimg.cn/20190324090423671.png" alt="在这里插入图片描述" loading="lazy">)<img src="https://img-blog.csdnimg.cn/2019032409043048.png" alt="在这里插入图片描述" loading="lazy"><br>部署完成。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac电脑卸载双系统中Boot camp助理出现“启动磁盘不能被分区或恢复成单个分区</title>
      <link href="/2020/06/01/mac%E7%94%B5%E8%84%91%E5%8D%B8%E8%BD%BD%E5%8F%8C%E7%B3%BB%E7%BB%9F%E4%B8%ADBoot-camp%E5%8A%A9%E7%90%86%E5%87%BA%E7%8E%B0%E2%80%9C%E5%90%AF%E5%8A%A8%E7%A3%81%E7%9B%98%E4%B8%8D%E8%83%BD%E8%A2%AB%E5%88%86%E5%8C%BA%E6%88%96%E6%81%A2%E5%A4%8D%E6%88%90%E5%8D%95%E4%B8%AA%E5%88%86%E5%8C%BA/"/>
      <url>/2020/06/01/mac%E7%94%B5%E8%84%91%E5%8D%B8%E8%BD%BD%E5%8F%8C%E7%B3%BB%E7%BB%9F%E4%B8%ADBoot-camp%E5%8A%A9%E7%90%86%E5%87%BA%E7%8E%B0%E2%80%9C%E5%90%AF%E5%8A%A8%E7%A3%81%E7%9B%98%E4%B8%8D%E8%83%BD%E8%A2%AB%E5%88%86%E5%8C%BA%E6%88%96%E6%81%A2%E5%A4%8D%E6%88%90%E5%8D%95%E4%B8%AA%E5%88%86%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="问题：启动磁盘不能被分区或恢复成单个分区"><a href="#问题：启动磁盘不能被分区或恢复成单个分区" class="headerlink" title="问题：启动磁盘不能被分区或恢复成单个分区"></a><strong>问题：启动磁盘不能被分区或恢复成单个分区</strong></h1><p>苹果电脑装了双系统，但是一直用的mac系统，所以打算把windows卸载。<br>看到网上说直接用Boot camp助理卸载就行，但是点“继续”的时候出现问题：启动磁盘不能被分区或恢复成单个分区。<br><img src="https://img-blog.csdnimg.cn/20190317010030356.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="启动磁盘不能被分区或恢复成单个分区" loading="lazy"><strong>接下来就是要解决这个问题啦！</strong><br>可以看到我现在有三个盘，Machintosh HD为mac系统所在盘，这是我要保留的，另外两个是装windows分配的盘，所以需要卸载这两个BOOTCAMP和OSXRESERVED。</p><ol><li>先将这两个盘“抹掉”<br><img src="https://img-blog.csdnimg.cn/20190317010602881.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li><li>现在只有主盘Machintosh HD起作用了。选中Machintosh HD盘后选择分区功能后并点击“分区”。<img src="https://img-blog.csdnimg.cn/20190317010625302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li><li>选中空白处，点击后变蓝，然后点击下面的“-”减号删除分区。<br>然后再点击“应用”就可以了。这时我们发现，虽然删除了分区，但是空出来的空间并没有和主盘合并。<img src="https://img-blog.csdnimg.cn/20190317010642649.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li><li>这时候再次进入“启动转换助理”软件，可以发现“继续”可以继续了，<br>点一下进去看看。<img src="https://img-blog.csdnimg.cn/20190317010706399.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li><li>提示出现：请点按“恢复”以移除windows分区，并将磁盘恢复为有单个分区的macOS宗卷。点击“恢复”…….就完成了合并啦</li></ol><p>可以看到本来只有256GB的空间现在变成了500GB空间了,完成！<br><img src="https://img-blog.csdnimg.cn/20190317010749547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="存储空间" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一步步教学Hadoop完全分布式部署</title>
      <link href="/2020/06/01/%E4%B8%80%E6%AD%A5%E6%AD%A5%E6%95%99%E5%AD%A6Hadoop%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2/"/>
      <url>/2020/06/01/%E4%B8%80%E6%AD%A5%E6%AD%A5%E6%95%99%E5%AD%A6Hadoop%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<p>在Mac电脑下利用<strong>parallel desktop</strong> 创建4台虚拟机master、data1、data2、data3进行hadoop完全分布式的安装以及环境配置<br>我的主机系统是macOS,虚拟机的系统是CentOS.<br>(可以先配置伪分布式Hadoop试一试,然后再在这个基础上部署完全分布式Hadoop)</p><h1 id="一、把single-Node-cluster-复制到data1"><a href="#一、把single-Node-cluster-复制到data1" class="headerlink" title="一、把single Node cluster 复制到data1"></a>一、把single Node cluster 复制到data1</h1><h2 id="1-克隆主机data1"><a href="#1-克隆主机data1" class="headerlink" title="1,克隆主机data1"></a>1,克隆主机data1</h2><p> 右击主机–&gt;点击克隆–&gt;设置虚拟机名称为data1<br><img src="https://img-blog.csdnimg.cn/20190208203859274.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="parallel克隆主机" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20190208204230130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="data1" loading="lazy"></p><h1 id="二、设置Mutli-Node-Cluster-服务器-配置设置文件共同的部分"><a href="#二、设置Mutli-Node-Cluster-服务器-配置设置文件共同的部分" class="headerlink" title="二、设置Mutli Node Cluster 服务器,配置设置文件共同的部分"></a>二、设置Mutli Node Cluster 服务器,配置设置文件共同的部分</h1><p>固定ip、hostname、core-site.xml、yarn-site.xml、mapred-site.xml、hdfs-site.xml</p><h2 id="1-编辑网络配置文件设置静态ip"><a href="#1-编辑网络配置文件设置静态ip" class="headerlink" title="1,编辑网络配置文件设置静态ip"></a>1,编辑网络配置文件设置静态ip</h2><p>1)<code>sudo vi /etc/udev/rules.d/70-persistent-net.rules</code><br>    将eth2改为eth0,并复制地址00:1c:42:f6:c7:5c,为什么只留下这个呢,可以在网络-&gt;高级设置-&gt;查看mac地址,验证设备上找到的MAC地址是否与设备中的MAC地址相同,留下那个相同的mac地址.<br>    <img src="https://img-blog.csdnimg.cn/2019020916035018.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>2)<code>sudo vi /etc/sysconfig/network-scripts/ifcfg-eth0</code>,其中内容含义如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DEVICE&#x3D;eth0 &#x2F;&#x2F;使用的网卡标识</span><br><span class="line">TYPE&#x3D;Ethernet &#x2F;&#x2F;表示为以太网</span><br><span class="line">ONBOOT&#x3D;yes &#x2F;&#x2F;表示是否开机启动</span><br><span class="line">BOOTPROTO&#x3D;static &#x2F;&#x2F;这里表示开机协议，有三种（dhcp，static，none）dhcp表示自动获取ip，static自然就是静态分配ip，none表示不使用任何协议</span><br><span class="line">IPADDR&#x3D;10.211.55.11 &#x2F;&#x2F;这里就是你所要设定的IP</span><br><span class="line">GATEWAY&#x3D;10.211.55.1 &#x2F;&#x2F;网关</span><br></pre></td></tr></table></figure><p>比如我的虚拟机<br>修改前:<img src="https://img-blog.csdnimg.cn/20190208210353113.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>修改后:<br><img src="https://img-blog.csdnimg.cn/20190209160536847.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br><strong>这个地址前三段(10.211.55)与虚拟机子网IP前三段一致，这样才能保证虚拟机与宿主机通信。</strong><br>比如我mac电脑虚拟网卡ip可以利用<code>ifconfig</code>查到:<img src="https://img-blog.csdnimg.cn/20190209160931687.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>配置完之后，需要重启网络配置。<br><code>service network restart</code><br> reboot重启设备,查看ip是否修改成功<code>ifconfig eth0</code><br>再用ping命令，验证能否ping 通宿主机，ping通外网(比如<code>pingwww.baidu.com</code>)。</p><h2 id="2-修改主机名"><a href="#2-修改主机名" class="headerlink" title="2,修改主机名"></a>2,修改主机名</h2><p> 首先用<code>hostname</code>查看主机名</p><p>修改主机名(如果觉得主机名不合适,为了更好的分辨,可以进行修改)<br><code>sudo vi /etc/sysconfig/network</code><br>我的主机名之前是hh,现在改为data1<br>修改前:<img src="https://img-blog.csdnimg.cn/20190208213335885.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>修改后:<br><img src="https://img-blog.csdnimg.cn/20190208213400771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h2 id="3-设置hosts文件"><a href="#3-设置hosts文件" class="headerlink" title="3,设置hosts文件"></a>3,设置hosts文件</h2><p><code>sudo vi /etc/hosts</code><br>修改前:<img src="https://img-blog.csdnimg.cn/20190208213554595.png" alt="在这里插入图片描述" loading="lazy"><br><strong>添加各节点的主机名以及对应ip地址</strong><br>修改后:</p><p><img src="https://img-blog.csdnimg.cn/20190209161314318.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">reboot重启设备,查看主机名是否修改成功.<br>(注意:所有主机防火墙要关闭)</p><h2 id="4-编辑core-site-xml文件"><a href="#4-编辑core-site-xml文件" class="headerlink" title="4,编辑core-site.xml文件"></a>4,编辑core-site.xml文件</h2><p>切换到目录 cd /opt/module/hadoop-3.2.0/etc/hadoop下<br> (其中/opt/module/hadoop-3.2.0是我hadoop的安装路径)<br>在core-site.xml中,必须设置HDFS的默认名称,使用命令或者程序来存取HDFS时,可以使用此名称,有多台计算机时必须指定主机名.<br><code>vi core-site.xml</code><br>改为master.<br><img src="https://img-blog.csdnimg.cn/20190208213948463.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h2 id="5-编辑yarn-site-xml文件"><a href="#5-编辑yarn-site-xml文件" class="headerlink" title="5,编辑yarn-site.xml文件"></a>5,编辑yarn-site.xml文件</h2><p> <strong>1). 设置ResourceManager主机与NodeManager的连接地址</strong><br>Nodemanager通过这个地址向ResourceManager汇报运行情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.resourcemanager.resource-tracker.address&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;master:8025&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure><p><strong>2).设置Resourcemanager与ApplicationMaster的连接地址</strong><br>    Application通过这个地址向ResourceeManager申请资源、释放资源等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.resourcemanager.scheduler.address&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;master:8030&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure><p><strong>3).设置ResourceManager与客户端的连接地址</strong><br>    客户端通过该地址ResourceManager注册应用程序,删除应用程序等.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.resourcemanager.address&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;master:8050&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure><p>添加修改如下:<br><img src="https://img-blog.csdnimg.cn/20190208215323867.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h2 id="6-编辑修改mapred-site-xml"><a href="#6-编辑修改mapred-site-xml" class="headerlink" title="6,编辑修改mapred-site.xml"></a>6,编辑修改mapred-site.xml</h2><p><code>vi mapred-site.xml</code><br>修改设置map reduce job tracker 的连接地址为master:54311</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapred.job.tracker&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;master:54311&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190208221307441.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h2 id="7-编辑修改hdfs-site-xml"><a href="#7-编辑修改hdfs-site-xml" class="headerlink" title="7,编辑修改hdfs-site.xml"></a>7,编辑修改hdfs-site.xml</h2><p>hdfs-site.xml用于设置HDFS分布式文件系统的相关配置<br>在data1中只是扮演datanode角色,只需要保留datanode设置即可.<br><code>vi hdfs-site.xml</code><br><img src="https://img-blog.csdnimg.cn/20190208222430999.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>ok,data1配置完成.接下来data2,data3,master.</p><h1 id="三、克隆data1到data2、data3、master"><a href="#三、克隆data1到data2、data3、master" class="headerlink" title="三、克隆data1到data2、data3、master"></a>三、克隆data1到data2、data3、master</h1><p>data1已经设置Hadoop Mutli Node Cluster共同的部分,可以复制data1到data2、data3、master.<img src="https://img-blog.csdnimg.cn/2019020919041218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/2019020919045626.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>改名后进行存储,即进行克隆.同理,将data1克隆data3、master,克隆完成就如下图所示<br><img src="https://img-blog.csdnimg.cn/2019020919054915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h1 id="四-设置data2、data3服务器"><a href="#四-设置data2、data3服务器" class="headerlink" title="四,设置data2、data3服务器"></a>四,设置data2、data3服务器</h1><p>对data2、data3进行静态ip设置以及主机名编辑<br>以data2为例.</p><h2 id="1-编辑网络配置文件设置静态ip、修改主机名"><a href="#1-编辑网络配置文件设置静态ip、修改主机名" class="headerlink" title="1 ,编辑网络配置文件设置静态ip、修改主机名"></a>1 ,编辑网络配置文件设置静态ip、修改主机名</h2><p>1)<code>sudo vi /etc/udev/rules.d/70-persistent-net.rules</code><img src="https://img-blog.csdnimg.cn/20190209192926178.png" alt="在这里插入图片描述" loading="lazy">)2) <code>sudo vi /etc/sysconfig/network-scripts/ifcfg-eth0</code><img src="https://img-blog.csdnimg.cn/2019020919303733.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>3) <code>sudo vi /etc/sysconfig/network</code><img src="https://img-blog.csdnimg.cn/20190209193447421.png" alt="在这里插入图片描述" loading="lazy"><br>把Mac地址,ip地址,hostname改一下,步骤基本与data1设置相同,</p><h1 id="五、设置master服务器"><a href="#五、设置master服务器" class="headerlink" title="五、设置master服务器"></a>五、设置master服务器</h1><h3 id="1-前面步骤同四"><a href="#1-前面步骤同四" class="headerlink" title="1,前面步骤同四."></a>1,前面步骤同四.</h3><h3 id="2-编辑hdfs-site-xml"><a href="#2-编辑hdfs-site-xml" class="headerlink" title="2,编辑hdfs-site.xml"></a>2,编辑hdfs-site.xml</h3><p>切换到hadoop路径的etc/hadoop下<code>cd /opt/module/hadoop-3.2.0/etc/hadoop</code><br>编辑修改<code>vi hdfs-site.xml</code><br><img src="https://img-blog.csdnimg.cn/20190209195558276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h3 id="3-编辑master文件"><a href="#3-编辑master文件" class="headerlink" title="3,编辑master文件"></a>3,编辑master文件</h3><p>编辑 <code>vi masters</code><br><img src="https://img-blog.csdnimg.cn/2019020920131090.png" alt="在这里插入图片描述" loading="lazy"><br>编辑<code>vi slaves</code><br><img src="https://img-blog.csdnimg.cn/20190209201412590.png" alt="在这里插入图片描述" loading="lazy"></p><h1 id="六-master连接data1、data2、data3创建HDFS目录"><a href="#六-master连接data1、data2、data3创建HDFS目录" class="headerlink" title="六,master连接data1、data2、data3创建HDFS目录"></a>六,master连接data1、data2、data3创建HDFS目录</h1><h3 id="1-启动所有虚拟机data1-data2-data3-master"><a href="#1-启动所有虚拟机data1-data2-data3-master" class="headerlink" title="1,启动所有虚拟机data1.data2.data3.master"></a>1,启动所有虚拟机data1.data2.data3.master</h3><h3 id="2-切换到master-开启终端"><a href="#2-切换到master-开启终端" class="headerlink" title="2,切换到master,开启终端"></a>2,切换到master,开启终端</h3><p><code>ssh data1</code><img src="https://img-blog.csdnimg.cn/20190209203119285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>可以看的主机名变为data1,说明已经连接上data1.</p><h3 id="3-在data1上创建HDFS目录"><a href="#3-在data1上创建HDFS目录" class="headerlink" title="3,在data1上创建HDFS目录"></a>3,在data1上创建HDFS目录</h3><p>1)删除hdfs所有目录<br><code>rm -rf /opt/module/hadoop-3.2.0/hadoop_data/hdfs</code><br>2)创建datanode存储目录<br><code>mkdir -p /opt/module/hadoop-3.2.0/hadoop_data/hdfs/datanode</code><br>3)中断data1的连接,回到master<br><code>exit</code><br>4)重复1)~3)步骤,设置data2、data3</p><p>(不知道有没有说错,欢迎指点^  ^)<br>基本步骤大概就是这样,最后再测试一下</p><p>参考资料:<br><a href="http://www.cnblogs.com/Latiny/p/6699499.html" target="_blank" rel="noopener">Linux CentOS虚拟机网卡配置</a><br><a href="https://blog.csdn.net/qq_39597203/article/details/80556608" target="_blank" rel="noopener">Mac上配置Linux网络适配器（NAT模式）,无法ping通</a><br><a href="http://download.parallels.com/doc/psbm/en/Parallels_Server_Bare_Metal_Users_Guide/29258.htm" target="_blank" rel="noopener">Creating a Virtual Network</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop配置可能出现的问题及解决方案</title>
      <link href="/2020/06/01/Hadoop%E9%85%8D%E7%BD%AE%E5%8F%AF%E8%83%BD%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2020/06/01/Hadoop%E9%85%8D%E7%BD%AE%E5%8F%AF%E8%83%BD%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Hadoop-namenode-–format-出现问题"><a href="#1-Hadoop-namenode-–format-出现问题" class="headerlink" title="1. Hadoop namenode –format 出现问题"></a>1. Hadoop namenode –format 出现问题</h1><p> Hadoop namenode –format后,出现错误:<strong>未知的名称或服务</strong><br><img src="https://img-blog.csdnimg.cn/201902032337172.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="namenode格式化出现的问题" loading="lazy"><br>解决办法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi &#x2F;etc&#x2F;hosts</span><br></pre></td></tr></table></figure><p>修改 为 127.0.0.1 localhost 你的主机名<br>我的主机名是hh,就在127.0.0.1的那行后面再加一个hh</p><h1 id="2-执行mapreduce程序出现的错误"><a href="#2-执行mapreduce程序出现的错误" class="headerlink" title="2. 执行mapreduce程序出现的错误"></a>2. 执行mapreduce程序出现的错误</h1><p><code>[2019-02-03 11:55:40.144]Container exited with a non-zero exit code 1. Error file: prelaunch.err.Last 4096 bytes of prelaunch.err :Last 4096 bytes of stderr :错误: 找不到或无法加载主类 org.apache.hadoop.mapreduce.v2.app.MRAppMaster</code><br><strong>解决办法:</strong><br>编辑 Hadoop 安装目录下 etc/hadoop/mapred-site.xml 文件，在  <configuration> 标签和 </configuration> 标签之间添加如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;mapreduce.application.classpath&lt;&#x2F;name&gt;</span><br><span class="line">   &lt;value&gt;&#x2F;opt&#x2F;module&#x2F;hadoop-3.2.0&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;*,</span><br><span class="line">  &#x2F;opt&#x2F;module&#x2F;hadoop-3.2.0&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;lib&#x2F;*&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure><p>其中/opt/module/hadoop-3.2.0为我的hadoop安装路径,必须要写绝对路径~</p><h1 id="3-namenode进入安全模式"><a href="#3-namenode进入安全模式" class="headerlink" title="3. namenode进入安全模式"></a>3. namenode进入安全模式</h1><p><code>2019-02-03 17:26:09,459 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicablerm: Cannot delete /user/hehuan/mapreduce/wordcount/output. Name node is in safe mode.</code><br>解决办法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfsadmin -safemode leave</span><br></pre></td></tr></table></figure><h1 id="4，secondarynamenode启动不了"><a href="#4，secondarynamenode启动不了" class="headerlink" title="4，secondarynamenode启动不了"></a>4，secondarynamenode启动不了</h1><p>启动集群的时候其他节点都启动了，只有secondarynamenode没有启动<br>解决：<br>输入命令<code>hdfs secondarynamenode</code>查看日志信息，有没有报错的信息，如果有，看看是什么，然后再解决。<br><img src="https://img-blog.csdnimg.cn/2019030613154420.png" alt="在这里插入图片描述" loading="lazy"></p><h1 id="5-无法加载主类"><a href="#5-无法加载主类" class="headerlink" title="5,无法加载主类"></a>5,无法加载主类</h1><p><code>Container exited with a non-zero exit code 1. Error file: prelaunch.err.Last 4096 bytes of prelaunch.err :Last 4096 bytes of stderr :错误: 找不到或无法加载主类 org.apache.hadoop.mapreduce.v2.app.MRAppMaster</code><br>解决：<br>在mapred-site.xml中添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapreduce.framework.name&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;yarn&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.app.mapreduce.am.env&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;HADOOP_MAPRED_HOME&#x3D;&#x2F;opt&#x2F;module&#x2F;hadoop-3.2.0&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapreduce.map.env&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;HADOOP_MAPRED_HOME&#x3D;&#x2F;opt&#x2F;module&#x2F;hadoop-3.2.0&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapreduce.reduce.env&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;HADOOP_MAPRED_HOME&#x3D;&#x2F;opt&#x2F;module&#x2F;hadoop-3.2.0&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure><p>其中<code>/opt/module/hadoop-3.2.0</code>是我的hadoop安装路径</p><h1 id="6-RECEIVED-SIGNAL-15-SIGTERM"><a href="#6-RECEIVED-SIGNAL-15-SIGTERM" class="headerlink" title="6.RECEIVED SIGNAL 15: SIGTERM"></a>6.RECEIVED SIGNAL 15: SIGTERM</h1><p><code>ERROR org.apache.hadoop.yarn.server.resourcemanager.ResourceManager: RECEIVED SIGNAL 15: SIGTERM ERROR org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager: ExpiredTokenRemover received java.lang.InterruptedException: sleep interrupted</code><br> 启动集群没有问题，但是执行mapreduce的时候，resourcemanager节点所在的服务器总是挂掉，（是这个服务器上所有的节点都挂掉），主要是刚开始没有发现这个问题，一直看到的是另外一台服务器上的问题 <code>2019-06-16 02:21:09,197 ERROR org.apache.hadoop.yarn.YarnUncaughtExceptionHandler: Thread Thread[Node Status Updater,5,main] threw an Exception.org.apache.hadoop.yarn.exceptions.YarnRuntimeException: java.net.ConnectException: Call From leon-webserver/192.168.1.101 to lenovo:8031 failed on connection exception: java.net.ConnectException: 拒绝连接; For more details see:  http://wiki.apache.org/hadoop/ConnectionRefused</code><br>后来才知道，拒绝连接的原因是因为resourcemanager节点所在的服务器挂掉了。本人实在太菜了，猜测可能是节点运行出现内存不足或者某个节点上任务数目太多，资源利用率太高导致服务器直接宕机。所以，我就把Yarn参数优化(Fair Scheduler版本)全部设置了一下，将值改到最大。yarn-site.xml的配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;!-- reducer获取数据的方式 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;yarn.nodemanager.aux-services&lt;&#x2F;name&gt;</span><br><span class="line">&lt;value&gt;mapreduce_shuffle&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;!-- 指定YARN的ResourceManager的地址 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;yarn.resourcemanager.hostname&lt;&#x2F;name&gt;</span><br><span class="line">&lt;value&gt;192.168.1.100&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;  </span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.address&lt;&#x2F;name&gt;  </span><br><span class="line">    &lt;value&gt;192.168.1.100:8032&lt;&#x2F;value&gt;  </span><br><span class="line">  &lt;&#x2F;property&gt;</span><br><span class="line">  &lt;property&gt;  </span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.admin.address&lt;&#x2F;name&gt;  </span><br><span class="line">    &lt;value&gt;192.168.1.100:8033&lt;&#x2F;value&gt;  </span><br><span class="line">  &lt;&#x2F;property&gt;</span><br><span class="line">  &lt;property&gt;  </span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.scheduler.address&lt;&#x2F;name&gt;  </span><br><span class="line">    &lt;value&gt;192.168.1.100:8030&lt;&#x2F;value&gt;  </span><br><span class="line">  &lt;&#x2F;property&gt;  </span><br><span class="line">  &lt;property&gt;  </span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.resource-tracker.address&lt;&#x2F;name&gt;  </span><br><span class="line">    &lt;value&gt;192.168.1.100:8031&lt;&#x2F;value&gt;  </span><br><span class="line">  &lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.scheduler.fair.max.assign&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;1&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt; </span><br><span class="line">&lt;name&gt;yarn.nodemanager.resource.cpu-vcores&lt;&#x2F;name&gt; </span><br><span class="line">&lt;value&gt;30&lt;&#x2F;value&gt; </span><br><span class="line">&lt;discription&gt;每个nodemanager可分配的cpu总核数&lt;&#x2F;discription&gt; </span><br><span class="line">&lt;&#x2F;property&gt; </span><br><span class="line">&lt;property&gt; </span><br><span class="line">&lt;name&gt;yarn.nodemanager.resource.memory-mb&lt;&#x2F;name&gt; </span><br><span class="line">&lt;value&gt;122880&lt;&#x2F;value&gt; </span><br><span class="line">&lt;discription&gt;每个nodemanager可分配的内存总量&lt;&#x2F;discription&gt; </span><br><span class="line">&lt;&#x2F;property&gt; </span><br><span class="line">&lt;property&gt; </span><br><span class="line">&lt;name&gt;yarn.app.mapreduce.am.resource.cpu-vcores&lt;&#x2F;name&gt; </span><br><span class="line">&lt;value&gt;1&lt;&#x2F;value&gt; </span><br><span class="line">&lt;&#x2F;property&gt; </span><br><span class="line">&lt;property&gt; </span><br><span class="line">&lt;name&gt;yarn.app.mapreduce.am.resource.mb&lt;&#x2F;name&gt; </span><br><span class="line">&lt;value&gt;4096&lt;&#x2F;value&gt; </span><br><span class="line">&lt;discription&gt;ApplicationMaster的占用的内存大小&lt;&#x2F;discription&gt; </span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property&gt; </span><br><span class="line">&lt;name&gt;yarn.scheduler.maximum-allocation-mb&lt;&#x2F;name&gt; </span><br><span class="line">&lt;value&gt;16384&lt;&#x2F;value&gt; </span><br><span class="line">&lt;discription&gt;单个任务可申请最大内存，默认8192MB&lt;&#x2F;discription&gt; </span><br><span class="line">&lt;&#x2F;property&gt; </span><br><span class="line">&lt;property&gt; </span><br><span class="line">&lt;name&gt;yarn.scheduler.maximum-allocation-vcores&lt;&#x2F;name&gt; </span><br><span class="line">&lt;value&gt;4&lt;&#x2F;value&gt; </span><br><span class="line">&lt;discription&gt;单个任务可申请的最多虚拟CPU个数&lt;&#x2F;discription&gt; </span><br><span class="line">&lt;&#x2F;property&gt; </span><br><span class="line">&lt;property&gt; </span><br><span class="line">&lt;name&gt;yarn.scheduler.minimum-allocation-vcores&lt;&#x2F;name&gt; </span><br><span class="line">&lt;value&gt;1&lt;&#x2F;value&gt; </span><br><span class="line">&lt;discription&gt;单个任务可申请的最小虚拟CPU个数&lt;&#x2F;discription&gt; </span><br><span class="line">&lt;&#x2F;property&gt; </span><br><span class="line">&lt;property&gt; </span><br><span class="line">&lt;name&gt;yarn.scheduler.minimum-allocation-mb&lt;&#x2F;name&gt; </span><br><span class="line">&lt;value&gt;4096&lt;&#x2F;value&gt; </span><br><span class="line">&lt;discription&gt;container最小可申请的内存&lt;&#x2F;discription&gt; </span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line"> &lt;property&gt; </span><br><span class="line">&lt;name&gt;mapreduce.map.memory.mb&lt;&#x2F;name&gt; </span><br><span class="line">&lt;value&gt;4096&lt;&#x2F;value&gt; </span><br><span class="line">&lt;discription&gt;map的内存大小&lt;&#x2F;discription&gt; </span><br><span class="line">&lt;&#x2F;property&gt; </span><br><span class="line">&lt;property&gt; </span><br><span class="line">&lt;name&gt;mapreduce.map.java.opts&lt;&#x2F;name&gt; </span><br><span class="line">&lt;value&gt;-Xmx3072M&lt;&#x2F;value&gt; </span><br><span class="line">&lt;discription&gt;用户设定的map&#x2F;reduce阶段申请的container的JVM参数。最大堆设定要比申请的内存少一些，用于JVM的非堆部分使用0.80-0.85建议&lt;&#x2F;discription&gt; </span><br><span class="line">&lt;&#x2F;property&gt; </span><br><span class="line">&lt;property&gt; </span><br><span class="line">&lt;name&gt;mapreduce.reduce.memory.mb&lt;&#x2F;name&gt; </span><br><span class="line">&lt;value&gt;8192&lt;&#x2F;value&gt; </span><br><span class="line">&lt;&#x2F;property&gt; </span><br><span class="line">&lt;property&gt; </span><br><span class="line">&lt;name&gt;mapreduce.reduce.java.opts&lt;&#x2F;name&gt; </span><br><span class="line">&lt;value&gt;-Xmx6144M&lt;&#x2F;value&gt; </span><br><span class="line">&lt;&#x2F;property&gt; </span><br><span class="line">&lt;property&gt; </span><br><span class="line">&lt;name&gt;yarn.scheduler.fair.assignmultiple&lt;&#x2F;name&gt; </span><br><span class="line">&lt;value&gt;true&lt;&#x2F;value&gt; </span><br><span class="line">&lt;discription&gt;是否允许NodeManager一次分配多个容器&lt;&#x2F;discription&gt; </span><br><span class="line">&lt;&#x2F;property&gt; </span><br><span class="line">&lt;property&gt; </span><br><span class="line">&lt;name&gt;yarn.scheduler.fair.max.assign&lt;&#x2F;name&gt; </span><br><span class="line">&lt;value&gt;20&lt;&#x2F;value&gt; </span><br><span class="line">&lt;discription&gt;如果允许一次分配多个,一次最多可分配多少个,这里按照一个最小分配yarn.scheduler.minimum-allocation-mb4gb来计算总共内存120&#x2F;4&#x3D;30给20即可&lt;&#x2F;discription&gt; </span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;yarn.nodemanager.vmem-check-enabled&lt;&#x2F;name&gt;</span><br><span class="line">  &lt;value&gt;false&lt;&#x2F;value&gt;</span><br><span class="line">  &lt;description&gt;Whether virtual memory limits will be enforced for containers.&lt;&#x2F;description&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">--&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;yarn.nodemanager.vmem-pmem-ratio&lt;&#x2F;name&gt;</span><br><span class="line">  &lt;value&gt;5&lt;&#x2F;value&gt;</span><br><span class="line">  &lt;description&gt;Ratio between virtual memory to physical memory when setting memory limits for containers. Container allocations are expressed in terms of physical memory, and virtual memory usage is allowed to exceed this allocation by this ratio.&lt;&#x2F;description&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure><p>然后就没有出现服务器节点挂掉了。</p><p>有知道具体是哪个配置起作用了，可以告诉我一下。谢谢</p><p> 参考：<a href="https://blog.csdn.net/leone911/article/details/51605172" target="_blank" rel="noopener">Yarn参数优化(Fair Scheduler版本)</a></p><h1 id="7-Exception-message-bin-bash-第-0-行-fg-无任务控制"><a href="#7-Exception-message-bin-bash-第-0-行-fg-无任务控制" class="headerlink" title="7 Exception message: /bin/bash: 第 0 行: fg: 无任务控制"></a>7 Exception message: /bin/bash: 第 0 行: fg: 无任务控制</h1><figure class="highlight plain"><figcaption><span>application_1559388197413_0002 failed 2 times due to AM Container for appattempt_1559388197413_0002_000002 exited with exitCode: 1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">For more detailed output, check application tracking page:http:&#x2F;&#x2F;lenovo:8088&#x2F;cluster&#x2F;app&#x2F;application_1559388197413_0002Then, click on links to logs of each attempt.</span><br><span class="line">Diagnostics: Exception from container-launch.</span><br><span class="line">Container id: container_1559388197413_0002_02_000001</span><br><span class="line">Exit code: 1</span><br><span class="line">Exception message: &#x2F;bin&#x2F;bash: 第 0 行: fg: 无任务控制</span><br><span class="line">Stack trace: ExitCodeException exitCode&#x3D;1: &#x2F;bin&#x2F;bash: 第 0 行: fg: 无任务控制</span><br><span class="line">at org.apache.hadoop.util.Shell.runCommand(Shell.java:545)</span><br><span class="line">at org.apache.hadoop.util.Shell.run(Shell.java:456)</span><br><span class="line">at org.apache.hadoop.util.Shell$ShellCommandExecutor.execute(Shell.java:722)</span><br><span class="line">at org.apache.hadoop.yarn.server.nodemanager.DefaultContainerExecutor.launchContainer(DefaultContainerExecutor.java:212)</span><br><span class="line">at org.apache.hadoop.yarn.server.nodemanager.containermanager.launcher.ContainerLaunch.call(ContainerLaunch.java:302)</span><br><span class="line">at org.apache.hadoop.yarn.server.nodemanager.containermanager.launcher.ContainerLaunch.call(ContainerLaunch.java:82)</span><br><span class="line">at java.util.concurrent.FutureTask.run(FutureTask.java:266)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</span><br><span class="line">at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">Container exited with a non-zero exit code 1</span><br><span class="line">Failing this attempt. Failing the application.</span><br></pre></td></tr></table></figure><p>出错原因：因为在windows系统中无法使用#!/bin/bash 平台兼容性的问题<br>解决：跨平台提交的参数<br>//：如果要从windows系统中运行这个job提交客户端的程序，则需要加这个跨平台提交的参数<br>        configure.set(“mapreduce.app-submission.cross-platform”,”true”);//代码中写上这个配置</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>教你解决问题：mac电脑卸载双系统中Boot camp助理出现“启动磁盘不能被分区或恢复成单个分区”</title>
      <link href="/2020/06/01/%E6%95%99%E4%BD%A0%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%EF%BC%9Amac%E7%94%B5%E8%84%91%E5%8D%B8%E8%BD%BD%E5%8F%8C%E7%B3%BB%E7%BB%9F%E4%B8%ADBoot-camp%E5%8A%A9%E7%90%86%E5%87%BA%E7%8E%B0%E2%80%9C%E5%90%AF%E5%8A%A8%E7%A3%81%E7%9B%98%E4%B8%8D%E8%83%BD%E8%A2%AB%E5%88%86%E5%8C%BA%E6%88%96%E6%81%A2%E5%A4%8D%E6%88%90%E5%8D%95%E4%B8%AA%E5%88%86%E5%8C%BA/"/>
      <url>/2020/06/01/%E6%95%99%E4%BD%A0%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%EF%BC%9Amac%E7%94%B5%E8%84%91%E5%8D%B8%E8%BD%BD%E5%8F%8C%E7%B3%BB%E7%BB%9F%E4%B8%ADBoot-camp%E5%8A%A9%E7%90%86%E5%87%BA%E7%8E%B0%E2%80%9C%E5%90%AF%E5%8A%A8%E7%A3%81%E7%9B%98%E4%B8%8D%E8%83%BD%E8%A2%AB%E5%88%86%E5%8C%BA%E6%88%96%E6%81%A2%E5%A4%8D%E6%88%90%E5%8D%95%E4%B8%AA%E5%88%86%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="问题：启动磁盘不能被分区或恢复成单个分区"><a href="#问题：启动磁盘不能被分区或恢复成单个分区" class="headerlink" title="问题：启动磁盘不能被分区或恢复成单个分区"></a><strong>问题：启动磁盘不能被分区或恢复成单个分区</strong></h1><p>苹果电脑装了双系统，但是一直用的mac系统，所以打算把windows卸载。<br>看到网上说直接用Boot camp助理卸载就行，但是点“继续”的时候出现问题：启动磁盘不能被分区或恢复成单个分区。<br><img src="https://img-blog.csdnimg.cn/20190317010030356.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="启动磁盘不能被分区或恢复成单个分区" loading="lazy"><strong>接下来就是要解决这个问题啦！</strong><br>可以看到我现在有三个盘，Machintosh HD为mac系统所在盘，这是我要保留的，另外两个是装windows分配的盘，所以需要卸载这两个BOOTCAMP和OSXRESERVED。</p><ol><li>先将这两个盘“抹掉”<br><img src="https://img-blog.csdnimg.cn/20190317010602881.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li><li>现在只有主盘Machintosh HD起作用了。选中Machintosh HD盘后选择分区功能后并点击“分区”。<img src="https://img-blog.csdnimg.cn/20190317010625302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li><li>选中空白处，点击后变蓝，然后点击下面的“-”减号删除分区。<br>然后再点击“应用”就可以了。这时我们发现，虽然删除了分区，但是空出来的空间并没有和主盘合并。<img src="https://img-blog.csdnimg.cn/20190317010642649.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li><li>这时候再次进入“启动转换助理”软件，可以发现“继续”可以继续了，<br>点一下进去看看。<img src="https://img-blog.csdnimg.cn/20190317010706399.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li><li>提示出现：请点按“恢复”以移除windows分区，并将磁盘恢复为有单个分区的macOS宗卷。点击“恢复”…….就完成了合并啦</li></ol><p>可以看到本来只有256GB的空间现在变成了500GB空间了,完成！<br><img src="https://img-blog.csdnimg.cn/20190317010749547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="存储空间" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java系列-深入分析HashMap</title>
      <link href="/2020/06/01/java%E7%B3%BB%E5%88%97-%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90HashMap/"/>
      <url>/2020/06/01/java%E7%B3%BB%E5%88%97-%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90HashMap/</url>
      
        <content type="html"><![CDATA[<p><strong>重要！！！</strong></p><h1 id="前言知识"><a href="#前言知识" class="headerlink" title="前言知识"></a>前言知识</h1><p>hashcode：哈希码不唯一，它是一种算法尽量让同一个类的不同对象拥有不同的哈希码，但是可能也会出现相同的情况。</p><h1 id="一、HashMap一些概念"><a href="#一、HashMap一些概念" class="headerlink" title="一、HashMap一些概念"></a>一、HashMap一些概念</h1><ul><li>HashMap是一个散列表，它存储的是键值对（key-value）映射。</li><li>HashMap继承AbstractMap类，实现了Map、Cloneable、java.io.Serializable接口。用一张图解释一下。<br><img src="https://img-blog.csdnimg.cn/20200326171417789.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li><li>HashMap的实现是不同步的，也就是说不是线程安全的</li><li>HashMap的key唯一，value值可以重复。其中key，value都可以为null。</li><li>HashMap的映射不是有序的，也就是说你做了一堆put操作后，遍历打印出来的数据顺序可能和你put的顺序不一致。</li></ul><h1 id="二、HashMap底层原理"><a href="#二、HashMap底层原理" class="headerlink" title="二、HashMap底层原理"></a>二、HashMap底层原理</h1><ul><li>JDK1.8之前HashMap是采用“<strong>数组+链表</strong>”（散列表）组成的。数组是hashMap的主体，链表是为了解决hash冲突，采用拉链法（链地址法）解决冲突。</li><li>JDK1.8之后，解决Hash冲突发生了变化。当链表长度大于阈值(默认为8)时，将链表转换为红黑树，可以减少搜索时间。“<strong>数组+链表/红黑树</strong>”<br><img src="https://img-blog.csdnimg.cn/20200326172424303.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>疑问解答区：</li></ul><blockquote><p><strong>1. 为什么要用红黑树</strong>？<br>链表过长的时候可能会导致查询的时间加大，TreeMap、TreeSet以及JDK1.8之后的HashMap底层都用到了红黑树。<strong>红黑树就是为了解决二叉搜索树的缺陷，因为二叉搜索树在某些情况下会退化成一个线性结构。</strong></p></blockquote><blockquote><p><strong>2. 链表什么时候会转换红黑树，红黑树什么时候转换回链表？</strong><br>若bucket的链表元素&gt;=8,则链表转换成红黑树结构。<br>若bucket的链表元素&lt;=6,则红黑树转换成链表结构。<br>原因：链表平均查找长度为N/2，红黑树平均查找长度为logN。当元素个数为8时，链表平均查找长度为4，红黑树平均查找长度为3，所以转换成红黑树可以加快查找速度。当元素个数为6，链表平均查找长度为3和红黑树差不多，而且链表结构比较简单，所以采用链表就可以了。</p></blockquote><h1 id="三、HashMap的put操作、get操作"><a href="#三、HashMap的put操作、get操作" class="headerlink" title="三、HashMap的put操作、get操作"></a>三、HashMap的put操作、get操作</h1><ol><li>HashMap的put方法实现<br><img src="https://img-blog.csdnimg.cn/20200326183918503.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li></ol><ul><li>对key做hash，算出来bucket(数组索引)的位置</li><li>如果没有碰撞，直接放bucket里。</li><li>如果发生碰撞，则以链表的形式存在bucket后（不同key的hashcode相同，导致计算出来的hash值相同，会出现这种hash碰撞），若链表大于长度8，则转换为红黑树。</li><li>如果节点key已经存在则替换value值</li><li>如果bucket满了（超过了loadfactor*currentCapacity），就要resize。<blockquote><pre><code>将对象放入到集合中时，首先判断要放入对象的hashcode值与集合中的任意一个元素的hashcode值是否相等，如果不相等直接将该对象放入集合中。如果hashcode值相等，然后再通过equals方法判断要放入对象与集合中的任意一个对象是否相等，如果equals判断不相等，直接将该元素放入到集合中，否则不放入。</code></pre></blockquote></li></ul><ol start="2"><li>HashMap的get操作</li></ol><ul><li>如果是bucket里的第一个节点，直接查找到值，时间复杂度为O(1)；</li><li>如果有冲突，则通过key.equals(k)去查找对应的entry(key-value整体当成一个entry对象)，【链表】时间复杂度为O(n)，【红黑树】时间复杂度为O(logn)。<br><img src="https://img-blog.csdnimg.cn/2020032820033517.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><blockquote><p><strong>hashcode()和equals()关系</strong><br>1.equal()相等的两个对象他们的hashCode()肯定相等，也就是用equal()对比是绝对可靠的。</p></blockquote></li></ul><p>2.hashCode()相等的两个对象他们的equal()不一定相等，也就是hashCode()不是绝对可靠的。</p><p><strong>总结</strong>：<br>    hashmap在底层将key-value当成一个整体进行处理，叫entry对象。hashmap底层采用一个entry[]数组来保存所有的key-value对，当需要存储一个entry对象时，会根据hash算法来决定其在数组中的存储位置，再根据equals方法决定其在该数组位置上的链表中的存储位置，当需要取出一个entry时，也会根据hash算法找到其在数组中的存储位置，再根据equals方法从该位置上的链表中取出该entry。</p><h1 id="四、HashMap的扩容机制resize"><a href="#四、HashMap的扩容机制resize" class="headerlink" title="四、HashMap的扩容机制resize()"></a>四、HashMap的扩容机制resize()</h1><p><strong>为什么要扩容</strong>？当hashmap中元素越来越多，碰撞几率也越来越大，为了提高查询效率，需要对数组进行扩容，进行rehash的过程。<br><strong>什么时候扩容</strong>？当元素个数&gt;=loadfactor*capacity，(loadFactor默认0.75，capacity初始值16)，也就是第一次扩容是数组元素超过阈值12的时候，且新建的Entry刚好落在一个非空的桶上，此刻触发扩容机制，将其容量扩大为2倍。</p><blockquote><p>注意⚠️： 当size大于等于threshold的时候，并不一定会触发扩容机制(比如增加的entry对应的是一个空桶，那直接加载空桶里面，如果对应的不是空桶，会将链表拉长，就会触发扩容)，但是会很可能就触发扩容机制，只要有一个新建的Entry出现哈希冲突，则立刻resize。<br><img src="https://img-blog.csdnimg.cn/20200328213506442.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p></blockquote><p><strong>怎么扩容呢</strong>？第一次hashmap没有任何值的时候，数组直接扩成长度16，然后超过阈值12时，创建一个新数组，扩大一倍，然后重新计算每个元素在数组中的位置。以后每次都扩大一倍。<br><img src="https://img-blog.csdnimg.cn/20200328211259717.png" alt="在这里插入图片描述" loading="lazy"></p><blockquote><p>Jdk7中创建对象时，则初始化table容量为16（饿汉式）。<br>Jdk8中创建对象时，并没有初始化，而是第一次添加元素时初始化table变量为16（懒汉式）。</p></blockquote><h1 id="五、HashMap的长度为什么是2的幂次方"><a href="#五、HashMap的长度为什么是2的幂次方" class="headerlink" title="五、HashMap的长度为什么是2的幂次方"></a>五、HashMap的长度为什么是2的幂次方</h1><p>原因1:<br>看下图，左边两组是数组长度为16（2的4次方），右边两组是数组长度为15。两组的hashcode均为8和9，但是很明显，当它们和1110“&amp;”的时候，产生了相同的结果，也就是说它们会定位到数组中的同一个位置上去，这就产生了碰撞，8和9会被放到同一个链表上，那么查询的时候就需要遍历这个链表，得到8或者9，这样就降低了查询的效率。同时，我们也可以发现，当数组长度为15的时候，hashcode的值会与14（1110）进行“与”，那么最后一位永远是0，而0001，0011，0101，1001，1011，0111，1101这几个位置永远都不能存放元素了，空间浪费相当大，更糟的是这种情况中，数组可以使用的位置比数组长度小了很多，这意味着进一步增加了碰撞的几率，减慢了查询的效率！ <img src="https://img-blog.csdnimg.cn/20200328203704647.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>  所以说，当数组长度为2的n次幂的时候，<strong>不同的key算得得index相同的几率较小，那么数据在数组上分布就比较均匀，</strong>也就是说碰撞的几率小，相对的，查询的时候就不用遍历某个位置上的链表，这样查询效率也就较高了。</p><p> 原因2:<br>  为了HashMap存取高效，尽量减少碰撞，<strong>就要尽量让数据分配均匀</strong>，让每个链表/红黑树长度大致相同。解决这个问题可以采用取余（取模）来实现，【<strong>当length是2的次幂时，hash%length==hash&amp;（length-1）】</strong>，又二进制&amp;比%更能提高运算效率。所以采用了&amp;操作，前提是HashMap的长度必须是2的幂次方。</p><p>HashMap中的hash算法（源码实现）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">方法一：</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;   <span class="comment">//jdk1.8 &amp; jdk1.7</span></span><br><span class="line">     <span class="keyword">int</span> h;</span><br><span class="line">     <span class="comment">// h = key.hashCode() 为第一步 取hashCode值</span></span><br><span class="line">     <span class="comment">// h ^ (h &gt;&gt;&gt; 16)  为第二步 高位参与运算</span></span><br><span class="line">     <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line">方法二：</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;  <span class="comment">//jdk1.7的源码，jdk1.8没有这个方法，但是实现原理一样的</span></span><br><span class="line">     <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);  <span class="comment">//第三步 取模运算</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hash算法本质上就是三步：取key的hashCode值(h)、高位运算、取模运算。取模运算为h &amp; (table.length -1)来得到该对象的保存位，当length总是2的n次方时，h&amp; (length-1)运算等价于对length取模【length=2^n时，h&amp; (length-1) == h% length】，也就是h%length，但是&amp;比%具有更高的效率。如下：（n为table长度length）<br><img src="https://img-blog.csdnimg.cn/20200326184405514.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><blockquote><p>hashmap中数组默认长度为16</p></blockquote><h1 id="六、HashMap的线程安全问题"><a href="#六、HashMap的线程安全问题" class="headerlink" title="六、HashMap的线程安全问题"></a>六、HashMap的线程安全问题</h1><ul><li>jdk7中hashmap并发put操作同时触发resize会造成循环链表，导致get出现死循环。【该问题jdk8中已经解决】<blockquote><p>transfer代码如下：<br>do {<br>  Entry&lt;K,V&gt; next = e.next;// &lt;–假设线程一执行到这里就被调度挂起了<br>  int i = indexFor(e.hash, newCapacity);<br>  e.next = newTable[i];<br>  newTable[i] = e;<br>  e = next;<br>} while (e != null);<br>1)假设两个线程，其中线程1执行到一半挂起，时间片分给了线程2，线程2执行完成。出现下面的情况：<img src="https://img-blog.csdnimg.cn/20200328214146465.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>这时，线程1的e指向了key(3),next指向了key(7)，而线程2在rehash后，e和next的位置发生了变化。<br>2)线程1结束挂起后开始执行，<br>先执行newTable[i]=e;<br>然后e=next，导致e指向了key(7)<br>下一次循环的next=e.next导致next指向了key(3)<br><img src="https://img-blog.csdnimg.cn/20200328215241749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>线程一接着工作。把key(7)摘下来，放到newTable[i]的第一个，然后把e和next往下移。<br><img src="https://img-blog.csdnimg.cn/20200328215436336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>4）环形链接出现。<br>e.next = newTable[i] 导致  key(3).next 指向了 key(7)<br>注意：此时的key(7).next 已经指向了key(3)， 环形链表就这样出现了。<br><img src="https://img-blog.csdnimg.cn/20200328215610365.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>于是当我们进行get操作，比如get(11)时，遍历索引3所在的链表，由于是循环链表，所以永远也不会结束。。。</p></blockquote></li><li>多个线程进行put操作时，可能触发resize操作，如果产生hash碰撞，导致两个线程在得到相同的索引去存储值，可能会出现覆盖丢失的情况。</li></ul><p><strong>解决方案：</strong></p><ul><li>使用Hashtable类替换HashMap(现在一般不用这个了) ，HashTable是线程安全的。</li><li>使用ConcurrentHashMap替换HashMap，具有分段锁，也是线程安全的。</li><li>使用Collection.synchronizedMap将HashMap包装起来。</li></ul><p>参考文章：<br><a href="https://www.jb51.net/article/113433.htm" target="_blank" rel="noopener">https://www.jb51.net/article/113433.htm</a><br>cnblogs.com/williamjie/p/9358291.html<br><a href="https://www.jianshu.com/p/c3633291ecda" target="_blank" rel="noopener">https://www.jianshu.com/p/c3633291ecda</a><br><a href="https://www.cnblogs.com/andy-zhou/p/5402984.html" target="_blank" rel="noopener">https://www.cnblogs.com/andy-zhou/p/5402984.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>值得一看的GC垃圾回收机制总结</title>
      <link href="/2020/06/01/%E5%80%BC%E5%BE%97%E4%B8%80%E7%9C%8B%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6%E6%80%BB%E7%BB%93/"/>
      <url>/2020/06/01/%E5%80%BC%E5%BE%97%E4%B8%80%E7%9C%8B%E7%9A%84GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>有关GC一些概念，完整思维导图可以点这个链接：<a href="https://www.processon.com/view/link/5e67a085e4b08831b9a3c5c9" target="_blank" rel="noopener">GC垃圾回收思维导图</a><img src="https://img-blog.csdnimg.cn/20200310221225373.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h1 id="1-对象存活判断（是否需要回收）？"><a href="#1-对象存活判断（是否需要回收）？" class="headerlink" title="1. 对象存活判断（是否需要回收）？"></a>1. 对象存活判断（是否需要回收）？</h1><p><img src="https://img-blog.csdnimg.cn/20200310221635621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h2 id="1-1引用计数"><a href="#1-1引用计数" class="headerlink" title="1.1引用计数"></a>1.1引用计数</h2><p>引用计数概念：判断对象的引用数量。每个对象有一个引用计数属性，新增一个引用时计数加1，引用释放时计数减1，计数为0时可以回收。此方法比较简单，但是无法解决对象相互循环引用的问题。<br><img src="https://img-blog.csdnimg.cn/2020031022170834.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferenceCountingGC</span> </span>&#123;</span><br><span class="line">      <span class="keyword">public</span> Object instance = <span class="keyword">null</span>;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testGC</span><span class="params">()</span></span>&#123;</span><br><span class="line">       ReferenceCountingGC objA = <span class="keyword">new</span> ReferenceCountingGC ();</span><br><span class="line">       ReferenceCountingGC objB = <span class="keyword">new</span> ReferenceCountingGC ();</span><br><span class="line">            <span class="comment">// 对象之间相互循环引用，对象objA和objB之间的引用计数永远不可能为0</span></span><br><span class="line">            objB.instance = objA;</span><br><span class="line">            objA.instance = objB;</span><br><span class="line">            objA = <span class="keyword">null</span>;</span><br><span class="line">            objB = <span class="keyword">null</span>;</span><br><span class="line">            System.gc();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>解析：上述代码最后面两句将objA和objB赋值为null，也就是说objA和objB指向的对象已经不可能再被访问，但是由于它们互相引用对方，导致它们的引用计数器都不为 0，那么垃圾收集器就永远不会回收它们。</p></blockquote><h2 id="1-2可达性分析"><a href="#1-2可达性分析" class="headerlink" title="1.2可达性分析"></a>1.2可达性分析</h2><p>可达性分析：判断对象的引用链是否可达。可达性分析算法是从离散数学中的图论引入的，程序把所有的引用关系看作一张图，通过一系列的名为 “GC Roots” 的对象作为起始点，从GC Roots开始向下搜索，搜索所走过的路径称为引用链。当一个对象到GC Roots没有任何引用链相连时，则证明此对象是不可达的。</p><blockquote><pre><code>在Java语言中，GC Roots包括：        • 虚拟机栈（栈帧中的局部变量表）中引用的对象        • 方法区中类静态属性实体引用的对象        • 方法区中常量引用的对象        • 本地方法栈中Native引用的对象。</code></pre></blockquote><h1 id="2-垃圾回收类型"><a href="#2-垃圾回收类型" class="headerlink" title="2. 垃圾回收类型"></a>2. 垃圾回收类型</h1><ul><li><p><strong>Minor GC</strong>：对新生代区进行回收。新生代java对象死亡频繁，所以minor GC也非常频繁，所以使用速度快、效率高的算法可以使得垃圾回收尽快完成。</p><ul><li><strong>Full GC</strong>：也叫Major GC，对整个堆进行回收，包括新生代、老年代。Full GC需要对整个堆回收，所以比Minor GC慢，因此要尽量减少Full GC次数。触发GC的例子：老年代满了，System.gc()被显示调用。。。</li></ul><h1 id="3-GC算法"><a href="#3-GC算法" class="headerlink" title="3. GC算法"></a>3. GC算法</h1><p><img src="https://img-blog.csdnimg.cn/20200310222514208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h2 id="3-1标记-清除算法（Mark-Sweep）"><a href="#3-1标记-清除算法（Mark-Sweep）" class="headerlink" title="3.1标记-清除算法（Mark-Sweep）"></a>3.1标记-清除算法（Mark-Sweep）</h2><p>首先标记出所有需要回收的对象，在标记完成后统一回收掉所有被标记的对象。该算法首先从根集合进行扫描，对存活的对象对象标记，标记完毕后，再扫描整个空间中未被标记的对象并进行回收，如下图：<br><img src="https://img-blog.csdnimg.cn/20200310222618199.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">)<img src="https://img-blog.csdnimg.cn/20200310222627312.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br><strong>缺点</strong>：标记和清除过程<strong>效率不高</strong>；空间问题，标记清除后会<strong>产生大量不连续碎片</strong>，可能会导致程序需要分配的较大对象找不到连续足够的内存而提前触发另一次垃圾收集动作。</p><h2 id="3-2-复制算法"><a href="#3-2-复制算法" class="headerlink" title="3.2 复制算法"></a>3.2 复制算法</h2><p>将可用内存按容量划分为大小相等的两块，每次只使用其中一块。当这一块内存用完，就将还存活着的对象复制到另一块上，然后再把已经使用的内存空间清理掉。<br><img src="https://img-blog.csdnimg.cn/20200310222754213.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p></li></ul><p><strong>优点</strong>：不用考虑内存碎片问题；实现简单，运行高效。适合新生代。<br><strong>缺点</strong>：内存缩小为原来的一半，持续复制长生存期的对象则导致效率降低。不适合老年代。</p><blockquote><p>目前商用的虚拟机都采用这种算法来回收新生代。研究发现，新生代中的对象每次回收都基本上只有10%左右的对象存活，所以需要复制的对象很少，效率还不错。新生代中Eden、survivor0、survivor1比例8:1:1，当回收时，将Eden和Survovor0中还存活的对象一次地复制到另外一块survivor空间上，最后清理掉Eden和Survivor0空间，索引只有10%的内存被浪费。<img src="https://img-blog.csdnimg.cn/20200310222857183.png" alt="在这里插入图片描述" loading="lazy"></p></blockquote><blockquote><pre><code>***新生代、老年代概念***</code></pre><p><strong>1）新生代</strong><br>    新生代的目标就是尽可能快速的收集那些生命周期短的对象。其内存按8:1:1比例分为eden、survivor0、survivor1区，大部分对象在eden区生成，进行垃圾回收时，先将eden区存活对象复制到survivor0区，然后清空eden区，当survivor0也快满了，就将eden区和survivor区对象复制到survovr1区，然后清空eden和survivor0区，这时survivor0为空，然后交换survivor0，survivor1角色（下次垃圾回收时会扫描eden、survivor1区），进行反复。如果出现survivor1放不下存活对象时，就将存活对象直接放老年代。如果老年代也满了就会触发一次FullGC（新生代、老年代都回收，新生代发生的GC也叫MinorGC、MinorGC发生频率比较高，不一定等eden区满了才触发）<br><strong>2）老年代</strong><br>老年代中存放的都是生命周期比较长的对象。老年代和新生代占内存比例约（2:1），当老年代满时会触发Major GC（Full GC），老年代对象存活时间比较长，因此FullGC发生的概率比较低。</p></blockquote><h2 id="3-3-标记-压缩算法"><a href="#3-3-标记-压缩算法" class="headerlink" title="3.3 标记-压缩算法"></a>3.3 标记-压缩算法</h2><p>首先标记出所有需要回收的对象，然后让所有存活对象向一端移动，然后直接清理掉端边界以外的内存。<strong>适合老年代。</strong><br><img src="https://img-blog.csdnimg.cn/20200310223103478.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h2 id="3-4分代收集算法（Generational-Collection）★"><a href="#3-4分代收集算法（Generational-Collection）★" class="headerlink" title="3.4分代收集算法（Generational Collection）★"></a>3.4分代收集算法（Generational Collection）★</h2><p><strong>GC分代假设：大部分对象的生命周期非常短暂，存活时间短。</strong><br>把java堆分为新生代和老年代。根据各个年代的特点采用合适的收集算法。</p><ul><li>新生代中，对象存活率低，则选用复制算法，只需付出少量存活对象的复制成本就可以完成收集。</li><li>老年代中，对象存活率高，则选择“标记-清除”或者“标记-整理”算法来进行回收。</li></ul><p>目前该算法使用较多。</p><h1 id="4-垃圾回收器"><a href="#4-垃圾回收器" class="headerlink" title="4. 垃圾回收器"></a>4. 垃圾回收器</h1><p><img src="https://img-blog.csdnimg.cn/20200310223341388.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><ol><li><strong>串行（Serial）收集器</strong>，最古老，稳定，效率高的收集器，可能会产生较长的停顿，只使用一个线程去回收。新生代、老年代使用串行回收；新生代复制算法，老年代标记-压缩算法。垃圾收集过程中会服务暂停。<pre><code>参数控制：-XX：+UseSerialGC 串行收集器</code></pre><img src="https://img-blog.csdnimg.cn/20200310223448503.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li><li><strong>parNew收集器</strong>。Serial收集器的多线程版本。新生代并行，老年代串行。新生代复制算法、老年代标记-压缩算法。<pre><code>参数控制：-XX：+UseParNewGC ParNew收集器；-XX：ParallelGCThreads限制线程数量</code></pre><img src="https://img-blog.csdnimg.cn/2020031022354977.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li><li><strong>Parallel Scanvenge收集器</strong>。Parallel Scavenge类似parNew收集器，但是更关注系统的吞吐量。可通过参数来打开自适应调节策略，虚拟机会根据情况动态调整参数以提供最合适的停顿时间或者最大吞吐量。<br>参数控制：-XX:+UseParallelGC 使用Parallel收集器+老年代串行</li><li><strong>Parallel old收集器</strong>，是parallel收集器的老年代版本，使用多线程“标记-整理”算法。JDK1.6开始提供。<br>   参数控制：-XX:+UseParallelOldGC 使用Parallel收集器+老年代并行</li><li><strong>CMS收集器</strong>，一种以获取最短回收停顿时间为目标的收集器。基于“标记-清除”算法实现。<pre><code>初始标记-并发标记（进行GC Roots Tracing过程）-重新标记-并发清除</code></pre><strong>优点：并发收集、低停顿<br>缺点：产生大量空间碎片，并发阶段降低吞吐量。</strong><br><img src="https://img-blog.csdnimg.cn/20200310223721374.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li><li>==G1收集器==，Garbage-First是一款面向服务器的垃圾收集器，主要针对配备多颗处理器及大容量内存的机器，以极高概率满足GC停顿时间要求的同时，还具备高吞吐量性能特征。<br>–<strong>空间整合</strong>：采用标记-整理法，不产生内存空间碎片。<br>–<strong>可预测停顿</strong>：建立可预测停顿时间模型，能让使用者明确指定一个长度为N毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒。<br>G1收集器将Java堆划分为多个大小相等的独立区域，不划分老年代新生代<br><img src="https://img-blog.csdnimg.cn/20200310223811356.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>G1新生代收集跟ParNew类似，当新生代占用达到一定比例，开始出发收集。和CMS类似。G1收集器收集老年代对象会有短暂停顿。<br>下面是一张GC收集器总结表：<br><img src="https://img-blog.csdnimg.cn/20200310224914540.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><h1 id="5-内存分配与回收策略"><a href="#5-内存分配与回收策略" class="headerlink" title="5. 内存分配与回收策略"></a>5. 内存分配与回收策略</h1><img src="https://img-blog.csdnimg.cn/20200310223901198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li><li><strong>对象优先分配在Eden区</strong>，当Eden区没有足够空间进行分配时，虚拟机将发起一次Minor GC。<ol start="2"><li><strong>大对象直接分配到老年区</strong>。比如长字符串、数组。</li><li><strong>长期存活的对象将进入老年区</strong>。对象在新生代中经历一定次数（默认15）的Minor GC后，就会被晋升到老年代中。</li><li><strong>动态对象年龄判断</strong>。为了更好地适应不同程序的内存状况，虚拟机并不是永远地要求对象年龄必须达到了MaxTenuringThreshold才能晋升老年代，如果在Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代，无须等到MaxTenuringThreshold中要求的年龄。</li></ol></li></ol><p>参考文章：<br><a href="https://blog.csdn.net/justloveyou_/article/details/71216049" target="_blank" rel="noopener">https://blog.csdn.net/justloveyou_/article/details/71216049</a><br><a href="https://www.jianshu.com/p/cc8395631acd" target="_blank" rel="noopener">https://www.jianshu.com/p/cc8395631acd</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超详细的Docker总结</title>
      <link href="/2020/05/31/%E8%B6%85%E8%AF%A6%E7%BB%86%E7%9A%84Docker%E6%80%BB%E7%BB%93/"/>
      <url>/2020/05/31/%E8%B6%85%E8%AF%A6%E7%BB%86%E7%9A%84Docker%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Docker简介"><a href="#一、Docker简介" class="headerlink" title="一、Docker简介"></a>一、Docker简介</h1><h2 id="1-Docker概念"><a href="#1-Docker概念" class="headerlink" title="1. Docker概念"></a>1. Docker概念</h2><ul><li><p>Docker是基于Go语言实现的云开源项目。Docker的主要目标是“Build，Ship and Run Any App，Anywhere”，也就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户APP及其运行环境可以做到“==一次封装、到处运行==”。</p></li><li><p>Docker属于Linux容器的一种封装，提供简单易用的容器使用接口。也是目前非常流行的linux容器解决方案，Docker容器在任何操作系统上都是一致的，可以实现跨平台、跨服务器。<strong>只需要一次配置好环境，换到别的机子上就可以一键部署好，大大简化了操作。</strong></p><blockquote><p>Linux容器是Linux发展出的另一种虚拟化技术，也就是说，Linux容器不是模拟一个完整的操作系统，而是对进程进行隔离，将进程放到了容器中，对于容器里的进程来说，它接触到的各种资源都是虚拟的，从而实现了与底层系统的隔离。</p></blockquote></li><li><p>Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker ，就不用担心环境问题。</p></li><li><p>总体来说， Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</p></li><li><p>Docker中包含三个基本的概念：Image（镜像）、Container（容器）、Repository（仓库）。其中镜像是Docker运行容器的前提，仓库是存放镜像的地点。</p><h3 id="Image（镜像）"><a href="#Image（镜像）" class="headerlink" title="Image（镜像）"></a>Image（镜像）</h3><blockquote><p>镜像是一种轻量级、可以执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包含代码、运行时、环境变量、配置文件。</p></blockquote></li></ul><blockquote><p><strong>UnionFS（联合文件系统）</strong><br>Union文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持==对文件系统的修改作为一次提交来一层层的叠加==， 同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)。Union 文件系统是 Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。<img src="https://img-blog.csdnimg.cn/20200523173007610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br><strong>UnionFS特性</strong>：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录 </p></blockquote><p> <strong>Docker镜像加载原理</strong><br> docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。<br>bootfs(boot file system)主要包含bootloader和kernel, bootloader主要是引导加载kernel, Linux刚启动时会加载bootfs文件系统， <strong>在Docker镜像的最底层是bootfs</strong>。 这一层与我们典型的Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。<br>rootfs (root file system) ，在bootfs之上 。包含的就是典型 Linux 系统中的 /dev, /proc, /bin, /etc 等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu，Centos等等。<br><img src="https://img-blog.csdnimg.cn/2020052317335657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><blockquote><p>问：平时我们安装进虚拟机的CentOS都是好几个G，为什么docker才200M左右？<br>答：对于一个精简的OS，rootfs可以很小，只需要包括最基本的命令、工具和程序库就可以了，因为底层直接用Host的kernel，自己只需要提供 rootfs 就行了。由此可见对于不同的linux发行版, bootfs基本是一致的, rootfs会有差别, 因此不同的发行版可以公用bootfs。  </p></blockquote><blockquote><pre><code>问：为什么Docker镜像要采用这种分层结构呢？</code></pre><p>答： 最大的一个好处就是 - ==共享资源==<br>    比如：有多个镜像都从相同的 base 镜像构建而来，那么宿主机只需在磁盘上保存一份base镜像，同时内存中也只需加载一份 base 镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。 </p></blockquote><blockquote><p>问： Docker镜像特点是什么？<br>答： Docker镜像都是==只读==的。当容器启动时，一个新的可写层被加载到镜像顶部。这一层通常被称作“容器层”，容器层之下的都叫“镜像层”。<strong>镜像可以用来创建Docker容器，==一个镜像可以创建很多容器==。</strong><br><img src="https://img-blog.csdnimg.cn/20200523195440168.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p></blockquote><h3 id="Container（容器）"><a href="#Container（容器）" class="headerlink" title="Container（容器）"></a>Container（容器）</h3><ul><li>容器是镜像创建的运行实例。它可以被启动、开始、停止、删除。每个容器都是互相隔离的，保证安全的平台。</li><li>可以把容器看做是一个简易版的Linux环境(包括root权限、进程空间、用户空间和网络空间等等)和运行在其中的应用程序。</li><li>容器的定义和镜像几乎一摸一样，也是一层层的堆叠，唯一的区别就是在==容器的最上层是可读可写的==，而镜像的所有层都是只读的。<br>可以理解为：<strong>容器=镜像+读写层(最上层)</strong><h3 id="Repository（仓库）"><a href="#Repository（仓库）" class="headerlink" title="Repository（仓库）"></a>Repository（仓库）</h3>Docker仓库是集中存放镜像文件的场所。当镜像构建完成之后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务。</li></ul><blockquote><p>Docker Registry(仓库注册服务器)就是负责集中存储、分发镜像的服务。Docker仓库的概念和git类似，仓库注册服务器可以理解为github这样的托管服务。一个Docker注册服务器可以包含多个仓库，每个仓库可以包含多个镜像，每个镜像有着不同的标签（每个标签对应一个镜像）。所以说。镜像仓库是Docker用来集中存放镜像文件的地方，类似我们的代码仓库。</p></blockquote><p>通常，一个仓库包含同一个软件的不同版本的镜像，标签对应于该软件的各个版本。我们可以通过&lt;仓库名&gt;:&lt;标签&gt;的格式来指定具体这个软件是哪个版本的镜像，如果不给标签，将以latest作为默认标签。</p><blockquote><p>仓库分为<strong>公开仓库</strong>和<strong>私有仓库</strong>两种形式。最大的公开仓库是<a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a>,存放了大量镜像供用户下载。国内的公开仓库包括阿里云、网易云等等。</p></blockquote><p><strong>Docker架构图</strong><br>Docker使用C/S架构，Client 通过接口与Server进程通信实现容器的构建，运行和发布。client和server可以运行在同一台集群，也可以通过跨主机实现远程通信。<img src="https://img-blog.csdnimg.cn/20200523195940152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><blockquote><p><strong>总结：     需要正确的理解仓储/镜像/容器这几个概念</strong><br>Docker本身是一个容器运行载体或称之为管理引擎。我们把应用程序和配置依赖打包好形成一个可交付的运行环境，这个打包好的运行环境就似乎 image镜像文件。只有通过这个镜像文件才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。      </p><ul><li>image文件生成的容器实例，本身也是一个文件，称为镜像文件。      </li><li>一个容器运行一种服务，当我们需要的时候，就可以通过docker客户端创建一个对应的运行实例，也就是我们的容器。   </li><li>至于仓储，就是放了一堆镜像的地方，我们可以把镜像发布到仓储中，需要的时候从仓储中拉下来就可以了。</li></ul></blockquote><h2 id="2-Docker优势"><a href="#2-Docker优势" class="headerlink" title="2. Docker优势"></a>2. Docker优势</h2><ul><li><strong>启动快速</strong>。docker启动属于秒级别，虚拟机启动通常要几分钟。</li><li><strong>所需资源少</strong>。docker在操作系统级别进行虚拟机，docker容器和内核进行交互，几乎没有性能损耗，性能优于通过hypervisor层与内核层的虚拟化。</li><li><strong>更加轻量级</strong>。docker的架构可以共用一个内核与共享应用程序库，所占内存小。同样的硬件环境下，docker运行的镜像数远远多于虚拟机数量，对系统利用率非常高。</li><li><strong>更快的应用交付和部署</strong>。docker化后只需要交付少量容器镜像文件，在正式生产环境加载镜像并运行即可，应用安装配置在镜像里已经内置好，大大节省部署配置和测试验证时间。</li><li><strong>快速创建、删除</strong>：虚拟机创建是分钟级别的，Docker容器创建是秒级别的，Docker的快速迭代性，决定了无论是开发、测试、部署都可以节约大量时间。</li><li><strong>更简单的系统运维</strong>。</li><li><strong>更高效的计算资源利用</strong>。一台物理机可以运行多个容器实例，可以大大提升物理服务器的CPU和内存的利用率。</li><li>高可用性和可恢复性。docker对业务的高可用支持是通过快速重新部署实现的。虚拟化具备负载均衡、高可用、容错、迁移和数据保护等经过生产实践检验的成熟保障机制，VMware可以承诺虚拟机99.999%高可用，保证业务的连续性。</li></ul><h2 id="3-Docker劣势"><a href="#3-Docker劣势" class="headerlink" title="3. Docker劣势"></a>3. Docker劣势</h2><ul><li><strong>隔离性较弱</strong>。docker属于进程之间的隔离，虚拟机可实现系统级别的隔离，所以与虚拟机相比，docker的隔离性更弱。</li><li><strong>安全性较弱</strong>。docker的租户root和宿主机的root等同，一旦容器内的用户权限升级为root用户，它就具备了宿主机的root权限，安全性能降低，目前容器技术还没有任何形式上的硬件隔离，这使得容器容易受到攻击。而虚拟机的租户root和宿主机的root权限是完全分离的，虚拟机利用硬件隔离技术可以防止虚拟机突破和彼此交互。</li><li><strong>可管理性较差</strong>。docker的集中化管理工具还不够成熟。各种虚拟化技术都有成熟的管理工具和完备的虚拟机管理能力，比如VMware 。</li></ul><h2 id="4-容器技术VS虚拟机技术"><a href="#4-容器技术VS虚拟机技术" class="headerlink" title="4. 容器技术VS虚拟机技术"></a>4. 容器技术VS虚拟机技术</h2><p><img src="https://img-blog.csdnimg.cn/20200523171326441.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><ul><li>传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；</li><li>虚拟机缺点：1、资源占用多 2、冗余步骤多 3、启动慢</li><li>容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，  而且也没有进行硬件虚拟  。因此容器要比传统虚拟机更为轻便。 </li><li>每个容器之间互相隔离，每个容器有自己的文件系统 ，容器之间进程不会相互影响，能区分计算资源。</li></ul><table><thead><tr><th>特点</th><th>容器</th><th>虚拟机</th></tr></thead><tbody><tr><td>启动</td><td>秒级</td><td>分钟级别</td></tr><tr><td>硬盘使用</td><td>一般为MB</td><td>一般为GB</td></tr><tr><td>性能</td><td>接近原生，几乎无额外性能损失</td><td>操作系统额外的CPU、内存消耗</td></tr><tr><td>系统支持量</td><td>单机支持上千个容器</td><td>一般是几十个</td></tr><tr><td>操作系统</td><td>与宿主机共享OS</td><td>在宿主机OS上运行虚拟机OS</td></tr><tr><td>存储大小</td><td>镜像小，便于存储和传输</td><td>镜像庞大(vmdk、vdi等)</td></tr><tr><td>移植性</td><td>轻便、灵活、适应于Linux</td><td>笨重、与虚拟化技术耦合度高</td></tr><tr><td>硬件亲和性</td><td>面向软件开发者</td><td>面向硬件运维者</td></tr></tbody></table><blockquote><p><strong>问：为什么Docker比VM虚拟机快？</strong><br>答：1）docker有着比虚拟机更少的抽象层。由于docker不需要Hypervisor实现硬件资源虚拟化，运行在docker容器上的程序直接使用实际物理机的硬件资源。因此docker在利用CPU、内存资源上更加高效有优势。<br>2）docker利用的是宿主机的内核，因此在新建一个容器的时候，docker不需要和虚拟机一样重新加载一个操作系统内核，可以避免这个比较费时非资源的过程。虚拟机的新建需要加载Guest OS，这是分钟级别的创建。而docker直接利用宿主机操作系统，省略了这个过程，因此新建一个docker容器是秒级别的。</p></blockquote><h1 id="二、Docker安装"><a href="#二、Docker安装" class="headerlink" title="二、Docker安装"></a>二、Docker安装</h1><p>参考：<a href="https://docs.docker.com/" target="_blank" rel="noopener">docker官方文档</a><br>Docker的安装前提是需要支持X86-64的架构。具体可以在官网查询。<br>Docker分为CE(社区版，免费)和EE(企业版，付费)。下载看<a href="https://www.docker.com/products" target="_blank" rel="noopener">官网网站</a><br>Docker CE 的安装可参考官方文档，下面是常见操作系统的Docker安装。<br><a href="https://docs.docker.com/docker-for-mac/install/" target="_blank" rel="noopener">MacOS下安装Docker CE教程</a><br><a href="https://docs.docker.com/docker-for-windows/install/" target="_blank" rel="noopener">Windows下安装Docker CE教程</a><br><a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">CentOS下安装Docker CE教程</a><br><a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/" target="_blank" rel="noopener">Ubuntu下安装Docker CE教程</a><br>我安装的是CentoOS7，这里将一下CentOS7安装docker的步骤：</p><ol><li><p>root账户登录，查看内核版本如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hlearn ~]<span class="comment"># uname -a</span></span><br><span class="line">Linux hlearn 3.10.0-957.el7.x86_64 <span class="comment">#1 SMP Thu Nov 8 23:39:32 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure></li><li><p>首先先查看自己有没有安装过docker，如果安装了，先卸载旧版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@hlearn ~]<span class="comment"># yum remove docker \</span></span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure></li><li><p>将yum包更新到最新（期间要选择确认，输入 y 即可）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hlearn ~]<span class="comment"># yum update</span></span><br></pre></td></tr></table></figure></li><li><p>设置yum源(下面的选择其中一个执行就行，我选阿里仓库，快些)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo http://download.docker.com/linux/centos/docker-ce.repo（中央仓库）</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo（阿里仓库）</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200524170111817.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p></li><li><p>可以查看所有仓库中所有docker版本，并选择特定版本安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hlearn hehuan]<span class="comment"># yum list docker-ce --showduplicates | sort -r</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/202005241701428.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p></li><li><p>安装Docker，命令：yum install docker-ce-版本号，我选的是docker-ce-18.03.1.ce，如下(期间遇到选择，选择y即可)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hlearn hehuan]<span class="comment"># yum install docker-ce-18.03.1.ce</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200524170235914.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>docker安装完成。。。。。</p></li></ol><h1 id="三、Docker底层运行原理"><a href="#三、Docker底层运行原理" class="headerlink" title="三、Docker底层运行原理"></a>三、Docker底层运行原理</h1><p>Docker是一个C/S结构的系统，Docker守护进程运行在主机上， 然后通过Socket连接从客户端访问，守护进程从客户端接受命令并管理运行在主机上的容器 。 容器，是一个运行时环境，就是我们前面说到的集装箱。<img src="https://img-blog.csdnimg.cn/20200523203745763.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><h1 id="四、Docker常用命令"><a href="#四、Docker常用命令" class="headerlink" title="四、Docker常用命令"></a>四、Docker常用命令</h1><p><a href="https://www.runoob.com/docker/docker-command-manual.html" target="_blank" rel="noopener">Docker命令大全</a><br>常用命令<br>| 命令| 解释|<br>|–|–|<br>|attach    |当前 shell 下  attach 连接指定运行镜像|<br>|build    |通过 Dockerfile 定制镜像 |<br>|commit    |提交当前容器为新的镜像 |<br>|cp    |从容器中拷贝指定文件或者目录到宿主机中|<br>|create |    创建一个新的容器，同 run，但不启动容器 |<br>|diff |    查看 docker 容器变化|<br>|events    |从 docker 服务获取容器实时事件|<br>|Exec    |在已存在的容器上运行命令 |<br>|export |    导出容器的内容流作为一个 tar 归档文件[对应 import ] |<br>|history|    展示一个镜像形成历史|<br>|images    |列出系统当前镜像|<br>|import  |    从tar包中的内容创建一个新的文件系统映像[对应export] |<br>|info|    显示系统相关信息|<br>|inspect     |查看容器详细信息 |<br>|kill    |kill 指定 docker 容器|<br>|load    |从一个 tar 包中加载一个镜像[对应 save] |<br>|login  |    注册或者登陆一个 docker 源服务器 |<br>|logout    |从当前 Docker registry 退出 |<br>|logs  |    输出当前容器日志信息 |<br>|port |    查看映射端口对应的容器内部源端口 |<br>|pause |    暂停容器 |<br>|ps |    列出容器列表|<br>|pull |    从docker镜像源服务器拉取指定镜像或者库镜像|<br>|push |    推送指定镜像或者库镜像至docker源服务器|<br>|restart |    重启运行的容器 |<br>|rm    |移除一个或者多个容器 |<br>|rmi  |    移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除] |<br>|run    |创建一个新的容器并运行一个命令 |<br>|save |    保存一个镜像为一个 tar 包[对应 load] |<br>|search |    在 docker hub 中搜索镜像|<br>|start     |启动容器 |<br>|stop     |停止容器 |<br>|tag    |给源中镜像打标签 |<br>|top   |     查看容器中运行的进程信息 |<br>|unpause |    取消暂停容器 |<br>|version     |查看 docker 版本号 |<br>|wait    |截取容器停止时的退出状态值 |</p><h1 id="五、-Docker-File解析"><a href="#五、-Docker-File解析" class="headerlink" title="五、 Docker File解析"></a>五、 Docker File解析</h1><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><p>dockerFile是用来构建Docker镜像的构建文件，是由一系列命令和参数构成的脚本。</p><h2 id="2-构建步骤"><a href="#2-构建步骤" class="headerlink" title="2. 构建步骤"></a>2. 构建步骤</h2><ul><li>编写DockerFile文件</li><li>Docker build</li><li>Docker run<h2 id="3-DockerFile构建过程解析"><a href="#3-DockerFile构建过程解析" class="headerlink" title="3. DockerFile构建过程解析"></a>3. DockerFile构建过程解析</h2>1）dockerfile内容要求</li><li>每条保留字指令都必须为大写字母，并且后面要至少要跟随一个参数。</li><li>指令按照从上到小，顺序执行。</li><li>#表示注释</li><li>每条指令都会创建一个新的镜像层，并对镜像进行提交</li></ul><p>2）docker执行dockerfile流程</p><ul><li>docker从基础镜像运行一个容器</li><li>执行一条指令并对容器进行修改</li><li>执行类似docker commit操作提交一个新的镜像层</li><li>docker再基于刚提交的镜像运行一个新的容器</li><li>执行dockerfile中的下一条指令知道所有指令都执行完成</li></ul><blockquote><p><strong>总结：</strong><br>从应用软件的角度来看，Dockerfile、Docker镜像与Docker容器分别代表软件的三个不同阶段， </p><ul><li>Dockerfile是软件的原材料 </li><li>Docker镜像是软件的交付品 </li><li>Docker容器则可以认为是软件的运行态。<br>Dockerfile面向开发，Docker镜像成为交付标准，Docker容器则涉及部署与运维，三者缺一不可，合力充当Docker体系的基石。<br>1、Dockerfile，需要定义一个Dockerfile，Dockerfile定义了进程需要的一切东西。Dockerfile涉及的内容包括执行代码或者是文件、环境变量、依赖包、运行时环境、动态链接库、操作系统的发行版、服务进程和内核进程(当应用进程需要和系统服务和内核进程打交道，这时需要考虑如何设计namespace的权限控制)等等;<br>2、 Docker镜像，在用Dockerfile定义一个文件之后，docker build时会产生一个Docker镜像，当运行 Docker镜像时，会真正开始提供服务;<br>3、 Docker容器，容器是直接提供服务的。<br><img src="https://img-blog.csdnimg.cn/20200523214747673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></li></ul></blockquote><h1 id="六、Docker容器数据卷"><a href="#六、Docker容器数据卷" class="headerlink" title="六、Docker容器数据卷"></a>六、Docker容器数据卷</h1><p>我们知道在docker中，我们程序的运行放在容器中进行，但是在docker中产生的数据，如果不通过docker commit生成新的镜像，使得数据作为镜像的一部分保存下来，那么容器删除后，数据也会跟着删除，那么如何保存这些数据呢（如何使得数据持久化呢）？<br>    为了能够保存数据在docker中我们使用卷。</p><h2 id="卷的概念"><a href="#卷的概念" class="headerlink" title="卷的概念"></a>卷的概念</h2><p>卷就是目录或者文件，存在于一个或者多个容器中，由docker挂载到容器，但是不属于联合文件系统，因此能够绕过Union File System提供一些用于持续存储或者共享数据的特性。<br>卷的设计目的就是<strong>数据的持久化</strong>，完全独立于容器的生存周期，因此docker不会在容器删除时删除其挂载的数据卷。<br>特点：</p><ul><li>数据卷可在容器之间共享或者重用数据</li><li>卷中的更改可以直接生效</li><li>数据卷中的更改不会包含在镜像的更新中</li><li>数据卷的生命周期一直持续到没有容器使用它为止</li></ul><p>参考文章：<a href="https://blog.csdn.net/deng624796905/article/details/86493330" target="_blank" rel="noopener">https://blog.csdn.net/deng624796905/article/details/86493330</a><br><a href="https://blog.51cto.com/ityouknow/2083688" target="_blank" rel="noopener">https://blog.51cto.com/ityouknow/2083688</a><br><a href="https://blog.csdn.net/fgf00/article/details/51893771" target="_blank" rel="noopener">https://blog.csdn.net/fgf00/article/details/51893771</a><br><a href="https://www.runoob.com/docker/docker-command-manual.html" target="_blank" rel="noopener">https://www.runoob.com/docker/docker-command-manual.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TF-IDF算法及分析</title>
      <link href="/2020/05/30/TF-IDF%E5%8E%9F%E7%90%86%E5%8F%8A%E5%88%86%E6%9E%90/"/>
      <url>/2020/05/30/TF-IDF%E5%8E%9F%E7%90%86%E5%8F%8A%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="一、TF-IDF算法介绍"><a href="#一、TF-IDF算法介绍" class="headerlink" title="一、TF-IDF算法介绍"></a>一、TF-IDF算法介绍</h1><blockquote><p>TF-IDF(term frequency–inverse document frequency，词频-逆向文件频率)是一种用于信息检索（information retrieval）与文本挖掘（text mining）的常用加权技术.</p></blockquote><p>TF-IDF是一种统计方法，用以评估字词对于一个文件集或一个语料库中的其中一份文件的重要程度。<strong>字词的重要性随着它在文件中出现的次数成正比增加，但同时会随着它在语料库中出现的频率成反比下降</strong>。</p><p><strong>TF-IDF主要思想</strong>：如果一个单词在该文章中出现的频率(TF)高，并且在其它文章中出现频率很低，则认为该单词具有很好的区分能力，适合用来进行分类。</p><p>1）==词频==(Term Frequency)表示单词在该文章中出现的频率。通常归一化处理，以防止它偏向长的文件。</p><p>词频(TF) = 单词在该文章出现次数/当前文章总单词数<br><img src="https://img-blog.csdnimg.cn/2020052009103531.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">2）==反问档频率==(Inverse Document Frequency)表示某一个特定单词IDF可以由总文章数除以包含该单词的文章数，再将得到的商取对数得到。如果包含该单词的文章越少，则IDF越大，则表明该单词具有很好的文章区分能力。</p><p>反问档频率(IDF) = log(语料库中文章总数/(包含该单词的文章数+1))<br><img src="https://img-blog.csdnimg.cn/2020052009100163.png" alt="在这里插入图片描述" loading="lazy"> </p><blockquote><p>question：为什么分母+1？<br>answer：分母之所以+1是为了避免分母为0.<br>其实最简单的IDF公式应该是log(语料库中文章总数/(包含该单词的文章数))，但是在一些特殊的时候会出现问题，比如一些生僻词在语料库中没有，这样分母会为0，IDF就没有意义了，为了避免这种情况发生，我们需要对IDF进行一些平滑操作，使得语料库中没有出现的生僻词也可以得到一个合适的IDF值。平滑的方式有很多种，上面的将分母+1是最简单的一种方式，还有一种比较常见的IDF平滑公式是IDF=log(语料库中文章总数+1/(包含该单词的文章数+1)+1)</p></blockquote><p>==TF-IDF与一个词在文档中的出现次数成正比， 与包含该词的文档数成反比。==</p><p>有了IDF的定义，我们就可以计算某一个词语的TF-IDF值:<br>TF-IDF(x)=TF(x)<em>IDF(x),其中TF(x)指单词x在当前文章中的词频。<br><img src="https://img-blog.csdnimg.cn/20200520090842228.png" alt="在这里插入图片描述" loading="lazy"><br>*</em>TF-IDF算法的优点**：简单快速，结果比较符合实际情况。</p><p><strong>TF-IDF算法的缺点</strong>：单纯以”词频”衡量一个词的重要性，不够全面，有时重要的词可能出现次数并不多。而且，这种算法无法体现词的位置信息，出现位置靠前的词与出现位置靠后的词，都被视为重要性相同，这是不正确的。（一种解决方法是，对全文的第一段和每一段的第一句话，给予较大的权重。）</p><p><strong>TF-IDF的应用场景</strong>：TF-IDF算法可用来提取文档的关键词，关键词在文本聚类、文本分类、文献检索、自动文摘等方面有着重要应用。</p><h1 id="二、举例说明"><a href="#二、举例说明" class="headerlink" title="二、举例说明"></a>二、举例说明</h1><p>以《中国的蜜蜂养殖》为例，假定该文长度为1000个词，”中国”、”蜜蜂”、”养殖”各出现20次，则这三个词的”词频”（TF）都为0.02。然后，搜索Google发现，包含”的”字的网页共有250亿张，假定这就是中文网页总数。包含”中国”的网页共有62.3亿张，包含”蜜蜂”的网页为0.484亿张，包含”养殖”的网页为0.973亿张。则它们的逆文档频率（IDF）和TF-IDF如下：<br><img src="https://img-blog.csdnimg.cn/20200520090718258.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">从上表可见，”蜜蜂”的TF-IDF值最高，”养殖”其次，”中国”最低。（如果还计算”的”字的TF-IDF，那将是一个极其接近0的值。）所以，如果只选择一个词，”蜜蜂”就是这篇文章的关键词。</p><h1 id="三、案例实战：基于TF-IDF的关键词提取"><a href="#三、案例实战：基于TF-IDF的关键词提取" class="headerlink" title="三、案例实战：基于TF-IDF的关键词提取"></a>三、案例实战：基于TF-IDF的关键词提取</h1><h3 id="1-基于python-mapreduce的TF-IDF计算"><a href="#1-基于python-mapreduce的TF-IDF计算" class="headerlink" title="1. 基于python mapreduce的TF-IDF计算"></a>1. 基于python mapreduce的TF-IDF计算</h3><p>开发步骤如下：</p><ul><li>Step 1：原始数据预处理</li><li>Step 2：产生IDF词表</li><li>Step 3：进行TF-IDF计算，计算单词在文章中的权重</li></ul><p>1）将所有数据文件内容汇总到一个数据文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line"># Step1 原始数据预处理</span><br><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line">import math</span><br><span class="line"></span><br><span class="line">file_path_dir &#x3D; &#39;..&#x2F;DataSet&#x2F;it.seg.cln&#39;</span><br><span class="line">raw_path &#x3D; &#39;.&#x2F;raw.data&#39;</span><br><span class="line">idf_path &#x3D; &#39;.&#x2F;idf.data&#39;</span><br><span class="line"></span><br><span class="line">##读文件操作</span><br><span class="line">def read_file(f):</span><br><span class="line">    fd &#x3D; open(f, &#39;r&#39;, encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line">    return fd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file_raw_out &#x3D; open(raw_path, &#39;w&#39;, encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line"></span><br><span class="line"># 遍历整个原始数据目录，将零散的文章整合到一个文件中，便于后续数据处理</span><br><span class="line">file_name &#x3D; 0</span><br><span class="line">for fd in os.listdir(file_path_dir):</span><br><span class="line">    file_path &#x3D; file_path_dir + &#39;&#x2F;&#39; + fd #文件路径</span><br><span class="line">    content_list &#x3D; []</span><br><span class="line"></span><br><span class="line">    file_fd &#x3D; read_file(file_path)</span><br><span class="line">    for line in file_fd:</span><br><span class="line">        content_list.append(line.strip())</span><br><span class="line">#&#39; &#39;.join(content_list)</span><br><span class="line">    content &#x3D; &#39;\t&#39;.join([str(file_name),&#39;&#39;.join (content_list)]) + &#39;\n&#39;</span><br><span class="line">    #print (content)</span><br><span class="line">    #print(type(&#39;\t&#39;.join(content_list)))</span><br><span class="line">    file_raw_out.writelines(content)</span><br><span class="line"></span><br><span class="line">    file_name +&#x3D; 1</span><br><span class="line">print(&quot;文件个数：&quot;,file_name)</span><br></pre></td></tr></table></figure><p>raw.data(汇总数据文件，键值对格式)的内容为:<br><img src="https://img-blog.csdnimg.cn/20200520090545198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>2) 对所有文章按照一定规律进行切分(map过程)<br>对文章进行统计，求出IDF(reduce过程)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">#step2 产生产生IDF词表</span><br><span class="line">docs_count &#x3D; file_name</span><br><span class="line">wc_tulist &#x3D; []</span><br><span class="line">with open(raw_path, &#39;r&#39;, encoding&#x3D;&#39;utf-8&#39;) as fd:</span><br><span class="line">    for line in fd:</span><br><span class="line">        #遍历每一篇文章，文章&#x3D;line</span><br><span class="line">        ss &#x3D; line.strip().split(&#39;\t&#39;)</span><br><span class="line">        #如果分割每篇文章后的长度不是2，则表示这篇文章格式不是我们需要的，我们要的是 【序号\t内容】格式</span><br><span class="line">        if len(ss)!&#x3D;2:</span><br><span class="line">            continue</span><br><span class="line">            </span><br><span class="line">        #对文章解析，区分文章序号和文章内容 </span><br><span class="line">        file_number,file_content &#x3D; ss</span><br><span class="line">        #对文章的内容进行切词，内容已经按照空格切好词了，所以按空格做split切割</span><br><span class="line">        word_list &#x3D; file_content.strip().split(&#39; &#39;)</span><br><span class="line">        #print(&quot;word_list:&quot;,word_list)</span><br><span class="line">        </span><br><span class="line">        #去重操作，对于IDF，只需要关注词在文章中是否出现，不关心出现次数</span><br><span class="line">        word_set &#x3D; set(word_list)</span><br><span class="line">        #print(&quot;word_set:&quot;,word_set)</span><br><span class="line">        </span><br><span class="line">        # 对于每个关键词，打一个标记“1”，来标识该次出现过</span><br><span class="line">        for word in word_set:</span><br><span class="line">            wc_tulist.append((word,&#39;1&#39;))</span><br><span class="line">            #print(&quot;wc_tulist:&quot;,wc_tulist)</span><br><span class="line">            </span><br><span class="line"> #将内容输出到指定文件中.&#x2F;idf.data</span><br><span class="line">file_idf_out &#x3D; open(idf_path,&#39;w&#39;,encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line"></span><br><span class="line">#按照词的字典序进行排序</span><br><span class="line">wc_sort_tulist &#x3D; sorted(wc_tulist,key&#x3D;lambda x: x[0])</span><br><span class="line">#print(wc_sort_tulist)</span><br><span class="line">current_word &#x3D; None</span><br><span class="line">sum &#x3D; 0</span><br><span class="line">for tu in wc_sort_tulist:  </span><br><span class="line">    word, val &#x3D; tu</span><br><span class="line"></span><br><span class="line">    if current_word &#x3D;&#x3D; None:</span><br><span class="line">        current_word &#x3D; word</span><br><span class="line"></span><br><span class="line">    if current_word !&#x3D; word:</span><br><span class="line">        # 通过idf计算公式，得到每个关键词的idf score</span><br><span class="line">        idf &#x3D; math.log(float(docs_count) &#x2F; (float(sum) + 1.0))</span><br><span class="line">        content &#x3D; &#39;\t&#39;.join([current_word, str(idf)]) + &#39;\n&#39;</span><br><span class="line">        file_idf_out.write(content)</span><br><span class="line">        current_word &#x3D; word</span><br><span class="line">        sum &#x3D; 0</span><br><span class="line"></span><br><span class="line">    sum +&#x3D; int(val)</span><br><span class="line"></span><br><span class="line">#反问档频率(IDF) &#x3D; log(语料库中文章总数&#x2F;(包含该单词的文章数+1))</span><br><span class="line">idf &#x3D; math.log(float(docs_count) &#x2F; (float(sum) + 1.0))</span><br><span class="line"></span><br><span class="line"># content格式是【words\t0.1212\n】</span><br><span class="line">content &#x3D; &#39;\t&#39;.join([current_word, str(idf)]) + &#39;\n&#39;</span><br><span class="line">file_idf_out.write(content)</span><br><span class="line">#print(content)</span><br><span class="line">file_idf_out.close()</span><br></pre></td></tr></table></figure><p>idf.data内容：<br><img src="https://img-blog.csdnimg.cn/20200520090448619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDU2NjYwNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>3) 求出最终的TF-IDF</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># Step3 计算TF-IDF来提取文章中的关键词(文章单词的权重)</span><br><span class="line">input_str &#x3D; &#39;我们 科技 带来 的 科技 希望 我们 差&#39;</span><br><span class="line"></span><br><span class="line">token_idf_dict &#x3D; &#123;&#125;</span><br><span class="line"># 将idf字典加载到内存</span><br><span class="line">with open(idf_path, &#39;r&#39;, encoding&#x3D;&#39;utf-8&#39;) as fd:</span><br><span class="line">    for line in fd:</span><br><span class="line">        ss &#x3D; line.strip().split(&#39;\t&#39;)</span><br><span class="line">        if len(ss) !&#x3D; 2:</span><br><span class="line">            continue</span><br><span class="line">        token, idf_score &#x3D; ss</span><br><span class="line">        token_idf_dict[token] &#x3D; idf_score</span><br><span class="line"></span><br><span class="line">def get_tfidf(input_str):</span><br><span class="line">    token_dict &#x3D; &#123;&#125;</span><br><span class="line">    # 对输入字符串的每一个词，计算tf</span><br><span class="line">    ##计算单词在该文章出现次数</span><br><span class="line">    for t in input_str.strip().split(&#39; &#39;):</span><br><span class="line">        if t not in token_dict:</span><br><span class="line">            token_dict[t] &#x3D; 1</span><br><span class="line">        else:</span><br><span class="line">            token_dict[t] +&#x3D; 1</span><br><span class="line">    print(token_dict)</span><br><span class="line">    # res_tu_list &#x3D; [] TF-IDF&#x3D;TF*IDF</span><br><span class="line">    for k, v in token_dict.items():</span><br><span class="line">        tf_score &#x3D; token_dict[k]</span><br><span class="line">        if k not in token_idf_dict:</span><br><span class="line">            continue</span><br><span class="line">        idf_score &#x3D; token_idf_dict[k]</span><br><span class="line">        tf_idf &#x3D; tf_score * float(idf_score)</span><br><span class="line">        yield (k, tf_idf)</span><br><span class="line"></span><br><span class="line">for k, v in get_tfidf(input_str):</span><br><span class="line">    print(k, v)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#39;我们&#39;: 2, &#39;科技&#39;: 2, &#39;带来&#39;: 1, &#39;的&#39;: 1, &#39;希望&#39;: 1, &#39;差&#39;: 1&#125;</span><br><span class="line">我们 2.240920456387959</span><br><span class="line">科技 4.378793497431945</span><br><span class="line">带来 1.4617633920848578</span><br><span class="line">的 0.0059113472630571645</span><br><span class="line">希望 1.9419885754021315</span><br><span class="line">差 3.013572191682322</span><br></pre></td></tr></table></figure><p>分析：“科技”的TF-IDF值最高，代表该文章的关键词；“的”的TF-IDF值最低，表示该词是最常用的词，也叫”停用词”（stop words）。</p><p>文档库数据集在这：<a href="https://github.com/AthenaHe/BigData-Studies.git" target="_blank" rel="noopener">下载地址</a>或者这个<a href="https://download.csdn.net/download/weixin_34566605/12439657" target="_blank" rel="noopener">下载地址</a></p><p>未完待续。。。</p><p>参考文档：<br><a href="https://blog.csdn.net/u013982921/article/details/80964335" target="_blank" rel="noopener">TF-IDF原理及使用</a><br><a href="http://www.ruanyifeng.com/blog/2013/03/tf-idf.html" target="_blank" rel="noopener">TF-IDF与余弦相似性的应用（一）：自动提取关键词</a><br><a href="http://www.ruanyifeng.com/blog/2013/03/cosine_similarity.html" target="_blank" rel="noopener">TF-IDF与余弦相似性的应用（二）：找出相似文章</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
